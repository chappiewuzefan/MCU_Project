
test_Sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000082d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  08008478  08008478  00018478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a18  08008a18  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08008a18  08008a18  00018a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008a20  08008a20  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a20  08008a20  00018a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a24  08008a24  00018a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08008a28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004d78  20000098  08008ac0  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e10  08008ac0  00024e10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018351  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e97  00000000  00000000  00038419  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001180  00000000  00000000  0003b2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001068  00000000  00000000  0003c430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001843d  00000000  00000000  0003d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001634f  00000000  00000000  000558d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090f7e  00000000  00000000  0006bc24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fcba2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  000fcbf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008460 	.word	0x08008460

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	08008460 	.word	0x08008460

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <SELECT>:



/* SPI Chip Select */
static void SELECT(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <SELECT+0x14>)
 8000b9e:	f001 fd01 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40020400 	.word	0x40020400

08000bac <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DESELECT+0x14>)
 8000bb6:	f001 fcf5 	bl	80025a4 <HAL_GPIO_WritePin>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000bce:	bf00      	nop
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <SPI_TxByte+0x30>)
 8000bd2:	f002 fcdc 	bl	800358e <HAL_SPI_GetState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d1f9      	bne.n	8000bd0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000bdc:	1df9      	adds	r1, r7, #7
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <SPI_TxByte+0x30>)
 8000be6:	f002 f9f4 	bl	8002fd2 <HAL_SPI_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000030c 	.word	0x2000030c

08000bf8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bfe:	23ff      	movs	r3, #255	; 0xff
 8000c00:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000c06:	bf00      	nop
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <SPI_RxByte+0x38>)
 8000c0a:	f002 fcc0 	bl	800358e <HAL_SPI_GetState>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d1f9      	bne.n	8000c08 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000c14:	1dba      	adds	r2, r7, #6
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <SPI_RxByte+0x38>)
 8000c22:	f002 fb12 	bl	800324a <HAL_SPI_TransmitReceive>

  return data;
 8000c26:	79bb      	ldrb	r3, [r7, #6]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	2000030c 	.word	0x2000030c

08000c34 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c3c:	f7ff ffdc 	bl	8000bf8 <SPI_RxByte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SD_ReadyWait+0x34>)
 8000c58:	2232      	movs	r2, #50	; 0x32
 8000c5a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c5c:	f7ff ffcc 	bl	8000bf8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c60:	f7ff ffca 	bl	8000bf8 <SPI_RxByte>
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d004      	beq.n	8000c78 <SD_ReadyWait+0x28>
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SD_ReadyWait+0x34>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f3      	bne.n	8000c60 <SD_ReadyWait+0x10>

  return res;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20002d88 	.word	0x20002d88

08000c88 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c8e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c92:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c94:	f7ff ff8a 	bl	8000bac <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e005      	b.n	8000caa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c9e:	20ff      	movs	r0, #255	; 0xff
 8000ca0:	f7ff ff90 	bl	8000bc4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	2b09      	cmp	r3, #9
 8000cae:	ddf6      	ble.n	8000c9e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000cb0:	f7ff ff70 	bl	8000b94 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cc8:	2395      	movs	r3, #149	; 0x95
 8000cca:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e009      	b.n	8000ce6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff72 	bl	8000bc4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	ddf2      	ble.n	8000cd2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000cec:	e002      	b.n	8000cf4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cf4:	f7ff ff80 	bl	8000bf8 <SPI_RxByte>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d002      	beq.n	8000d04 <SD_PowerOn+0x7c>
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f4      	bne.n	8000cee <SD_PowerOn+0x66>
  }

  DESELECT();
 8000d04:	f7ff ff52 	bl	8000bac <DESELECT>
  SPI_TxByte(0XFF);
 8000d08:	20ff      	movs	r0, #255	; 0xff
 8000d0a:	f7ff ff5b 	bl	8000bc4 <SPI_TxByte>

  PowerFlag = 1;
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <SD_PowerOn+0x94>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000b5 	.word	0x200000b5

08000d20 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <SD_PowerOff+0x14>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000b5 	.word	0x200000b5

08000d38 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_CheckPower+0x14>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000b5 	.word	0x200000b5

08000d50 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <SD_RxDataBlock+0x68>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d60:	f7ff ff4a 	bl	8000bf8 <SPI_RxByte>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d104      	bne.n	8000d78 <SD_RxDataBlock+0x28>
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <SD_RxDataBlock+0x68>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f3      	bne.n	8000d60 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7c:	d001      	beq.n	8000d82 <SD_RxDataBlock+0x32>
    return FALSE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e016      	b.n	8000db0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff53 	bl	8000c34 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff4d 	bl	8000c34 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ed      	bne.n	8000d82 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000da6:	f7ff ff27 	bl	8000bf8 <SPI_RxByte>
  SPI_RxByte();
 8000daa:	f7ff ff25 	bl	8000bf8 <SPI_RxByte>

  return TRUE;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	20002d89 	.word	0x20002d89

08000dbc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dcc:	f7ff ff40 	bl	8000c50 <SD_ReadyWait>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d001      	beq.n	8000dda <SD_TxDataBlock+0x1e>
    return FALSE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e040      	b.n	8000e5c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fef1 	bl	8000bc4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	2bfd      	cmp	r3, #253	; 0xfd
 8000de6:	d031      	beq.n	8000e4c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fee5 	bl	8000bc4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fede 	bl	8000bc4 <SPI_TxByte>
    } while (--wc);
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1eb      	bne.n	8000dec <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000e14:	f7ff fef0 	bl	8000bf8 <SPI_RxByte>
    SPI_RxByte();
 8000e18:	f7ff feee 	bl	8000bf8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e1c:	e00b      	b.n	8000e36 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e1e:	f7ff feeb 	bl	8000bf8 <SPI_RxByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d006      	beq.n	8000e3e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e30:	7b7b      	ldrb	r3, [r7, #13]
 8000e32:	3301      	adds	r3, #1
 8000e34:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d9f0      	bls.n	8000e1e <SD_TxDataBlock+0x62>
 8000e3c:	e000      	b.n	8000e40 <SD_TxDataBlock+0x84>
        break;
 8000e3e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e40:	bf00      	nop
 8000e42:	f7ff fed9 	bl	8000bf8 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0fa      	beq.n	8000e42 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d101      	bne.n	8000e5a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e70:	f7ff feee 	bl	8000c50 <SD_ReadyWait>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2bff      	cmp	r3, #255	; 0xff
 8000e78:	d001      	beq.n	8000e7e <SD_SendCmd+0x1a>
    return 0xFF;
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	e040      	b.n	8000f00 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe9f 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	0e1b      	lsrs	r3, r3, #24
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe99 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0c1b      	lsrs	r3, r3, #16
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe93 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe8d 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe88 	bl	8000bc4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b40      	cmp	r3, #64	; 0x40
 8000ebc:	d101      	bne.n	8000ec2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ebe:	2395      	movs	r3, #149	; 0x95
 8000ec0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b48      	cmp	r3, #72	; 0x48
 8000ec6:	d101      	bne.n	8000ecc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe78 	bl	8000bc4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b4c      	cmp	r3, #76	; 0x4c
 8000ed8:	d101      	bne.n	8000ede <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000eda:	f7ff fe8d 	bl	8000bf8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ee2:	f7ff fe89 	bl	8000bf8 <SPI_RxByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000eea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da05      	bge.n	8000efe <SD_SendCmd+0x9a>
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	73bb      	strb	r3, [r7, #14]
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f1      	bne.n	8000ee2 <SD_SendCmd+0x7e>

  return res;
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0d5      	b.n	80010c8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <SD_disk_initialize+0x1c8>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <SD_disk_initialize+0x2a>
    return Stat;
 8000f2a:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <SD_disk_initialize+0x1c8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	e0ca      	b.n	80010c8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f32:	f7ff fea9 	bl	8000c88 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f36:	f7ff fe2d 	bl	8000b94 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	f7ff ff8f 	bl	8000e64 <SD_SendCmd>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	f040 80a5 	bne.w	8001098 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f4e:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000f50:	2264      	movs	r2, #100	; 0x64
 8000f52:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f58:	2048      	movs	r0, #72	; 0x48
 8000f5a:	f7ff ff83 	bl	8000e64 <SD_SendCmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d158      	bne.n	8001016 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f6a:	7bfc      	ldrb	r4, [r7, #15]
 8000f6c:	f7ff fe44 	bl	8000bf8 <SPI_RxByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4423      	add	r3, r4
 8000f7a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9ef      	bls.n	8000f6a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f8a:	7abb      	ldrb	r3, [r7, #10]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8083 	bne.w	8001098 <SD_disk_initialize+0x190>
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	2baa      	cmp	r3, #170	; 0xaa
 8000f96:	d17f      	bne.n	8001098 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2077      	movs	r0, #119	; 0x77
 8000f9c:	f7ff ff62 	bl	8000e64 <SD_SendCmd>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d807      	bhi.n	8000fb6 <SD_disk_initialize+0xae>
 8000fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000faa:	2069      	movs	r0, #105	; 0x69
 8000fac:	f7ff ff5a 	bl	8000e64 <SD_SendCmd>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1eb      	bne.n	8000f98 <SD_disk_initialize+0x90>
 8000fc0:	e000      	b.n	8000fc4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fc2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d064      	beq.n	8001098 <SD_disk_initialize+0x190>
 8000fce:	2100      	movs	r1, #0
 8000fd0:	207a      	movs	r0, #122	; 0x7a
 8000fd2:	f7ff ff47 	bl	8000e64 <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d15d      	bne.n	8001098 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e00c      	b.n	8000ffc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fe2:	7bfc      	ldrb	r4, [r7, #15]
 8000fe4:	f7ff fe08 	bl	8000bf8 <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4423      	add	r3, r4
 8000ff2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d9ef      	bls.n	8000fe2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SD_disk_initialize+0x108>
 800100c:	2306      	movs	r3, #6
 800100e:	e000      	b.n	8001012 <SD_disk_initialize+0x10a>
 8001010:	2302      	movs	r3, #2
 8001012:	73bb      	strb	r3, [r7, #14]
 8001014:	e040      	b.n	8001098 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001016:	2100      	movs	r1, #0
 8001018:	2077      	movs	r0, #119	; 0x77
 800101a:	f7ff ff23 	bl	8000e64 <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d808      	bhi.n	8001036 <SD_disk_initialize+0x12e>
 8001024:	2100      	movs	r1, #0
 8001026:	2069      	movs	r0, #105	; 0x69
 8001028:	f7ff ff1c 	bl	8000e64 <SD_SendCmd>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d801      	bhi.n	8001036 <SD_disk_initialize+0x12e>
 8001032:	2302      	movs	r3, #2
 8001034:	e000      	b.n	8001038 <SD_disk_initialize+0x130>
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10e      	bne.n	800105e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001040:	2100      	movs	r1, #0
 8001042:	2077      	movs	r0, #119	; 0x77
 8001044:	f7ff ff0e 	bl	8000e64 <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d80e      	bhi.n	800106c <SD_disk_initialize+0x164>
 800104e:	2100      	movs	r1, #0
 8001050:	2069      	movs	r0, #105	; 0x69
 8001052:	f7ff ff07 	bl	8000e64 <SD_SendCmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800105c:	e00d      	b.n	800107a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800105e:	2100      	movs	r1, #0
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f7ff feff 	bl	8000e64 <SD_SendCmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <SD_disk_initialize+0x1cc>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e1      	bne.n	800103a <SD_disk_initialize+0x132>
 8001076:	e000      	b.n	800107a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001078:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <SD_disk_initialize+0x1cc>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <SD_disk_initialize+0x18c>
 8001084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001088:	2050      	movs	r0, #80	; 0x50
 800108a:	f7ff feeb 	bl	8000e64 <SD_SendCmd>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <SD_disk_initialize+0x1d0>)
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800109e:	f7ff fd85 	bl	8000bac <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80010a2:	f7ff fda9 	bl	8000bf8 <SPI_RxByte>

  if (type)
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e001      	b.n	80010c2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010be:	f7ff fe2f 	bl	8000d20 <SD_PowerOff>
  }

  return Stat;
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	20002d89 	.word	0x20002d89
 80010d8:	200000b4 	.word	0x200000b4

080010dc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e002      	b.n	80010f6 <SD_disk_status+0x1a>

  return Stat;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SD_disk_status+0x28>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <SD_disk_read+0x1c>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <SD_disk_read+0x20>
    return RES_PARERR;
 8001124:	2304      	movs	r3, #4
 8001126:	e051      	b.n	80011cc <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <SD_disk_read+0xcc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001136:	2303      	movs	r3, #3
 8001138:	e048      	b.n	80011cc <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <SD_disk_read+0xd0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	607b      	str	r3, [r7, #4]

  SELECT();
 800114c:	f7ff fd22 	bl	8000b94 <SELECT>

  if (count == 1)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d111      	bne.n	800117a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2051      	movs	r0, #81	; 0x51
 800115a:	f7ff fe83 	bl	8000e64 <SD_SendCmd>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d129      	bne.n	80011b8 <SD_disk_read+0xb0>
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fdf1 	bl	8000d50 <SD_RxDataBlock>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d021      	beq.n	80011b8 <SD_disk_read+0xb0>
      count = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	e01e      	b.n	80011b8 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	2052      	movs	r0, #82	; 0x52
 800117e:	f7ff fe71 	bl	8000e64 <SD_SendCmd>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d117      	bne.n	80011b8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f7ff fddf 	bl	8000d50 <SD_RxDataBlock>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800119e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ed      	bne.n	8001188 <SD_disk_read+0x80>
 80011ac:	e000      	b.n	80011b0 <SD_disk_read+0xa8>
          break;
 80011ae:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	204c      	movs	r0, #76	; 0x4c
 80011b4:	f7ff fe56 	bl	8000e64 <SD_SendCmd>
    }
  }

  DESELECT();
 80011b8:	f7ff fcf8 	bl	8000bac <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011bc:	f7ff fd1c 	bl	8000bf8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200000b4 	.word	0x200000b4

080011dc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_write+0x1c>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <SD_disk_write+0x20>
    return RES_PARERR;
 80011f8:	2304      	movs	r3, #4
 80011fa:	e06b      	b.n	80012d4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <SD_disk_write+0x100>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800120a:	2303      	movs	r3, #3
 800120c:	e062      	b.n	80012d4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <SD_disk_write+0x100>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SD_disk_write+0x44>
    return RES_WRPRT;
 800121c:	2302      	movs	r3, #2
 800121e:	e059      	b.n	80012d4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <SD_disk_write+0x104>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	607b      	str	r3, [r7, #4]

  SELECT();
 8001232:	f7ff fcaf 	bl	8000b94 <SELECT>

  if (count == 1)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d110      	bne.n	800125e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2058      	movs	r0, #88	; 0x58
 8001240:	f7ff fe10 	bl	8000e64 <SD_SendCmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d13a      	bne.n	80012c0 <SD_disk_write+0xe4>
 800124a:	21fe      	movs	r1, #254	; 0xfe
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff fdb5 	bl	8000dbc <SD_TxDataBlock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d033      	beq.n	80012c0 <SD_disk_write+0xe4>
      count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	e030      	b.n	80012c0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <SD_disk_write+0x104>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800126a:	2100      	movs	r1, #0
 800126c:	2077      	movs	r0, #119	; 0x77
 800126e:	f7ff fdf9 	bl	8000e64 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	2057      	movs	r0, #87	; 0x57
 8001276:	f7ff fdf5 	bl	8000e64 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2059      	movs	r0, #89	; 0x59
 800127e:	f7ff fdf1 	bl	8000e64 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11b      	bne.n	80012c0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001288:	21fc      	movs	r1, #252	; 0xfc
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7ff fd96 	bl	8000dbc <SD_TxDataBlock>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00a      	beq.n	80012ac <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800129c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ee      	bne.n	8001288 <SD_disk_write+0xac>
 80012aa:	e000      	b.n	80012ae <SD_disk_write+0xd2>
          break;
 80012ac:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80012ae:	21fd      	movs	r1, #253	; 0xfd
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fd83 	bl	8000dbc <SD_TxDataBlock>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <SD_disk_write+0xe4>
      {
        count = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012c0:	f7ff fc74 	bl	8000bac <DESELECT>
  SPI_RxByte();
 80012c4:	f7ff fc98 	bl	8000bf8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200000b4 	.word	0x200000b4

080012e4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	603a      	str	r2, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	460b      	mov	r3, r1
 80012f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80012fe:	2304      	movs	r3, #4
 8001300:	e11b      	b.n	800153a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b05      	cmp	r3, #5
 800130c:	d129      	bne.n	8001362 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d017      	beq.n	8001346 <SD_disk_ioctl+0x62>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc1f      	bgt.n	800135a <SD_disk_ioctl+0x76>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <SD_disk_ioctl+0x40>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00b      	beq.n	800133a <SD_disk_ioctl+0x56>
 8001322:	e01a      	b.n	800135a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001324:	f7ff fd08 	bl	8000d38 <SD_CheckPower>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800132e:	f7ff fcf7 	bl	8000d20 <SD_PowerOff>
      res = RES_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001338:	e0fd      	b.n	8001536 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800133a:	f7ff fca5 	bl	8000c88 <SD_PowerOn>
      res = RES_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001344:	e0f7      	b.n	8001536 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	1c5c      	adds	r4, r3, #1
 800134a:	f7ff fcf5 	bl	8000d38 <SD_CheckPower>
 800134e:	4603      	mov	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001358:	e0ed      	b.n	8001536 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800135a:	2304      	movs	r3, #4
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001360:	e0e9      	b.n	8001536 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <SD_disk_ioctl+0x260>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001370:	2303      	movs	r3, #3
 8001372:	e0e2      	b.n	800153a <SD_disk_ioctl+0x256>

    SELECT();
 8001374:	f7ff fc0e 	bl	8000b94 <SELECT>

    switch (ctrl)
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b0d      	cmp	r3, #13
 800137c:	f200 80cc 	bhi.w	8001518 <SD_disk_ioctl+0x234>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <SD_disk_ioctl+0xa4>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001483 	.word	0x08001483
 800138c:	080013c1 	.word	0x080013c1
 8001390:	08001473 	.word	0x08001473
 8001394:	08001519 	.word	0x08001519
 8001398:	08001519 	.word	0x08001519
 800139c:	08001519 	.word	0x08001519
 80013a0:	08001519 	.word	0x08001519
 80013a4:	08001519 	.word	0x08001519
 80013a8:	08001519 	.word	0x08001519
 80013ac:	08001519 	.word	0x08001519
 80013b0:	08001519 	.word	0x08001519
 80013b4:	08001495 	.word	0x08001495
 80013b8:	080014b9 	.word	0x080014b9
 80013bc:	080014dd 	.word	0x080014dd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c0:	2100      	movs	r1, #0
 80013c2:	2049      	movs	r0, #73	; 0x49
 80013c4:	f7ff fd4e 	bl	8000e64 <SD_SendCmd>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80a8 	bne.w	8001520 <SD_disk_ioctl+0x23c>
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2110      	movs	r1, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fcba 	bl	8000d50 <SD_RxDataBlock>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 809e 	beq.w	8001520 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80013e4:	7b3b      	ldrb	r3, [r7, #12]
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10e      	bne.n	800140c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001402:	8bfb      	ldrh	r3, [r7, #30]
 8001404:	029a      	lsls	r2, r3, #10
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e02e      	b.n	800146a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7dbb      	ldrb	r3, [r7, #22]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0306 	and.w	r3, r3, #6
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3302      	adds	r3, #2
 8001430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001434:	7d3b      	ldrb	r3, [r7, #20]
 8001436:	099b      	lsrs	r3, r3, #6
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b29a      	uxth	r2, r3
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	b29b      	uxth	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b29a      	uxth	r2, r3
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	b29b      	uxth	r3, r3
 800144e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001452:	b29b      	uxth	r3, r3
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800145c:	8bfa      	ldrh	r2, [r7, #30]
 800145e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001462:	3b09      	subs	r3, #9
 8001464:	409a      	lsls	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001470:	e056      	b.n	8001520 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001480:	e055      	b.n	800152e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001482:	f7ff fbe5 	bl	8000c50 <SD_ReadyWait>
 8001486:	4603      	mov	r3, r0
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d14b      	bne.n	8001524 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001492:	e047      	b.n	8001524 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001494:	2100      	movs	r1, #0
 8001496:	2049      	movs	r0, #73	; 0x49
 8001498:	f7ff fce4 	bl	8000e64 <SD_SendCmd>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d142      	bne.n	8001528 <SD_disk_ioctl+0x244>
 80014a2:	2110      	movs	r1, #16
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff fc53 	bl	8000d50 <SD_RxDataBlock>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03b      	beq.n	8001528 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b6:	e037      	b.n	8001528 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014b8:	2100      	movs	r1, #0
 80014ba:	204a      	movs	r0, #74	; 0x4a
 80014bc:	f7ff fcd2 	bl	8000e64 <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d132      	bne.n	800152c <SD_disk_ioctl+0x248>
 80014c6:	2110      	movs	r1, #16
 80014c8:	6a38      	ldr	r0, [r7, #32]
 80014ca:	f7ff fc41 	bl	8000d50 <SD_RxDataBlock>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d02b      	beq.n	800152c <SD_disk_ioctl+0x248>
        res = RES_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014da:	e027      	b.n	800152c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014dc:	2100      	movs	r1, #0
 80014de:	207a      	movs	r0, #122	; 0x7a
 80014e0:	f7ff fcc0 	bl	8000e64 <SD_SendCmd>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014f0:	e00b      	b.n	800150a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80014f2:	6a3c      	ldr	r4, [r7, #32]
 80014f4:	1c63      	adds	r3, r4, #1
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	f7ff fb7e 	bl	8000bf8 <SPI_RxByte>
 80014fc:	4603      	mov	r3, r0
 80014fe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800150a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800150e:	2b03      	cmp	r3, #3
 8001510:	d9ef      	bls.n	80014f2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001518:	2304      	movs	r3, #4
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151e:	e006      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001520:	bf00      	nop
 8001522:	e004      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001524:	bf00      	nop
 8001526:	e002      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 800152c:	bf00      	nop
    }

    DESELECT();
 800152e:	f7ff fb3d 	bl	8000bac <DESELECT>
    SPI_RxByte();
 8001532:	f7ff fb61 	bl	8000bf8 <SPI_RxByte>
  }

  return res;
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800153a:	4618      	mov	r0, r3
 800153c:	372c      	adds	r7, #44	; 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000

08001548 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char*string)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <send_uart+0x2c>)
 8001566:	f002 fdac 	bl	80040c2 <HAL_UART_Transmit>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	20001d10 	.word	0x20001d10

08001578 <bufsize>:

int bufsize (char*buf)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 8001584:	e002      	b.n	800158c <bufsize+0x14>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f6      	bne.n	8001586 <bufsize+0xe>
	return i;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <bufclear>:

void bufclear (char *buffer)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	for (int i=0; i<1024; i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e007      	b.n	80015c4 <bufclear+0x1e>
	{
		buffer[i]='\0';
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<1024; i++)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ca:	dbf3      	blt.n	80015b4 <bufclear+0xe>
	}
}
 80015cc:	bf00      	nop
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
	...

080015dc <open_append>:

FRESULT open_append(FIL* fp, /* [OUT] File object to create */
const char* path /* [IN]  File name to be opened */
) {
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
 80015e4:	6039      	str	r1, [r7, #0]

	/* Opens an existing file. If not exist, creates a new file. */
	fresult = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS | FA_WRITE);
 80015e6:	2212      	movs	r2, #18
 80015e8:	6839      	ldr	r1, [r7, #0]
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f005 fad4 	bl	8006b98 <f_open>
 80015f0:	4603      	mov	r3, r0
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b0e      	ldr	r3, [pc, #56]	; (8001630 <open_append+0x54>)
 80015f6:	701a      	strb	r2, [r3, #0]
	if (fresult == 0) {
 80015f8:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <open_append+0x54>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d110      	bne.n	8001622 <open_append+0x46>
		/* Seek to end of the file to append data */
		fresult = f_lseek(fp, f_size(fp));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	4619      	mov	r1, r3
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f005 fece 	bl	80073a8 <f_lseek>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b07      	ldr	r3, [pc, #28]	; (8001630 <open_append+0x54>)
 8001612:	701a      	strb	r2, [r3, #0]
		if (fresult != 0)
 8001614:	4b06      	ldr	r3, [pc, #24]	; (8001630 <open_append+0x54>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d002      	beq.n	8001622 <open_append+0x46>
			f_close(fp);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f005 fe99 	bl	8007354 <f_close>
	}
	return fresult;
 8001622:	4b03      	ldr	r3, [pc, #12]	; (8001630 <open_append+0x54>)
 8001624:	781b      	ldrb	r3, [r3, #0]
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	20001d0c 	.word	0x20001d0c

08001634 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001638:	f000 fcac 	bl	8001f94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800163c:	f000 f91c 	bl	8001878 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001640:	f000 fa30 	bl	8001aa4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001644:	f000 fa04 	bl	8001a50 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001648:	f000 f97e 	bl	8001948 <MX_SPI2_Init>
  MX_FATFS_Init();
 800164c:	f003 f802 	bl	8004654 <MX_FATFS_Init>
  MX_TIM3_Init();
 8001650:	f000 f9b0 	bl	80019b4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD card*/
    fresult = f_mount(&fs, "/", 1);
 8001654:	2201      	movs	r2, #1
 8001656:	496e      	ldr	r1, [pc, #440]	; (8001810 <main+0x1dc>)
 8001658:	486e      	ldr	r0, [pc, #440]	; (8001814 <main+0x1e0>)
 800165a:	f005 fa57 	bl	8006b0c <f_mount>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	4b6d      	ldr	r3, [pc, #436]	; (8001818 <main+0x1e4>)
 8001664:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 8001666:	4b6c      	ldr	r3, [pc, #432]	; (8001818 <main+0x1e4>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <main+0x42>
 800166e:	486b      	ldr	r0, [pc, #428]	; (800181c <main+0x1e8>)
 8001670:	f7ff ff6a 	bl	8001548 <send_uart>
 8001674:	e002      	b.n	800167c <main+0x48>
    else send_uart("SD CARD mounted successfully...\n\n");
 8001676:	486a      	ldr	r0, [pc, #424]	; (8001820 <main+0x1ec>)
 8001678:	f7ff ff66 	bl	8001548 <send_uart>

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 800167c:	4a69      	ldr	r2, [pc, #420]	; (8001824 <main+0x1f0>)
 800167e:	496a      	ldr	r1, [pc, #424]	; (8001828 <main+0x1f4>)
 8001680:	486a      	ldr	r0, [pc, #424]	; (800182c <main+0x1f8>)
 8001682:	f006 f8b5 	bl	80077f0 <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 8001686:	4b67      	ldr	r3, [pc, #412]	; (8001824 <main+0x1f0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	3b02      	subs	r3, #2
 800168e:	4a65      	ldr	r2, [pc, #404]	; (8001824 <main+0x1f0>)
 8001690:	6812      	ldr	r2, [r2, #0]
 8001692:	8952      	ldrh	r2, [r2, #10]
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff f865 	bl	8000768 <__aeabi_ui2d>
 800169e:	f04f 0200 	mov.w	r2, #0
 80016a2:	4b63      	ldr	r3, [pc, #396]	; (8001830 <main+0x1fc>)
 80016a4:	f7fe fdf4 	bl	8000290 <__aeabi_dmul>
 80016a8:	4602      	mov	r2, r0
 80016aa:	460b      	mov	r3, r1
 80016ac:	4610      	mov	r0, r2
 80016ae:	4619      	mov	r1, r3
 80016b0:	f7ff f8d4 	bl	800085c <__aeabi_d2uiz>
 80016b4:	4603      	mov	r3, r0
 80016b6:	4a5f      	ldr	r2, [pc, #380]	; (8001834 <main+0x200>)
 80016b8:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD card total size:\t%lu\n", total);
 80016ba:	4b5e      	ldr	r3, [pc, #376]	; (8001834 <main+0x200>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	461a      	mov	r2, r3
 80016c0:	495d      	ldr	r1, [pc, #372]	; (8001838 <main+0x204>)
 80016c2:	485e      	ldr	r0, [pc, #376]	; (800183c <main+0x208>)
 80016c4:	f006 fa9e 	bl	8007c04 <siprintf>
	send_uart(buffer);
 80016c8:	485c      	ldr	r0, [pc, #368]	; (800183c <main+0x208>)
 80016ca:	f7ff ff3d 	bl	8001548 <send_uart>
	bufclear(buffer);
 80016ce:	485b      	ldr	r0, [pc, #364]	; (800183c <main+0x208>)
 80016d0:	f7ff ff69 	bl	80015a6 <bufclear>


	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80016d4:	4b53      	ldr	r3, [pc, #332]	; (8001824 <main+0x1f0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	895b      	ldrh	r3, [r3, #10]
 80016da:	461a      	mov	r2, r3
 80016dc:	4b52      	ldr	r3, [pc, #328]	; (8001828 <main+0x1f4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	fb03 f302 	mul.w	r3, r3, r2
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff f83f 	bl	8000768 <__aeabi_ui2d>
 80016ea:	f04f 0200 	mov.w	r2, #0
 80016ee:	4b50      	ldr	r3, [pc, #320]	; (8001830 <main+0x1fc>)
 80016f0:	f7fe fdce 	bl	8000290 <__aeabi_dmul>
 80016f4:	4602      	mov	r2, r0
 80016f6:	460b      	mov	r3, r1
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	f7ff f8ae 	bl	800085c <__aeabi_d2uiz>
 8001700:	4603      	mov	r3, r0
 8001702:	4a4f      	ldr	r2, [pc, #316]	; (8001840 <main+0x20c>)
 8001704:	6013      	str	r3, [r2, #0]
	sprintf (buffer, "SD card free space:\t%lu\n", free_space);
 8001706:	4b4e      	ldr	r3, [pc, #312]	; (8001840 <main+0x20c>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	461a      	mov	r2, r3
 800170c:	494d      	ldr	r1, [pc, #308]	; (8001844 <main+0x210>)
 800170e:	484b      	ldr	r0, [pc, #300]	; (800183c <main+0x208>)
 8001710:	f006 fa78 	bl	8007c04 <siprintf>
	send_uart(buffer);
 8001714:	4849      	ldr	r0, [pc, #292]	; (800183c <main+0x208>)
 8001716:	f7ff ff17 	bl	8001548 <send_uart>
	bufclear(buffer);
 800171a:	4848      	ldr	r0, [pc, #288]	; (800183c <main+0x208>)
 800171c:	f7ff ff43 	bl	80015a6 <bufclear>
//	f_close(&fil);
//
//	bufclear();

	//start the timer 3
	HAL_TIM_Base_Start_IT(&htim3);
 8001720:	4849      	ldr	r0, [pc, #292]	; (8001848 <main+0x214>)
 8001722:	f002 f85d 	bl	80037e0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		  if (Timer_flag)
 8001726:	4b49      	ldr	r3, [pc, #292]	; (800184c <main+0x218>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d01f      	beq.n	800176e <main+0x13a>
		  {

	      Timer_flag=0;
 800172e:	4b47      	ldr	r3, [pc, #284]	; (800184c <main+0x218>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
		  buffer[i_sd_write-1]=(char)i_sd_write;
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <main+0x21c>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b45      	ldr	r3, [pc, #276]	; (8001850 <main+0x21c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	3b01      	subs	r3, #1
 800173e:	b2d1      	uxtb	r1, r2
 8001740:	4a3e      	ldr	r2, [pc, #248]	; (800183c <main+0x208>)
 8001742:	54d1      	strb	r1, [r2, r3]
		  i_sd_write++;
 8001744:	4b42      	ldr	r3, [pc, #264]	; (8001850 <main+0x21c>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	3301      	adds	r3, #1
 800174a:	4a41      	ldr	r2, [pc, #260]	; (8001850 <main+0x21c>)
 800174c:	6013      	str	r3, [r2, #0]

			 if (i_sd_write%sd_fram_size == 1)
 800174e:	4b40      	ldr	r3, [pc, #256]	; (8001850 <main+0x21c>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a40      	ldr	r2, [pc, #256]	; (8001854 <main+0x220>)
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	fbb3 f1f2 	udiv	r1, r3, r2
 800175a:	fb02 f201 	mul.w	r2, r2, r1
 800175e:	1a9b      	subs	r3, r3, r2
 8001760:	2b01      	cmp	r3, #1
 8001762:	d104      	bne.n	800176e <main+0x13a>
			 {
				 i_sd_frame++;
 8001764:	4b3c      	ldr	r3, [pc, #240]	; (8001858 <main+0x224>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	3301      	adds	r3, #1
 800176a:	4a3b      	ldr	r2, [pc, #236]	; (8001858 <main+0x224>)
 800176c:	6013      	str	r3, [r2, #0]
			 }
		  }

		if (i_sd_frame == sd_frame_number)
 800176e:	4b3a      	ldr	r3, [pc, #232]	; (8001858 <main+0x224>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	4b3a      	ldr	r3, [pc, #232]	; (800185c <main+0x228>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	429a      	cmp	r2, r3
 8001778:	d139      	bne.n	80017ee <main+0x1ba>
		{
		    // clear counter and set the flag
			i_sd_frame=0;
 800177a:	4b37      	ldr	r3, [pc, #220]	; (8001858 <main+0x224>)
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
			i_sd_write=1;
 8001780:	4b33      	ldr	r3, [pc, #204]	; (8001850 <main+0x21c>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

			//Save data into file
			 buffer[i_sd_write-1]='\n';
 8001786:	4b32      	ldr	r3, [pc, #200]	; (8001850 <main+0x21c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3b01      	subs	r3, #1
 800178c:	4a2b      	ldr	r2, [pc, #172]	; (800183c <main+0x208>)
 800178e:	210a      	movs	r1, #10
 8001790:	54d1      	strb	r1, [r2, r3]
			 i_sd_write++;
 8001792:	4b2f      	ldr	r3, [pc, #188]	; (8001850 <main+0x21c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	3301      	adds	r3, #1
 8001798:	4a2d      	ldr	r2, [pc, #180]	; (8001850 <main+0x21c>)
 800179a:	6013      	str	r3, [r2, #0]
			// fresult = f_lseek(&fil, f_size(&fil));
			 fresult= open_append(&fil,"fileTimer50khz111.txt");
 800179c:	4930      	ldr	r1, [pc, #192]	; (8001860 <main+0x22c>)
 800179e:	4831      	ldr	r0, [pc, #196]	; (8001864 <main+0x230>)
 80017a0:	f7ff ff1c 	bl	80015dc <open_append>
 80017a4:	4603      	mov	r3, r0
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b1b      	ldr	r3, [pc, #108]	; (8001818 <main+0x1e4>)
 80017aa:	701a      	strb	r2, [r3, #0]
			 if(fresult == FR_OK)
 80017ac:	4b1a      	ldr	r3, [pc, #104]	; (8001818 <main+0x1e4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d114      	bne.n	80017de <main+0x1aa>
			 {
				 fresult = f_write(&fil,buffer, bufsize(buffer),&bw);
 80017b4:	4821      	ldr	r0, [pc, #132]	; (800183c <main+0x208>)
 80017b6:	f7ff fedf 	bl	8001578 <bufsize>
 80017ba:	4603      	mov	r3, r0
 80017bc:	461a      	mov	r2, r3
 80017be:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <main+0x234>)
 80017c0:	491e      	ldr	r1, [pc, #120]	; (800183c <main+0x208>)
 80017c2:	4828      	ldr	r0, [pc, #160]	; (8001864 <main+0x230>)
 80017c4:	f005 fbb4 	bl	8006f30 <f_write>
 80017c8:	4603      	mov	r3, r0
 80017ca:	461a      	mov	r2, r3
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <main+0x1e4>)
 80017ce:	701a      	strb	r2, [r3, #0]
				 fresult = f_close(&fil);
 80017d0:	4824      	ldr	r0, [pc, #144]	; (8001864 <main+0x230>)
 80017d2:	f005 fdbf 	bl	8007354 <f_close>
 80017d6:	4603      	mov	r3, r0
 80017d8:	461a      	mov	r2, r3
 80017da:	4b0f      	ldr	r3, [pc, #60]	; (8001818 <main+0x1e4>)
 80017dc:	701a      	strb	r2, [r3, #0]
			 }
			  sd_write_counter++;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <main+0x238>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	3301      	adds	r3, #1
 80017e4:	4a21      	ldr	r2, [pc, #132]	; (800186c <main+0x238>)
 80017e6:	6013      	str	r3, [r2, #0]
//				send_uart(rd_buffer);
//
//				f_close(&fil);

//				bufclear(rd_buffer);
				bufclear(buffer);
 80017e8:	4814      	ldr	r0, [pc, #80]	; (800183c <main+0x208>)
 80017ea:	f7ff fedc 	bl	80015a6 <bufclear>
		}
		if (sd_write_counter==10)
 80017ee:	4b1f      	ldr	r3, [pc, #124]	; (800186c <main+0x238>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2b0a      	cmp	r3, #10
 80017f4:	d197      	bne.n	8001726 <main+0xf2>
		{

		sd_write_counter=1;
 80017f6:	4b1d      	ldr	r3, [pc, #116]	; (800186c <main+0x238>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
		HAL_TIM_Base_Stop_IT(&htim3);
 80017fc:	4812      	ldr	r0, [pc, #72]	; (8001848 <main+0x214>)
 80017fe:	f002 f851 	bl	80038a4 <HAL_TIM_Base_Stop_IT>
		send_uart("SD CARD has been written successfully...\n\n");
 8001802:	481b      	ldr	r0, [pc, #108]	; (8001870 <main+0x23c>)
 8001804:	f7ff fea0 	bl	8001548 <send_uart>
		sd_write_complete=1;
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <main+0x240>)
 800180a:	2201      	movs	r2, #1
 800180c:	601a      	str	r2, [r3, #0]
		  if (Timer_flag)
 800180e:	e78a      	b.n	8001726 <main+0xf2>
 8001810:	08008478 	.word	0x08008478
 8001814:	2000047c 	.word	0x2000047c
 8001818:	20001d0c 	.word	0x20001d0c
 800181c:	0800847c 	.word	0x0800847c
 8001820:	080084a0 	.word	0x080084a0
 8001824:	20001d08 	.word	0x20001d08
 8001828:	20000308 	.word	0x20000308
 800182c:	080084c4 	.word	0x080084c4
 8001830:	3fe00000 	.word	0x3fe00000
 8001834:	20001d54 	.word	0x20001d54
 8001838:	080084c8 	.word	0x080084c8
 800183c:	20001504 	.word	0x20001504
 8001840:	20001500 	.word	0x20001500
 8001844:	080084e4 	.word	0x080084e4
 8001848:	200014b8 	.word	0x200014b8
 800184c:	200000b8 	.word	0x200000b8
 8001850:	20000004 	.word	0x20000004
 8001854:	20000008 	.word	0x20000008
 8001858:	200000c0 	.word	0x200000c0
 800185c:	2000000c 	.word	0x2000000c
 8001860:	08008500 	.word	0x08008500
 8001864:	20001d58 	.word	0x20001d58
 8001868:	20001d04 	.word	0x20001d04
 800186c:	20000010 	.word	0x20000010
 8001870:	08008518 	.word	0x08008518
 8001874:	200000bc 	.word	0x200000bc

08001878 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b094      	sub	sp, #80	; 0x50
 800187c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800187e:	f107 0320 	add.w	r3, r7, #32
 8001882:	2230      	movs	r2, #48	; 0x30
 8001884:	2100      	movs	r1, #0
 8001886:	4618      	mov	r0, r3
 8001888:	f006 f9b4 	bl	8007bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	605a      	str	r2, [r3, #4]
 8001896:	609a      	str	r2, [r3, #8]
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800189c:	2300      	movs	r3, #0
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	4b27      	ldr	r3, [pc, #156]	; (8001940 <SystemClock_Config+0xc8>)
 80018a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a4:	4a26      	ldr	r2, [pc, #152]	; (8001940 <SystemClock_Config+0xc8>)
 80018a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018aa:	6413      	str	r3, [r2, #64]	; 0x40
 80018ac:	4b24      	ldr	r3, [pc, #144]	; (8001940 <SystemClock_Config+0xc8>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018b4:	60bb      	str	r3, [r7, #8]
 80018b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018b8:	2300      	movs	r3, #0
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	4b21      	ldr	r3, [pc, #132]	; (8001944 <SystemClock_Config+0xcc>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a20      	ldr	r2, [pc, #128]	; (8001944 <SystemClock_Config+0xcc>)
 80018c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	4b1e      	ldr	r3, [pc, #120]	; (8001944 <SystemClock_Config+0xcc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018d0:	607b      	str	r3, [r7, #4]
 80018d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018d4:	2302      	movs	r3, #2
 80018d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018d8:	2301      	movs	r3, #1
 80018da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018dc:	2310      	movs	r3, #16
 80018de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018e0:	2302      	movs	r3, #2
 80018e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018e4:	2300      	movs	r3, #0
 80018e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018e8:	2308      	movs	r3, #8
 80018ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80018ec:	2354      	movs	r3, #84	; 0x54
 80018ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018f0:	2302      	movs	r3, #2
 80018f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80018f4:	2304      	movs	r3, #4
 80018f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018f8:	f107 0320 	add.w	r3, r7, #32
 80018fc:	4618      	mov	r0, r3
 80018fe:	f000 fe6b 	bl	80025d8 <HAL_RCC_OscConfig>
 8001902:	4603      	mov	r3, r0
 8001904:	2b00      	cmp	r3, #0
 8001906:	d001      	beq.n	800190c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001908:	f000 f960 	bl	8001bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800190c:	230f      	movs	r3, #15
 800190e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001910:	2302      	movs	r3, #2
 8001912:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001918:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800191c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800191e:	2300      	movs	r3, #0
 8001920:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	2102      	movs	r1, #2
 8001928:	4618      	mov	r0, r3
 800192a:	f001 f8cd 	bl	8002ac8 <HAL_RCC_ClockConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001934:	f000 f94a 	bl	8001bcc <Error_Handler>
  }
}
 8001938:	bf00      	nop
 800193a:	3750      	adds	r7, #80	; 0x50
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	40023800 	.word	0x40023800
 8001944:	40007000 	.word	0x40007000

08001948 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800194c:	4b17      	ldr	r3, [pc, #92]	; (80019ac <MX_SPI2_Init+0x64>)
 800194e:	4a18      	ldr	r2, [pc, #96]	; (80019b0 <MX_SPI2_Init+0x68>)
 8001950:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_SPI2_Init+0x64>)
 8001954:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001958:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_SPI2_Init+0x64>)
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_SPI2_Init+0x64>)
 8001962:	2200      	movs	r2, #0
 8001964:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_SPI2_Init+0x64>)
 8001968:	2200      	movs	r2, #0
 800196a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800196c:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_SPI2_Init+0x64>)
 800196e:	2200      	movs	r2, #0
 8001970:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001972:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <MX_SPI2_Init+0x64>)
 8001974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001978:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_SPI2_Init+0x64>)
 800197c:	2200      	movs	r2, #0
 800197e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_SPI2_Init+0x64>)
 8001982:	2200      	movs	r2, #0
 8001984:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_SPI2_Init+0x64>)
 8001988:	2200      	movs	r2, #0
 800198a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_SPI2_Init+0x64>)
 800198e:	2200      	movs	r2, #0
 8001990:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_SPI2_Init+0x64>)
 8001994:	220a      	movs	r2, #10
 8001996:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_SPI2_Init+0x64>)
 800199a:	f001 fa91 	bl	8002ec0 <HAL_SPI_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80019a4:	f000 f912 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	2000030c 	.word	0x2000030c
 80019b0:	40003800 	.word	0x40003800

080019b4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019ba:	f107 0308 	add.w	r3, r7, #8
 80019be:	2200      	movs	r2, #0
 80019c0:	601a      	str	r2, [r3, #0]
 80019c2:	605a      	str	r2, [r3, #4]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c8:	463b      	mov	r3, r7
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019d0:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <MX_TIM3_Init+0x98>)
 80019d4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 419;
 80019d6:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019d8:	f240 12a3 	movw	r2, #419	; 0x1a3
 80019dc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019de:	4b1a      	ldr	r3, [pc, #104]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 80019e4:	4b18      	ldr	r3, [pc, #96]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019e6:	2201      	movs	r2, #1
 80019e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b15      	ldr	r3, [pc, #84]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019f6:	4814      	ldr	r0, [pc, #80]	; (8001a48 <MX_TIM3_Init+0x94>)
 80019f8:	f001 fea2 	bl	8003740 <HAL_TIM_Base_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a02:	f000 f8e3 	bl	8001bcc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a0c:	f107 0308 	add.w	r3, r7, #8
 8001a10:	4619      	mov	r1, r3
 8001a12:	480d      	ldr	r0, [pc, #52]	; (8001a48 <MX_TIM3_Init+0x94>)
 8001a14:	f002 f87d 	bl	8003b12 <HAL_TIM_ConfigClockSource>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a1e:	f000 f8d5 	bl	8001bcc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4806      	ldr	r0, [pc, #24]	; (8001a48 <MX_TIM3_Init+0x94>)
 8001a30:	f002 fa78 	bl	8003f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a3a:	f000 f8c7 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a3e:	bf00      	nop
 8001a40:	3718      	adds	r7, #24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200014b8 	.word	0x200014b8
 8001a4c:	40000400 	.word	0x40000400

08001a50 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <MX_USART2_UART_Init+0x50>)
 8001a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6e:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a74:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a76:	220c      	movs	r2, #12
 8001a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a80:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a86:	4805      	ldr	r0, [pc, #20]	; (8001a9c <MX_USART2_UART_Init+0x4c>)
 8001a88:	f002 face 	bl	8004028 <HAL_UART_Init>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a92:	f000 f89b 	bl	8001bcc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20001d10 	.word	0x20001d10
 8001aa0:	40004400 	.word	0x40004400

08001aa4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b08a      	sub	sp, #40	; 0x28
 8001aa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aaa:	f107 0314 	add.w	r3, r7, #20
 8001aae:	2200      	movs	r2, #0
 8001ab0:	601a      	str	r2, [r3, #0]
 8001ab2:	605a      	str	r2, [r3, #4]
 8001ab4:	609a      	str	r2, [r3, #8]
 8001ab6:	60da      	str	r2, [r3, #12]
 8001ab8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b37      	ldr	r3, [pc, #220]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a36      	ldr	r2, [pc, #216]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b34      	ldr	r3, [pc, #208]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	60fb      	str	r3, [r7, #12]
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	4a2f      	ldr	r2, [pc, #188]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a28      	ldr	r2, [pc, #160]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001afc:	f043 0301 	orr.w	r3, r3, #1
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b26      	ldr	r3, [pc, #152]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a21      	ldr	r2, [pc, #132]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <MX_GPIO_Init+0xf8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	607b      	str	r3, [r7, #4]
 8001b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2120      	movs	r1, #32
 8001b2e:	481c      	ldr	r0, [pc, #112]	; (8001ba0 <MX_GPIO_Init+0xfc>)
 8001b30:	f000 fd38 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2101      	movs	r1, #1
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b3a:	f000 fd33 	bl	80025a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b44:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001b48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b4e:	f107 0314 	add.w	r3, r7, #20
 8001b52:	4619      	mov	r1, r3
 8001b54:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <MX_GPIO_Init+0x104>)
 8001b56:	f000 fba1 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001b5a:	2320      	movs	r3, #32
 8001b5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b66:	2300      	movs	r3, #0
 8001b68:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001b6a:	f107 0314 	add.w	r3, r7, #20
 8001b6e:	4619      	mov	r1, r3
 8001b70:	480b      	ldr	r0, [pc, #44]	; (8001ba0 <MX_GPIO_Init+0xfc>)
 8001b72:	f000 fb93 	bl	800229c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001b76:	2301      	movs	r3, #1
 8001b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b82:	2300      	movs	r3, #0
 8001b84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001b86:	f107 0314 	add.w	r3, r7, #20
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4805      	ldr	r0, [pc, #20]	; (8001ba4 <MX_GPIO_Init+0x100>)
 8001b8e:	f000 fb85 	bl	800229c <HAL_GPIO_Init>

}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40020800 	.word	0x40020800

08001bac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	Timer_flag=1;
 8001bb4:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
}
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	200000b8 	.word	0x200000b8

08001bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bd0:	b672      	cpsid	i
}
 8001bd2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <Error_Handler+0x8>
	...

08001bd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	607b      	str	r3, [r7, #4]
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_MspInit+0x4c>)
 8001be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_MspInit+0x4c>)
 8001be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bec:	6453      	str	r3, [r2, #68]	; 0x44
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_MspInit+0x4c>)
 8001bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
 8001bfe:	4b09      	ldr	r3, [pc, #36]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	4a08      	ldr	r2, [pc, #32]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c08:	6413      	str	r3, [r2, #64]	; 0x40
 8001c0a:	4b06      	ldr	r3, [pc, #24]	; (8001c24 <HAL_MspInit+0x4c>)
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c12:	603b      	str	r3, [r7, #0]
 8001c14:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c16:	2007      	movs	r0, #7
 8001c18:	f000 fafe 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	3708      	adds	r7, #8
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800

08001c28 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	; 0x28
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c30:	f107 0314 	add.w	r3, r7, #20
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
 8001c3c:	60da      	str	r2, [r3, #12]
 8001c3e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4a28      	ldr	r2, [pc, #160]	; (8001ce8 <HAL_SPI_MspInit+0xc0>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d14a      	bne.n	8001ce0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4a26      	ldr	r2, [pc, #152]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c58:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	4a1f      	ldr	r2, [pc, #124]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c70:	f043 0304 	orr.w	r3, r3, #4
 8001c74:	6313      	str	r3, [r2, #48]	; 0x30
 8001c76:	4b1d      	ldr	r3, [pc, #116]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8a:	4a18      	ldr	r2, [pc, #96]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6313      	str	r3, [r2, #48]	; 0x30
 8001c92:	4b16      	ldr	r3, [pc, #88]	; (8001cec <HAL_SPI_MspInit+0xc4>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	60bb      	str	r3, [r7, #8]
 8001c9c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	480d      	ldr	r0, [pc, #52]	; (8001cf0 <HAL_SPI_MspInit+0xc8>)
 8001cba:	f000 faef 	bl	800229c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001cbe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd0:	2305      	movs	r3, #5
 8001cd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd4:	f107 0314 	add.w	r3, r7, #20
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4806      	ldr	r0, [pc, #24]	; (8001cf4 <HAL_SPI_MspInit+0xcc>)
 8001cdc:	f000 fade 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ce0:	bf00      	nop
 8001ce2:	3728      	adds	r7, #40	; 0x28
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	40003800 	.word	0x40003800
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	40020800 	.word	0x40020800
 8001cf4:	40020400 	.word	0x40020400

08001cf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b084      	sub	sp, #16
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_TIM_Base_MspInit+0x48>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d115      	bne.n	8001d36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_TIM_Base_MspInit+0x4c>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	4a0c      	ldr	r2, [pc, #48]	; (8001d44 <HAL_TIM_Base_MspInit+0x4c>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6413      	str	r3, [r2, #64]	; 0x40
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <HAL_TIM_Base_MspInit+0x4c>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	201d      	movs	r0, #29
 8001d2c:	f000 fa7f 	bl	800222e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d30:	201d      	movs	r0, #29
 8001d32:	f000 fa98 	bl	8002266 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001d36:	bf00      	nop
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40000400 	.word	0x40000400
 8001d44:	40023800 	.word	0x40023800

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	; 0x28
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0314 	add.w	r3, r7, #20
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a19      	ldr	r2, [pc, #100]	; (8001dcc <HAL_UART_MspInit+0x84>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d12b      	bne.n	8001dc2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	613b      	str	r3, [r7, #16]
 8001d6e:	4b18      	ldr	r3, [pc, #96]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a17      	ldr	r2, [pc, #92]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d82:	613b      	str	r3, [r7, #16]
 8001d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	4b11      	ldr	r3, [pc, #68]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6313      	str	r3, [r2, #48]	; 0x30
 8001d96:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <HAL_UART_MspInit+0x88>)
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	60fb      	str	r3, [r7, #12]
 8001da0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001da2:	230c      	movs	r3, #12
 8001da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da6:	2302      	movs	r3, #2
 8001da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dae:	2303      	movs	r3, #3
 8001db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db2:	2307      	movs	r3, #7
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4805      	ldr	r0, [pc, #20]	; (8001dd4 <HAL_UART_MspInit+0x8c>)
 8001dbe:	f000 fa6d 	bl	800229c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001dc2:	bf00      	nop
 8001dc4:	3728      	adds	r7, #40	; 0x28
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40004400 	.word	0x40004400
 8001dd0:	40023800 	.word	0x40023800
 8001dd4:	40020000 	.word	0x40020000

08001dd8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <SDTimer_Handler+0x40>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d006      	beq.n	8001df4 <SDTimer_Handler+0x1c>
    Timer1--;
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <SDTimer_Handler+0x40>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3b01      	subs	r3, #1
 8001dee:	b2da      	uxtb	r2, r3
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <SDTimer_Handler+0x40>)
 8001df2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <SDTimer_Handler+0x44>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d006      	beq.n	8001e0c <SDTimer_Handler+0x34>
    Timer2--;
 8001dfe:	4b07      	ldr	r3, [pc, #28]	; (8001e1c <SDTimer_Handler+0x44>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	3b01      	subs	r3, #1
 8001e06:	b2da      	uxtb	r2, r3
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SDTimer_Handler+0x44>)
 8001e0a:	701a      	strb	r2, [r3, #0]
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	20002d89 	.word	0x20002d89
 8001e1c:	20002d88 	.word	0x20002d88

08001e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e20:	b480      	push	{r7}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e24:	e7fe      	b.n	8001e24 <NMI_Handler+0x4>

08001e26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e26:	b480      	push	{r7}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2a:	e7fe      	b.n	8001e2a <HardFault_Handler+0x4>

08001e2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e30:	e7fe      	b.n	8001e30 <MemManage_Handler+0x4>

08001e32 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e32:	b480      	push	{r7}
 8001e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <BusFault_Handler+0x4>

08001e38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e3c:	e7fe      	b.n	8001e3c <UsageFault_Handler+0x4>

08001e3e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <SysTick_Handler+0x30>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	3301      	adds	r3, #1
 8001e74:	b2da      	uxtb	r2, r3
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <SysTick_Handler+0x30>)
 8001e78:	701a      	strb	r2, [r3, #0]
			  if(FatFsCnt >= 10)
 8001e7a:	4b07      	ldr	r3, [pc, #28]	; (8001e98 <SysTick_Handler+0x30>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b09      	cmp	r3, #9
 8001e82:	d904      	bls.n	8001e8e <SysTick_Handler+0x26>
			  {
			    FatFsCnt = 0;
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <SysTick_Handler+0x30>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	701a      	strb	r2, [r3, #0]
			    SDTimer_Handler();
 8001e8a:	f7ff ffa5 	bl	8001dd8 <SDTimer_Handler>
			  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e8e:	f000 f8d3 	bl	8002038 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	200000c4 	.word	0x200000c4

08001e9c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ea0:	4802      	ldr	r0, [pc, #8]	; (8001eac <TIM3_IRQHandler+0x10>)
 8001ea2:	f001 fd2e 	bl	8003902 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	200014b8 	.word	0x200014b8

08001eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001eb8:	4a14      	ldr	r2, [pc, #80]	; (8001f0c <_sbrk+0x5c>)
 8001eba:	4b15      	ldr	r3, [pc, #84]	; (8001f10 <_sbrk+0x60>)
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ec4:	4b13      	ldr	r3, [pc, #76]	; (8001f14 <_sbrk+0x64>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d102      	bne.n	8001ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ecc:	4b11      	ldr	r3, [pc, #68]	; (8001f14 <_sbrk+0x64>)
 8001ece:	4a12      	ldr	r2, [pc, #72]	; (8001f18 <_sbrk+0x68>)
 8001ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ed2:	4b10      	ldr	r3, [pc, #64]	; (8001f14 <_sbrk+0x64>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	4413      	add	r3, r2
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ee0:	f005 fe5e 	bl	8007ba0 <__errno>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	220c      	movs	r2, #12
 8001ee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	e009      	b.n	8001f04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ef0:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <_sbrk+0x64>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ef6:	4b07      	ldr	r3, [pc, #28]	; (8001f14 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a05      	ldr	r2, [pc, #20]	; (8001f14 <_sbrk+0x64>)
 8001f00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f02:	68fb      	ldr	r3, [r7, #12]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3718      	adds	r7, #24
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20020000 	.word	0x20020000
 8001f10:	00000400 	.word	0x00000400
 8001f14:	200000c8 	.word	0x200000c8
 8001f18:	20004e10 	.word	0x20004e10

08001f1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f20:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <SystemInit+0x20>)
 8001f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <SystemInit+0x20>)
 8001f28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f30:	bf00      	nop
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	e000ed00 	.word	0xe000ed00

08001f40 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f78 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f44:	480d      	ldr	r0, [pc, #52]	; (8001f7c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f46:	490e      	ldr	r1, [pc, #56]	; (8001f80 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f48:	4a0e      	ldr	r2, [pc, #56]	; (8001f84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f4c:	e002      	b.n	8001f54 <LoopCopyDataInit>

08001f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f52:	3304      	adds	r3, #4

08001f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f58:	d3f9      	bcc.n	8001f4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f5a:	4a0b      	ldr	r2, [pc, #44]	; (8001f88 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f5c:	4c0b      	ldr	r4, [pc, #44]	; (8001f8c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f60:	e001      	b.n	8001f66 <LoopFillZerobss>

08001f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f64:	3204      	adds	r2, #4

08001f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f68:	d3fb      	bcc.n	8001f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f6a:	f7ff ffd7 	bl	8001f1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f6e:	f005 fe1d 	bl	8007bac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f72:	f7ff fb5f 	bl	8001634 <main>
  bx  lr    
 8001f76:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f80:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001f84:	08008a28 	.word	0x08008a28
  ldr r2, =_sbss
 8001f88:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8001f8c:	20004e10 	.word	0x20004e10

08001f90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f90:	e7fe      	b.n	8001f90 <ADC_IRQHandler>
	...

08001f94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f98:	4b0e      	ldr	r3, [pc, #56]	; (8001fd4 <HAL_Init+0x40>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a0d      	ldr	r2, [pc, #52]	; (8001fd4 <HAL_Init+0x40>)
 8001f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fa4:	4b0b      	ldr	r3, [pc, #44]	; (8001fd4 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <HAL_Init+0x40>)
 8001faa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fb0:	4b08      	ldr	r3, [pc, #32]	; (8001fd4 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a07      	ldr	r2, [pc, #28]	; (8001fd4 <HAL_Init+0x40>)
 8001fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fbc:	2003      	movs	r0, #3
 8001fbe:	f000 f92b 	bl	8002218 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fc2:	2000      	movs	r0, #0
 8001fc4:	f000 f808 	bl	8001fd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fc8:	f7ff fe06 	bl	8001bd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fcc:	2300      	movs	r3, #0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40023c00 	.word	0x40023c00

08001fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fe0:	4b12      	ldr	r3, [pc, #72]	; (800202c <HAL_InitTick+0x54>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_InitTick+0x58>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f943 	bl	8002282 <HAL_SYSTICK_Config>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e00e      	b.n	8002024 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2b0f      	cmp	r3, #15
 800200a:	d80a      	bhi.n	8002022 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800200c:	2200      	movs	r2, #0
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f000 f90b 	bl	800222e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_InitTick+0x5c>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	e000      	b.n	8002024 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
}
 8002024:	4618      	mov	r0, r3
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20000014 	.word	0x20000014
 8002030:	2000001c 	.word	0x2000001c
 8002034:	20000018 	.word	0x20000018

08002038 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002038:	b480      	push	{r7}
 800203a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_IncTick+0x20>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	461a      	mov	r2, r3
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_IncTick+0x24>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4413      	add	r3, r2
 8002048:	4a04      	ldr	r2, [pc, #16]	; (800205c <HAL_IncTick+0x24>)
 800204a:	6013      	str	r3, [r2, #0]
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	2000001c 	.word	0x2000001c
 800205c:	20002d8c 	.word	0x20002d8c

08002060 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return uwTick;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_GetTick+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20002d8c 	.word	0x20002d8c

08002078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f003 0307 	and.w	r3, r3, #7
 8002086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002088:	4b0c      	ldr	r3, [pc, #48]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800208e:	68ba      	ldr	r2, [r7, #8]
 8002090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002094:	4013      	ands	r3, r2
 8002096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <__NVIC_SetPriorityGrouping+0x44>)
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	60d3      	str	r3, [r2, #12]
}
 80020b0:	bf00      	nop
 80020b2:	3714      	adds	r7, #20
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	e000ed00 	.word	0xe000ed00

080020c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020c0:	b480      	push	{r7}
 80020c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020c4:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <__NVIC_GetPriorityGrouping+0x18>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	0a1b      	lsrs	r3, r3, #8
 80020ca:	f003 0307 	and.w	r3, r3, #7
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	4603      	mov	r3, r0
 80020e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	db0b      	blt.n	8002106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ee:	79fb      	ldrb	r3, [r7, #7]
 80020f0:	f003 021f 	and.w	r2, r3, #31
 80020f4:	4907      	ldr	r1, [pc, #28]	; (8002114 <__NVIC_EnableIRQ+0x38>)
 80020f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020fa:	095b      	lsrs	r3, r3, #5
 80020fc:	2001      	movs	r0, #1
 80020fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002106:	bf00      	nop
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
 8002112:	bf00      	nop
 8002114:	e000e100 	.word	0xe000e100

08002118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	6039      	str	r1, [r7, #0]
 8002122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002128:	2b00      	cmp	r3, #0
 800212a:	db0a      	blt.n	8002142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	b2da      	uxtb	r2, r3
 8002130:	490c      	ldr	r1, [pc, #48]	; (8002164 <__NVIC_SetPriority+0x4c>)
 8002132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002136:	0112      	lsls	r2, r2, #4
 8002138:	b2d2      	uxtb	r2, r2
 800213a:	440b      	add	r3, r1
 800213c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002140:	e00a      	b.n	8002158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	b2da      	uxtb	r2, r3
 8002146:	4908      	ldr	r1, [pc, #32]	; (8002168 <__NVIC_SetPriority+0x50>)
 8002148:	79fb      	ldrb	r3, [r7, #7]
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	3b04      	subs	r3, #4
 8002150:	0112      	lsls	r2, r2, #4
 8002152:	b2d2      	uxtb	r2, r2
 8002154:	440b      	add	r3, r1
 8002156:	761a      	strb	r2, [r3, #24]
}
 8002158:	bf00      	nop
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	e000e100 	.word	0xe000e100
 8002168:	e000ed00 	.word	0xe000ed00

0800216c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800216c:	b480      	push	{r7}
 800216e:	b089      	sub	sp, #36	; 0x24
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f003 0307 	and.w	r3, r3, #7
 800217e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	f1c3 0307 	rsb	r3, r3, #7
 8002186:	2b04      	cmp	r3, #4
 8002188:	bf28      	it	cs
 800218a:	2304      	movcs	r3, #4
 800218c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	3304      	adds	r3, #4
 8002192:	2b06      	cmp	r3, #6
 8002194:	d902      	bls.n	800219c <NVIC_EncodePriority+0x30>
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3b03      	subs	r3, #3
 800219a:	e000      	b.n	800219e <NVIC_EncodePriority+0x32>
 800219c:	2300      	movs	r3, #0
 800219e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021a0:	f04f 32ff 	mov.w	r2, #4294967295
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	fa02 f303 	lsl.w	r3, r2, r3
 80021aa:	43da      	mvns	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021b4:	f04f 31ff 	mov.w	r1, #4294967295
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fa01 f303 	lsl.w	r3, r1, r3
 80021be:	43d9      	mvns	r1, r3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021c4:	4313      	orrs	r3, r2
         );
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3724      	adds	r7, #36	; 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	3b01      	subs	r3, #1
 80021e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021e4:	d301      	bcc.n	80021ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021e6:	2301      	movs	r3, #1
 80021e8:	e00f      	b.n	800220a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021ea:	4a0a      	ldr	r2, [pc, #40]	; (8002214 <SysTick_Config+0x40>)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3b01      	subs	r3, #1
 80021f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021f2:	210f      	movs	r1, #15
 80021f4:	f04f 30ff 	mov.w	r0, #4294967295
 80021f8:	f7ff ff8e 	bl	8002118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <SysTick_Config+0x40>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002202:	4b04      	ldr	r3, [pc, #16]	; (8002214 <SysTick_Config+0x40>)
 8002204:	2207      	movs	r2, #7
 8002206:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	e000e010 	.word	0xe000e010

08002218 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff ff29 	bl	8002078 <__NVIC_SetPriorityGrouping>
}
 8002226:	bf00      	nop
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800222e:	b580      	push	{r7, lr}
 8002230:	b086      	sub	sp, #24
 8002232:	af00      	add	r7, sp, #0
 8002234:	4603      	mov	r3, r0
 8002236:	60b9      	str	r1, [r7, #8]
 8002238:	607a      	str	r2, [r7, #4]
 800223a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002240:	f7ff ff3e 	bl	80020c0 <__NVIC_GetPriorityGrouping>
 8002244:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	68b9      	ldr	r1, [r7, #8]
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f7ff ff8e 	bl	800216c <NVIC_EncodePriority>
 8002250:	4602      	mov	r2, r0
 8002252:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002256:	4611      	mov	r1, r2
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff5d 	bl	8002118 <__NVIC_SetPriority>
}
 800225e:	bf00      	nop
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002266:	b580      	push	{r7, lr}
 8002268:	b082      	sub	sp, #8
 800226a:	af00      	add	r7, sp, #0
 800226c:	4603      	mov	r3, r0
 800226e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff ff31 	bl	80020dc <__NVIC_EnableIRQ>
}
 800227a:	bf00      	nop
 800227c:	3708      	adds	r7, #8
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002282:	b580      	push	{r7, lr}
 8002284:	b082      	sub	sp, #8
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f7ff ffa2 	bl	80021d4 <SysTick_Config>
 8002290:	4603      	mov	r3, r0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
	...

0800229c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800229c:	b480      	push	{r7}
 800229e:	b089      	sub	sp, #36	; 0x24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
 80022a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022aa:	2300      	movs	r3, #0
 80022ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022ae:	2300      	movs	r3, #0
 80022b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022b2:	2300      	movs	r3, #0
 80022b4:	61fb      	str	r3, [r7, #28]
 80022b6:	e159      	b.n	800256c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022b8:	2201      	movs	r2, #1
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022cc:	693a      	ldr	r2, [r7, #16]
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	429a      	cmp	r2, r3
 80022d2:	f040 8148 	bne.w	8002566 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f003 0303 	and.w	r3, r3, #3
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d005      	beq.n	80022ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d130      	bne.n	8002350 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	2203      	movs	r2, #3
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43db      	mvns	r3, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4013      	ands	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002324:	2201      	movs	r2, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0201 	and.w	r2, r3, #1
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	fa02 f303 	lsl.w	r3, r2, r3
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b03      	cmp	r3, #3
 800235a:	d017      	beq.n	800238c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	4013      	ands	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689a      	ldr	r2, [r3, #8]
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	2b02      	cmp	r3, #2
 8002396:	d123      	bne.n	80023e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002398:	69fb      	ldr	r3, [r7, #28]
 800239a:	08da      	lsrs	r2, r3, #3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3208      	adds	r2, #8
 80023a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	f003 0307 	and.w	r3, r3, #7
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	220f      	movs	r2, #15
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	691a      	ldr	r2, [r3, #16]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	f003 0307 	and.w	r3, r3, #7
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	69ba      	ldr	r2, [r7, #24]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	08da      	lsrs	r2, r3, #3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	3208      	adds	r2, #8
 80023da:	69b9      	ldr	r1, [r7, #24]
 80023dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	2203      	movs	r2, #3
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	43db      	mvns	r3, r3
 80023f2:	69ba      	ldr	r2, [r7, #24]
 80023f4:	4013      	ands	r3, r2
 80023f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	69fb      	ldr	r3, [r7, #28]
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 80a2 	beq.w	8002566 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	60fb      	str	r3, [r7, #12]
 8002426:	4b57      	ldr	r3, [pc, #348]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a56      	ldr	r2, [pc, #344]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <HAL_GPIO_Init+0x2e8>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800243e:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_GPIO_Init+0x2ec>)
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a49      	ldr	r2, [pc, #292]	; (800258c <HAL_GPIO_Init+0x2f0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d019      	beq.n	800249e <HAL_GPIO_Init+0x202>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a48      	ldr	r2, [pc, #288]	; (8002590 <HAL_GPIO_Init+0x2f4>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d013      	beq.n	800249a <HAL_GPIO_Init+0x1fe>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a47      	ldr	r2, [pc, #284]	; (8002594 <HAL_GPIO_Init+0x2f8>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d00d      	beq.n	8002496 <HAL_GPIO_Init+0x1fa>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a46      	ldr	r2, [pc, #280]	; (8002598 <HAL_GPIO_Init+0x2fc>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d007      	beq.n	8002492 <HAL_GPIO_Init+0x1f6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a45      	ldr	r2, [pc, #276]	; (800259c <HAL_GPIO_Init+0x300>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d101      	bne.n	800248e <HAL_GPIO_Init+0x1f2>
 800248a:	2304      	movs	r3, #4
 800248c:	e008      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800248e:	2307      	movs	r3, #7
 8002490:	e006      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002492:	2303      	movs	r3, #3
 8002494:	e004      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 8002496:	2302      	movs	r3, #2
 8002498:	e002      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249a:	2301      	movs	r3, #1
 800249c:	e000      	b.n	80024a0 <HAL_GPIO_Init+0x204>
 800249e:	2300      	movs	r3, #0
 80024a0:	69fa      	ldr	r2, [r7, #28]
 80024a2:	f002 0203 	and.w	r2, r2, #3
 80024a6:	0092      	lsls	r2, r2, #2
 80024a8:	4093      	lsls	r3, r2
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b0:	4935      	ldr	r1, [pc, #212]	; (8002588 <HAL_GPIO_Init+0x2ec>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024be:	4b38      	ldr	r3, [pc, #224]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d003      	beq.n	80024e2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024e2:	4a2f      	ldr	r2, [pc, #188]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024e8:	4b2d      	ldr	r3, [pc, #180]	; (80025a0 <HAL_GPIO_Init+0x304>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4013      	ands	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d003      	beq.n	800250c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	4313      	orrs	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800250c:	4a24      	ldr	r2, [pc, #144]	; (80025a0 <HAL_GPIO_Init+0x304>)
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002512:	4b23      	ldr	r3, [pc, #140]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	43db      	mvns	r3, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4013      	ands	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	693b      	ldr	r3, [r7, #16]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002536:	4a1a      	ldr	r2, [pc, #104]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800253c:	4b18      	ldr	r3, [pc, #96]	; (80025a0 <HAL_GPIO_Init+0x304>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	43db      	mvns	r3, r3
 8002546:	69ba      	ldr	r2, [r7, #24]
 8002548:	4013      	ands	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d003      	beq.n	8002560 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_GPIO_Init+0x304>)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	3301      	adds	r3, #1
 800256a:	61fb      	str	r3, [r7, #28]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	2b0f      	cmp	r3, #15
 8002570:	f67f aea2 	bls.w	80022b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002574:	bf00      	nop
 8002576:	bf00      	nop
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40013800 	.word	0x40013800
 800258c:	40020000 	.word	0x40020000
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40013c00 	.word	0x40013c00

080025a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	807b      	strh	r3, [r7, #2]
 80025b0:	4613      	mov	r3, r2
 80025b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b4:	787b      	ldrb	r3, [r7, #1]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d003      	beq.n	80025c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ba:	887a      	ldrh	r2, [r7, #2]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025c0:	e003      	b.n	80025ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025c2:	887b      	ldrh	r3, [r7, #2]
 80025c4:	041a      	lsls	r2, r3, #16
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	619a      	str	r2, [r3, #24]
}
 80025ca:	bf00      	nop
 80025cc:	370c      	adds	r7, #12
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
	...

080025d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e264      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0301 	and.w	r3, r3, #1
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d075      	beq.n	80026e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025f6:	4ba3      	ldr	r3, [pc, #652]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b04      	cmp	r3, #4
 8002600:	d00c      	beq.n	800261c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4ba0      	ldr	r3, [pc, #640]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260a:	2b08      	cmp	r3, #8
 800260c:	d112      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800260e:	4b9d      	ldr	r3, [pc, #628]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800261a:	d10b      	bne.n	8002634 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	4b99      	ldr	r3, [pc, #612]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05b      	beq.n	80026e0 <HAL_RCC_OscConfig+0x108>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d157      	bne.n	80026e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e23f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263c:	d106      	bne.n	800264c <HAL_RCC_OscConfig+0x74>
 800263e:	4b91      	ldr	r3, [pc, #580]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a90      	ldr	r2, [pc, #576]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	e01d      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002654:	d10c      	bne.n	8002670 <HAL_RCC_OscConfig+0x98>
 8002656:	4b8b      	ldr	r3, [pc, #556]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800265c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	4b88      	ldr	r3, [pc, #544]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a87      	ldr	r2, [pc, #540]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266c:	6013      	str	r3, [r2, #0]
 800266e:	e00b      	b.n	8002688 <HAL_RCC_OscConfig+0xb0>
 8002670:	4b84      	ldr	r3, [pc, #528]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a83      	ldr	r2, [pc, #524]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800267a:	6013      	str	r3, [r2, #0]
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a80      	ldr	r2, [pc, #512]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002686:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002690:	f7ff fce6 	bl	8002060 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	e008      	b.n	80026aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002698:	f7ff fce2 	bl	8002060 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b64      	cmp	r3, #100	; 0x64
 80026a4:	d901      	bls.n	80026aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e204      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f0      	beq.n	8002698 <HAL_RCC_OscConfig+0xc0>
 80026b6:	e014      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7ff fcd2 	bl	8002060 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026c0:	f7ff fcce 	bl	8002060 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b64      	cmp	r3, #100	; 0x64
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e1f0      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d2:	4b6c      	ldr	r3, [pc, #432]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0xe8>
 80026de:	e000      	b.n	80026e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0302 	and.w	r3, r3, #2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d063      	beq.n	80027b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d00b      	beq.n	8002712 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b62      	ldr	r3, [pc, #392]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002702:	2b08      	cmp	r3, #8
 8002704:	d11c      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002706:	4b5f      	ldr	r3, [pc, #380]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d116      	bne.n	8002740 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002712:	4b5c      	ldr	r3, [pc, #368]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68db      	ldr	r3, [r3, #12]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d001      	beq.n	800272a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e1c4      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272a:	4b56      	ldr	r3, [pc, #344]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4952      	ldr	r1, [pc, #328]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800273a:	4313      	orrs	r3, r2
 800273c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800273e:	e03a      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d020      	beq.n	800278a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002748:	4b4f      	ldr	r3, [pc, #316]	; (8002888 <HAL_RCC_OscConfig+0x2b0>)
 800274a:	2201      	movs	r2, #1
 800274c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7ff fc87 	bl	8002060 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002754:	e008      	b.n	8002768 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002756:	f7ff fc83 	bl	8002060 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d901      	bls.n	8002768 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e1a5      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002768:	4b46      	ldr	r3, [pc, #280]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0f0      	beq.n	8002756 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002774:	4b43      	ldr	r3, [pc, #268]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4940      	ldr	r1, [pc, #256]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002784:	4313      	orrs	r3, r2
 8002786:	600b      	str	r3, [r1, #0]
 8002788:	e015      	b.n	80027b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800278a:	4b3f      	ldr	r3, [pc, #252]	; (8002888 <HAL_RCC_OscConfig+0x2b0>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7ff fc66 	bl	8002060 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002798:	f7ff fc62 	bl	8002060 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e184      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027aa:	4b36      	ldr	r3, [pc, #216]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d1f0      	bne.n	8002798 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d030      	beq.n	8002824 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d016      	beq.n	80027f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027ca:	4b30      	ldr	r3, [pc, #192]	; (800288c <HAL_RCC_OscConfig+0x2b4>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d0:	f7ff fc46 	bl	8002060 <HAL_GetTick>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d6:	e008      	b.n	80027ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027d8:	f7ff fc42 	bl	8002060 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e164      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ea:	4b26      	ldr	r3, [pc, #152]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 80027ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x200>
 80027f6:	e015      	b.n	8002824 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027f8:	4b24      	ldr	r3, [pc, #144]	; (800288c <HAL_RCC_OscConfig+0x2b4>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027fe:	f7ff fc2f 	bl	8002060 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002806:	f7ff fc2b 	bl	8002060 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e14d      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b1a      	ldr	r3, [pc, #104]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80a0 	beq.w	8002972 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b13      	ldr	r3, [pc, #76]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b0c      	ldr	r3, [pc, #48]	; (8002884 <HAL_RCC_OscConfig+0x2ac>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d121      	bne.n	80028b2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b08      	ldr	r3, [pc, #32]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <HAL_RCC_OscConfig+0x2b8>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7ff fbf1 	bl	8002060 <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e011      	b.n	80028a6 <HAL_RCC_OscConfig+0x2ce>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
 8002888:	42470000 	.word	0x42470000
 800288c:	42470e80 	.word	0x42470e80
 8002890:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002894:	f7ff fbe4 	bl	8002060 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e106      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a6:	4b85      	ldr	r3, [pc, #532]	; (8002abc <HAL_RCC_OscConfig+0x4e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d0f0      	beq.n	8002894 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d106      	bne.n	80028c8 <HAL_RCC_OscConfig+0x2f0>
 80028ba:	4b81      	ldr	r3, [pc, #516]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	4a80      	ldr	r2, [pc, #512]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028c0:	f043 0301 	orr.w	r3, r3, #1
 80028c4:	6713      	str	r3, [r2, #112]	; 0x70
 80028c6:	e01c      	b.n	8002902 <HAL_RCC_OscConfig+0x32a>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	2b05      	cmp	r3, #5
 80028ce:	d10c      	bne.n	80028ea <HAL_RCC_OscConfig+0x312>
 80028d0:	4b7b      	ldr	r3, [pc, #492]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d4:	4a7a      	ldr	r2, [pc, #488]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028d6:	f043 0304 	orr.w	r3, r3, #4
 80028da:	6713      	str	r3, [r2, #112]	; 0x70
 80028dc:	4b78      	ldr	r3, [pc, #480]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a77      	ldr	r2, [pc, #476]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e00b      	b.n	8002902 <HAL_RCC_OscConfig+0x32a>
 80028ea:	4b75      	ldr	r3, [pc, #468]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ee:	4a74      	ldr	r2, [pc, #464]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6713      	str	r3, [r2, #112]	; 0x70
 80028f6:	4b72      	ldr	r3, [pc, #456]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	4a71      	ldr	r2, [pc, #452]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d015      	beq.n	8002936 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290a:	f7ff fba9 	bl	8002060 <HAL_GetTick>
 800290e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002910:	e00a      	b.n	8002928 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002912:	f7ff fba5 	bl	8002060 <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002920:	4293      	cmp	r3, r2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e0c5      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002928:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 800292a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0ee      	beq.n	8002912 <HAL_RCC_OscConfig+0x33a>
 8002934:	e014      	b.n	8002960 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002936:	f7ff fb93 	bl	8002060 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800293c:	e00a      	b.n	8002954 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800293e:	f7ff fb8f 	bl	8002060 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	f241 3288 	movw	r2, #5000	; 0x1388
 800294c:	4293      	cmp	r3, r2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e0af      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002954:	4b5a      	ldr	r3, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 8002956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1ee      	bne.n	800293e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d105      	bne.n	8002972 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002966:	4b56      	ldr	r3, [pc, #344]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 8002968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296a:	4a55      	ldr	r2, [pc, #340]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 800296c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002970:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 809b 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800297c:	4b50      	ldr	r3, [pc, #320]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	f003 030c 	and.w	r3, r3, #12
 8002984:	2b08      	cmp	r3, #8
 8002986:	d05c      	beq.n	8002a42 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d141      	bne.n	8002a14 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002996:	f7ff fb63 	bl	8002060 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7ff fb5f 	bl	8002060 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e081      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1f0      	bne.n	800299e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	69da      	ldr	r2, [r3, #28]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a1b      	ldr	r3, [r3, #32]
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ca:	019b      	lsls	r3, r3, #6
 80029cc:	431a      	orrs	r2, r3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d2:	085b      	lsrs	r3, r3, #1
 80029d4:	3b01      	subs	r3, #1
 80029d6:	041b      	lsls	r3, r3, #16
 80029d8:	431a      	orrs	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	061b      	lsls	r3, r3, #24
 80029e0:	4937      	ldr	r1, [pc, #220]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e6:	4b37      	ldr	r3, [pc, #220]	; (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 80029e8:	2201      	movs	r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029ec:	f7ff fb38 	bl	8002060 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029f4:	f7ff fb34 	bl	8002060 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e056      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a06:	4b2e      	ldr	r3, [pc, #184]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d0f0      	beq.n	80029f4 <HAL_RCC_OscConfig+0x41c>
 8002a12:	e04e      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x4ec>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7ff fb21 	bl	8002060 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a22:	f7ff fb1d 	bl	8002060 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e03f      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a34:	4b22      	ldr	r3, [pc, #136]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x44a>
 8002a40:	e037      	b.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	699b      	ldr	r3, [r3, #24]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e032      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a4e:	4b1c      	ldr	r3, [pc, #112]	; (8002ac0 <HAL_RCC_OscConfig+0x4e8>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d028      	beq.n	8002aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d121      	bne.n	8002aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d11a      	bne.n	8002aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a7e:	4013      	ands	r3, r2
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a84:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d111      	bne.n	8002aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	085b      	lsrs	r3, r3, #1
 8002a96:	3b01      	subs	r3, #1
 8002a98:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa8:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aaa:	429a      	cmp	r2, r3
 8002aac:	d001      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e000      	b.n	8002ab4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ab2:	2300      	movs	r3, #0
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40007000 	.word	0x40007000
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470060 	.word	0x42470060

08002ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0cc      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b68      	ldr	r3, [pc, #416]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d90c      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b65      	ldr	r3, [pc, #404]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002af2:	4b63      	ldr	r3, [pc, #396]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 0307 	and.w	r3, r3, #7
 8002afa:	683a      	ldr	r2, [r7, #0]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d001      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0b8      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d020      	beq.n	8002b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d005      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b1c:	4b59      	ldr	r3, [pc, #356]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	4a58      	ldr	r2, [pc, #352]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0308 	and.w	r3, r3, #8
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a52      	ldr	r2, [pc, #328]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	494d      	ldr	r1, [pc, #308]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d044      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d107      	bne.n	8002b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b66:	4b47      	ldr	r3, [pc, #284]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d119      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e07f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d003      	beq.n	8002b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b82:	2b03      	cmp	r3, #3
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b3f      	ldr	r3, [pc, #252]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e06f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e067      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b37      	ldr	r3, [pc, #220]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4934      	ldr	r1, [pc, #208]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7ff fa52 	bl	8002060 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7ff fa4e 	bl	8002060 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e04f      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2b      	ldr	r3, [pc, #172]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b25      	ldr	r3, [pc, #148]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d20c      	bcs.n	8002c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b22      	ldr	r3, [pc, #136]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	b2d2      	uxtb	r2, r2
 8002bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e032      	b.n	8002c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d008      	beq.n	8002c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c1c:	4b19      	ldr	r3, [pc, #100]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	4916      	ldr	r1, [pc, #88]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0308 	and.w	r3, r3, #8
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d009      	beq.n	8002c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	490e      	ldr	r1, [pc, #56]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c4e:	f000 f821 	bl	8002c94 <HAL_RCC_GetSysClockFreq>
 8002c52:	4602      	mov	r2, r0
 8002c54:	4b0b      	ldr	r3, [pc, #44]	; (8002c84 <HAL_RCC_ClockConfig+0x1bc>)
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 030f 	and.w	r3, r3, #15
 8002c5e:	490a      	ldr	r1, [pc, #40]	; (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c60:	5ccb      	ldrb	r3, [r1, r3]
 8002c62:	fa22 f303 	lsr.w	r3, r2, r3
 8002c66:	4a09      	ldr	r2, [pc, #36]	; (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c6a:	4b09      	ldr	r3, [pc, #36]	; (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff f9b2 	bl	8001fd8 <HAL_InitTick>

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3710      	adds	r7, #16
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40023c00 	.word	0x40023c00
 8002c84:	40023800 	.word	0x40023800
 8002c88:	0800858c 	.word	0x0800858c
 8002c8c:	20000014 	.word	0x20000014
 8002c90:	20000018 	.word	0x20000018

08002c94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c94:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	607b      	str	r3, [r7, #4]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	60fb      	str	r3, [r7, #12]
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cac:	4b67      	ldr	r3, [pc, #412]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d00d      	beq.n	8002cd4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cb8:	2b08      	cmp	r3, #8
 8002cba:	f200 80bd 	bhi.w	8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d002      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x34>
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d003      	beq.n	8002cce <HAL_RCC_GetSysClockFreq+0x3a>
 8002cc6:	e0b7      	b.n	8002e38 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cc8:	4b61      	ldr	r3, [pc, #388]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002cca:	60bb      	str	r3, [r7, #8]
       break;
 8002ccc:	e0b7      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cce:	4b61      	ldr	r3, [pc, #388]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002cd0:	60bb      	str	r3, [r7, #8]
      break;
 8002cd2:	e0b4      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cd4:	4b5d      	ldr	r3, [pc, #372]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cdc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cde:	4b5b      	ldr	r3, [pc, #364]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d04d      	beq.n	8002d86 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cea:	4b58      	ldr	r3, [pc, #352]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	099b      	lsrs	r3, r3, #6
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002cfa:	f04f 0100 	mov.w	r1, #0
 8002cfe:	ea02 0800 	and.w	r8, r2, r0
 8002d02:	ea03 0901 	and.w	r9, r3, r1
 8002d06:	4640      	mov	r0, r8
 8002d08:	4649      	mov	r1, r9
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	f04f 0300 	mov.w	r3, #0
 8002d12:	014b      	lsls	r3, r1, #5
 8002d14:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d18:	0142      	lsls	r2, r0, #5
 8002d1a:	4610      	mov	r0, r2
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	ebb0 0008 	subs.w	r0, r0, r8
 8002d22:	eb61 0109 	sbc.w	r1, r1, r9
 8002d26:	f04f 0200 	mov.w	r2, #0
 8002d2a:	f04f 0300 	mov.w	r3, #0
 8002d2e:	018b      	lsls	r3, r1, #6
 8002d30:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002d34:	0182      	lsls	r2, r0, #6
 8002d36:	1a12      	subs	r2, r2, r0
 8002d38:	eb63 0301 	sbc.w	r3, r3, r1
 8002d3c:	f04f 0000 	mov.w	r0, #0
 8002d40:	f04f 0100 	mov.w	r1, #0
 8002d44:	00d9      	lsls	r1, r3, #3
 8002d46:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002d4a:	00d0      	lsls	r0, r2, #3
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	eb12 0208 	adds.w	r2, r2, r8
 8002d54:	eb43 0309 	adc.w	r3, r3, r9
 8002d58:	f04f 0000 	mov.w	r0, #0
 8002d5c:	f04f 0100 	mov.w	r1, #0
 8002d60:	0259      	lsls	r1, r3, #9
 8002d62:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002d66:	0250      	lsls	r0, r2, #9
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	461a      	mov	r2, r3
 8002d74:	f04f 0300 	mov.w	r3, #0
 8002d78:	f7fd fd90 	bl	800089c <__aeabi_uldivmod>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4613      	mov	r3, r2
 8002d82:	60fb      	str	r3, [r7, #12]
 8002d84:	e04a      	b.n	8002e1c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d86:	4b31      	ldr	r3, [pc, #196]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	099b      	lsrs	r3, r3, #6
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	ea02 0400 	and.w	r4, r2, r0
 8002d9e:	ea03 0501 	and.w	r5, r3, r1
 8002da2:	4620      	mov	r0, r4
 8002da4:	4629      	mov	r1, r5
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	014b      	lsls	r3, r1, #5
 8002db0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002db4:	0142      	lsls	r2, r0, #5
 8002db6:	4610      	mov	r0, r2
 8002db8:	4619      	mov	r1, r3
 8002dba:	1b00      	subs	r0, r0, r4
 8002dbc:	eb61 0105 	sbc.w	r1, r1, r5
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	f04f 0300 	mov.w	r3, #0
 8002dc8:	018b      	lsls	r3, r1, #6
 8002dca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002dce:	0182      	lsls	r2, r0, #6
 8002dd0:	1a12      	subs	r2, r2, r0
 8002dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd6:	f04f 0000 	mov.w	r0, #0
 8002dda:	f04f 0100 	mov.w	r1, #0
 8002dde:	00d9      	lsls	r1, r3, #3
 8002de0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002de4:	00d0      	lsls	r0, r2, #3
 8002de6:	4602      	mov	r2, r0
 8002de8:	460b      	mov	r3, r1
 8002dea:	1912      	adds	r2, r2, r4
 8002dec:	eb45 0303 	adc.w	r3, r5, r3
 8002df0:	f04f 0000 	mov.w	r0, #0
 8002df4:	f04f 0100 	mov.w	r1, #0
 8002df8:	0299      	lsls	r1, r3, #10
 8002dfa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002dfe:	0290      	lsls	r0, r2, #10
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	f04f 0300 	mov.w	r3, #0
 8002e10:	f7fd fd44 	bl	800089c <__aeabi_uldivmod>
 8002e14:	4602      	mov	r2, r0
 8002e16:	460b      	mov	r3, r1
 8002e18:	4613      	mov	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	0c1b      	lsrs	r3, r3, #16
 8002e22:	f003 0303 	and.w	r3, r3, #3
 8002e26:	3301      	adds	r3, #1
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e34:	60bb      	str	r3, [r7, #8]
      break;
 8002e36:	e002      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002e3a:	60bb      	str	r3, [r7, #8]
      break;
 8002e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	00f42400 	.word	0x00f42400
 8002e54:	007a1200 	.word	0x007a1200

08002e58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e5c:	4b03      	ldr	r3, [pc, #12]	; (8002e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	20000014 	.word	0x20000014

08002e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e74:	f7ff fff0 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	4b05      	ldr	r3, [pc, #20]	; (8002e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	0a9b      	lsrs	r3, r3, #10
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	4903      	ldr	r1, [pc, #12]	; (8002e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e86:	5ccb      	ldrb	r3, [r1, r3]
 8002e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	40023800 	.word	0x40023800
 8002e94:	0800859c 	.word	0x0800859c

08002e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e9c:	f7ff ffdc 	bl	8002e58 <HAL_RCC_GetHCLKFreq>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	4b05      	ldr	r3, [pc, #20]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	0b5b      	lsrs	r3, r3, #13
 8002ea8:	f003 0307 	and.w	r3, r3, #7
 8002eac:	4903      	ldr	r1, [pc, #12]	; (8002ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eae:	5ccb      	ldrb	r3, [r1, r3]
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	0800859c 	.word	0x0800859c

08002ec0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b082      	sub	sp, #8
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e07b      	b.n	8002fca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d108      	bne.n	8002eec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ee2:	d009      	beq.n	8002ef8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	61da      	str	r2, [r3, #28]
 8002eea:	e005      	b.n	8002ef8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d106      	bne.n	8002f18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7fe fe88 	bl	8001c28 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f40:	431a      	orrs	r2, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695b      	ldr	r3, [r3, #20]
 8002f5a:	f003 0301 	and.w	r3, r3, #1
 8002f5e:	431a      	orrs	r2, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
 8002f6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a1b      	ldr	r3, [r3, #32]
 8002f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f7c:	ea42 0103 	orr.w	r1, r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	699b      	ldr	r3, [r3, #24]
 8002f94:	0c1b      	lsrs	r3, r3, #16
 8002f96:	f003 0104 	and.w	r1, r3, #4
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9e:	f003 0210 	and.w	r2, r3, #16
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69da      	ldr	r2, [r3, #28]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b088      	sub	sp, #32
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	603b      	str	r3, [r7, #0]
 8002fde:	4613      	mov	r3, r2
 8002fe0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d101      	bne.n	8002ff4 <HAL_SPI_Transmit+0x22>
 8002ff0:	2302      	movs	r3, #2
 8002ff2:	e126      	b.n	8003242 <HAL_SPI_Transmit+0x270>
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ffc:	f7ff f830 	bl	8002060 <HAL_GetTick>
 8003000:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003002:	88fb      	ldrh	r3, [r7, #6]
 8003004:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d002      	beq.n	8003018 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003016:	e10b      	b.n	8003230 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d002      	beq.n	8003024 <HAL_SPI_Transmit+0x52>
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003028:	e102      	b.n	8003230 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2203      	movs	r2, #3
 800302e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	88fa      	ldrh	r2, [r7, #6]
 8003042:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	88fa      	ldrh	r2, [r7, #6]
 8003048:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003070:	d10f      	bne.n	8003092 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003080:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003090:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800309c:	2b40      	cmp	r3, #64	; 0x40
 800309e:	d007      	beq.n	80030b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80030b8:	d14b      	bne.n	8003152 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d002      	beq.n	80030c8 <HAL_SPI_Transmit+0xf6>
 80030c2:	8afb      	ldrh	r3, [r7, #22]
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d13e      	bne.n	8003146 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d8:	1c9a      	adds	r2, r3, #2
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	3b01      	subs	r3, #1
 80030e6:	b29a      	uxth	r2, r3
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80030ec:	e02b      	b.n	8003146 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d112      	bne.n	8003122 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310c:	1c9a      	adds	r2, r3, #2
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003116:	b29b      	uxth	r3, r3
 8003118:	3b01      	subs	r3, #1
 800311a:	b29a      	uxth	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003120:	e011      	b.n	8003146 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003122:	f7fe ff9d 	bl	8002060 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	683a      	ldr	r2, [r7, #0]
 800312e:	429a      	cmp	r2, r3
 8003130:	d803      	bhi.n	800313a <HAL_SPI_Transmit+0x168>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003138:	d102      	bne.n	8003140 <HAL_SPI_Transmit+0x16e>
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003144:	e074      	b.n	8003230 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1ce      	bne.n	80030ee <HAL_SPI_Transmit+0x11c>
 8003150:	e04c      	b.n	80031ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_SPI_Transmit+0x18e>
 800315a:	8afb      	ldrh	r3, [r7, #22]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d140      	bne.n	80031e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	330c      	adds	r3, #12
 800316a:	7812      	ldrb	r2, [r2, #0]
 800316c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800317c:	b29b      	uxth	r3, r3
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003186:	e02c      	b.n	80031e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b02      	cmp	r3, #2
 8003194:	d113      	bne.n	80031be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	7812      	ldrb	r2, [r2, #0]
 80031a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a8:	1c5a      	adds	r2, r3, #1
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29a      	uxth	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80031bc:	e011      	b.n	80031e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031be:	f7fe ff4f 	bl	8002060 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d803      	bhi.n	80031d6 <HAL_SPI_Transmit+0x204>
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d102      	bne.n	80031dc <HAL_SPI_Transmit+0x20a>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d102      	bne.n	80031e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80031e0:	e026      	b.n	8003230 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1cd      	bne.n	8003188 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031ec:	69ba      	ldr	r2, [r7, #24]
 80031ee:	6839      	ldr	r1, [r7, #0]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 fa63 	bl	80036bc <SPI_EndRxTxTransaction>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2220      	movs	r2, #32
 8003200:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d10a      	bne.n	8003220 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800320a:	2300      	movs	r3, #0
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	613b      	str	r3, [r7, #16]
 800321e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003228:	2301      	movs	r3, #1
 800322a:	77fb      	strb	r3, [r7, #31]
 800322c:	e000      	b.n	8003230 <HAL_SPI_Transmit+0x25e>
  }

error:
 800322e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003240:	7ffb      	ldrb	r3, [r7, #31]
}
 8003242:	4618      	mov	r0, r3
 8003244:	3720      	adds	r7, #32
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}

0800324a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800324a:	b580      	push	{r7, lr}
 800324c:	b08c      	sub	sp, #48	; 0x30
 800324e:	af00      	add	r7, sp, #0
 8003250:	60f8      	str	r0, [r7, #12]
 8003252:	60b9      	str	r1, [r7, #8]
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003258:	2301      	movs	r3, #1
 800325a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800325c:	2300      	movs	r3, #0
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_SPI_TransmitReceive+0x26>
 800326c:	2302      	movs	r3, #2
 800326e:	e18a      	b.n	8003586 <HAL_SPI_TransmitReceive+0x33c>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003278:	f7fe fef2 	bl	8002060 <HAL_GetTick>
 800327c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003284:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800328e:	887b      	ldrh	r3, [r7, #2]
 8003290:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003292:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003296:	2b01      	cmp	r3, #1
 8003298:	d00f      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x70>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032a0:	d107      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_SPI_TransmitReceive+0x68>
 80032aa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032ae:	2b04      	cmp	r3, #4
 80032b0:	d003      	beq.n	80032ba <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80032b2:	2302      	movs	r3, #2
 80032b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032b8:	e15b      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d005      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x82>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d002      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x82>
 80032c6:	887b      	ldrh	r3, [r7, #2]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d103      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80032d2:	e14e      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032da:	b2db      	uxtb	r3, r3
 80032dc:	2b04      	cmp	r3, #4
 80032de:	d003      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2205      	movs	r2, #5
 80032e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68ba      	ldr	r2, [r7, #8]
 8003304:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	887a      	ldrh	r2, [r7, #2]
 800330a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	887a      	ldrh	r2, [r7, #2]
 8003310:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d007      	beq.n	800333c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800333a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003344:	d178      	bne.n	8003438 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d002      	beq.n	8003354 <HAL_SPI_TransmitReceive+0x10a>
 800334e:	8b7b      	ldrh	r3, [r7, #26]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d166      	bne.n	8003422 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003358:	881a      	ldrh	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	1c9a      	adds	r2, r3, #2
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b29a      	uxth	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003378:	e053      	b.n	8003422 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	2b02      	cmp	r3, #2
 8003386:	d11b      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x176>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800338c:	b29b      	uxth	r3, r3
 800338e:	2b00      	cmp	r3, #0
 8003390:	d016      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x176>
 8003392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003394:	2b01      	cmp	r3, #1
 8003396:	d113      	bne.n	80033c0 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339c:	881a      	ldrh	r2, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a8:	1c9a      	adds	r2, r3, #2
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033bc:	2300      	movs	r3, #0
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d119      	bne.n	8003402 <HAL_SPI_TransmitReceive+0x1b8>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d014      	beq.n	8003402 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68da      	ldr	r2, [r3, #12]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e2:	b292      	uxth	r2, r2
 80033e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ea:	1c9a      	adds	r2, r3, #2
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f4:	b29b      	uxth	r3, r3
 80033f6:	3b01      	subs	r3, #1
 80033f8:	b29a      	uxth	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80033fe:	2301      	movs	r3, #1
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003402:	f7fe fe2d 	bl	8002060 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800340e:	429a      	cmp	r2, r3
 8003410:	d807      	bhi.n	8003422 <HAL_SPI_TransmitReceive+0x1d8>
 8003412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d003      	beq.n	8003422 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003420:	e0a7      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003426:	b29b      	uxth	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1a6      	bne.n	800337a <HAL_SPI_TransmitReceive+0x130>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1a1      	bne.n	800337a <HAL_SPI_TransmitReceive+0x130>
 8003436:	e07c      	b.n	8003532 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d002      	beq.n	8003446 <HAL_SPI_TransmitReceive+0x1fc>
 8003440:	8b7b      	ldrh	r3, [r7, #26]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d16b      	bne.n	800351e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	330c      	adds	r3, #12
 8003450:	7812      	ldrb	r2, [r2, #0]
 8003452:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800346c:	e057      	b.n	800351e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f003 0302 	and.w	r3, r3, #2
 8003478:	2b02      	cmp	r3, #2
 800347a:	d11c      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x26c>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003480:	b29b      	uxth	r3, r3
 8003482:	2b00      	cmp	r3, #0
 8003484:	d017      	beq.n	80034b6 <HAL_SPI_TransmitReceive+0x26c>
 8003486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003488:	2b01      	cmp	r3, #1
 800348a:	d114      	bne.n	80034b6 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	330c      	adds	r3, #12
 8003496:	7812      	ldrb	r2, [r2, #0]
 8003498:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349e:	1c5a      	adds	r2, r3, #1
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034a8:	b29b      	uxth	r3, r3
 80034aa:	3b01      	subs	r3, #1
 80034ac:	b29a      	uxth	r2, r3
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d119      	bne.n	80034f8 <HAL_SPI_TransmitReceive+0x2ae>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d014      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	68da      	ldr	r2, [r3, #12]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e0:	1c5a      	adds	r2, r3, #1
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	3b01      	subs	r3, #1
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80034f4:	2301      	movs	r3, #1
 80034f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80034f8:	f7fe fdb2 	bl	8002060 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003504:	429a      	cmp	r2, r3
 8003506:	d803      	bhi.n	8003510 <HAL_SPI_TransmitReceive+0x2c6>
 8003508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350e:	d102      	bne.n	8003516 <HAL_SPI_TransmitReceive+0x2cc>
 8003510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003512:	2b00      	cmp	r3, #0
 8003514:	d103      	bne.n	800351e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800351c:	e029      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1a2      	bne.n	800346e <HAL_SPI_TransmitReceive+0x224>
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800352c:	b29b      	uxth	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d19d      	bne.n	800346e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003534:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003536:	68f8      	ldr	r0, [r7, #12]
 8003538:	f000 f8c0 	bl	80036bc <SPI_EndRxTxTransaction>
 800353c:	4603      	mov	r3, r0
 800353e:	2b00      	cmp	r3, #0
 8003540:	d006      	beq.n	8003550 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2220      	movs	r2, #32
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800354e:	e010      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	e000      	b.n	8003572 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2201      	movs	r2, #1
 8003576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003582:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003586:	4618      	mov	r0, r3
 8003588:	3730      	adds	r7, #48	; 0x30
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800359c:	b2db      	uxtb	r3, r3
}
 800359e:	4618      	mov	r0, r3
 80035a0:	370c      	adds	r7, #12
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b088      	sub	sp, #32
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	603b      	str	r3, [r7, #0]
 80035b8:	4613      	mov	r3, r2
 80035ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035bc:	f7fe fd50 	bl	8002060 <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035c4:	1a9b      	subs	r3, r3, r2
 80035c6:	683a      	ldr	r2, [r7, #0]
 80035c8:	4413      	add	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80035cc:	f7fe fd48 	bl	8002060 <HAL_GetTick>
 80035d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80035d2:	4b39      	ldr	r3, [pc, #228]	; (80036b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	015b      	lsls	r3, r3, #5
 80035d8:	0d1b      	lsrs	r3, r3, #20
 80035da:	69fa      	ldr	r2, [r7, #28]
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80035e2:	e054      	b.n	800368e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ea:	d050      	beq.n	800368e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80035ec:	f7fe fd38 	bl	8002060 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	69fa      	ldr	r2, [r7, #28]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d902      	bls.n	8003602 <SPI_WaitFlagStateUntilTimeout+0x56>
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d13d      	bne.n	800367e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003610:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800361a:	d111      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x94>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003624:	d004      	beq.n	8003630 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362e:	d107      	bne.n	8003640 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003648:	d10f      	bne.n	800366a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003658:	601a      	str	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003668:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e017      	b.n	80036ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003684:	2300      	movs	r3, #0
 8003686:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	3b01      	subs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689a      	ldr	r2, [r3, #8]
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	4013      	ands	r3, r2
 8003698:	68ba      	ldr	r2, [r7, #8]
 800369a:	429a      	cmp	r2, r3
 800369c:	bf0c      	ite	eq
 800369e:	2301      	moveq	r3, #1
 80036a0:	2300      	movne	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	461a      	mov	r2, r3
 80036a6:	79fb      	ldrb	r3, [r7, #7]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d19b      	bne.n	80035e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3720      	adds	r7, #32
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	20000014 	.word	0x20000014

080036bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af02      	add	r7, sp, #8
 80036c2:	60f8      	str	r0, [r7, #12]
 80036c4:	60b9      	str	r1, [r7, #8]
 80036c6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <SPI_EndRxTxTransaction+0x7c>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a1b      	ldr	r2, [pc, #108]	; (800373c <SPI_EndRxTxTransaction+0x80>)
 80036ce:	fba2 2303 	umull	r2, r3, r2, r3
 80036d2:	0d5b      	lsrs	r3, r3, #21
 80036d4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80036d8:	fb02 f303 	mul.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036e6:	d112      	bne.n	800370e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2200      	movs	r2, #0
 80036f0:	2180      	movs	r1, #128	; 0x80
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f7ff ff5a 	bl	80035ac <SPI_WaitFlagStateUntilTimeout>
 80036f8:	4603      	mov	r3, r0
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d016      	beq.n	800372c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003702:	f043 0220 	orr.w	r2, r3, #32
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e00f      	b.n	800372e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00a      	beq.n	800372a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	3b01      	subs	r3, #1
 8003718:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003724:	2b80      	cmp	r3, #128	; 0x80
 8003726:	d0f2      	beq.n	800370e <SPI_EndRxTxTransaction+0x52>
 8003728:	e000      	b.n	800372c <SPI_EndRxTxTransaction+0x70>
        break;
 800372a:	bf00      	nop
  }

  return HAL_OK;
 800372c:	2300      	movs	r3, #0
}
 800372e:	4618      	mov	r0, r3
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	20000014 	.word	0x20000014
 800373c:	165e9f81 	.word	0x165e9f81

08003740 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e041      	b.n	80037d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d106      	bne.n	800376c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7fe fac6 	bl	8001cf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	3304      	adds	r3, #4
 800377c:	4619      	mov	r1, r3
 800377e:	4610      	mov	r0, r2
 8003780:	f000 fab6 	bl	8003cf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037d4:	2300      	movs	r3, #0
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3708      	adds	r7, #8
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
	...

080037e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b085      	sub	sp, #20
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d001      	beq.n	80037f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e044      	b.n	8003882 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2202      	movs	r2, #2
 80037fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68da      	ldr	r2, [r3, #12]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0201 	orr.w	r2, r2, #1
 800380e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a1e      	ldr	r2, [pc, #120]	; (8003890 <HAL_TIM_Base_Start_IT+0xb0>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d018      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x6c>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003822:	d013      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x6c>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a1a      	ldr	r2, [pc, #104]	; (8003894 <HAL_TIM_Base_Start_IT+0xb4>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00e      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x6c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a19      	ldr	r2, [pc, #100]	; (8003898 <HAL_TIM_Base_Start_IT+0xb8>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d009      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x6c>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a17      	ldr	r2, [pc, #92]	; (800389c <HAL_TIM_Base_Start_IT+0xbc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d004      	beq.n	800384c <HAL_TIM_Base_Start_IT+0x6c>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a16      	ldr	r2, [pc, #88]	; (80038a0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d111      	bne.n	8003870 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	2b06      	cmp	r3, #6
 800385c:	d010      	beq.n	8003880 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f042 0201 	orr.w	r2, r2, #1
 800386c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	e007      	b.n	8003880 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0201 	orr.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3714      	adds	r7, #20
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr
 800388e:	bf00      	nop
 8003890:	40010000 	.word	0x40010000
 8003894:	40000400 	.word	0x40000400
 8003898:	40000800 	.word	0x40000800
 800389c:	40000c00 	.word	0x40000c00
 80038a0:	40014000 	.word	0x40014000

080038a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6a1a      	ldr	r2, [r3, #32]
 80038c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10f      	bne.n	80038ec <HAL_TIM_Base_Stop_IT+0x48>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	6a1a      	ldr	r2, [r3, #32]
 80038d2:	f240 4344 	movw	r3, #1092	; 0x444
 80038d6:	4013      	ands	r3, r2
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d107      	bne.n	80038ec <HAL_TIM_Base_Stop_IT+0x48>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003902:	b580      	push	{r7, lr}
 8003904:	b082      	sub	sp, #8
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b02      	cmp	r3, #2
 8003916:	d122      	bne.n	800395e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b02      	cmp	r3, #2
 8003924:	d11b      	bne.n	800395e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f06f 0202 	mvn.w	r2, #2
 800392e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	699b      	ldr	r3, [r3, #24]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f9b5 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 800394a:	e005      	b.n	8003958 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f000 f9a7 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f9b8 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	f003 0304 	and.w	r3, r3, #4
 8003968:	2b04      	cmp	r3, #4
 800396a:	d122      	bne.n	80039b2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	f003 0304 	and.w	r3, r3, #4
 8003976:	2b04      	cmp	r3, #4
 8003978:	d11b      	bne.n	80039b2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f06f 0204 	mvn.w	r2, #4
 8003982:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	699b      	ldr	r3, [r3, #24]
 8003990:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f98b 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 800399e:	e005      	b.n	80039ac <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f97d 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f98e 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0308 	and.w	r3, r3, #8
 80039bc:	2b08      	cmp	r3, #8
 80039be:	d122      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b08      	cmp	r3, #8
 80039cc:	d11b      	bne.n	8003a06 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f06f 0208 	mvn.w	r2, #8
 80039d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2204      	movs	r2, #4
 80039dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	69db      	ldr	r3, [r3, #28]
 80039e4:	f003 0303 	and.w	r3, r3, #3
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f961 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 80039f2:	e005      	b.n	8003a00 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f000 f953 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f964 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d122      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	68db      	ldr	r3, [r3, #12]
 8003a1a:	f003 0310 	and.w	r3, r3, #16
 8003a1e:	2b10      	cmp	r3, #16
 8003a20:	d11b      	bne.n	8003a5a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f06f 0210 	mvn.w	r2, #16
 8003a2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2208      	movs	r2, #8
 8003a30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	69db      	ldr	r3, [r3, #28]
 8003a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 f937 	bl	8003cb4 <HAL_TIM_IC_CaptureCallback>
 8003a46:	e005      	b.n	8003a54 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 f929 	bl	8003ca0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f93a 	bl	8003cc8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d10e      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d107      	bne.n	8003a86 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f06f 0201 	mvn.w	r2, #1
 8003a7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f7fe f893 	bl	8001bac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	691b      	ldr	r3, [r3, #16]
 8003a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a90:	2b80      	cmp	r3, #128	; 0x80
 8003a92:	d10e      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 fab1 	bl	8004014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003abc:	2b40      	cmp	r3, #64	; 0x40
 8003abe:	d10e      	bne.n	8003ade <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d107      	bne.n	8003ade <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f8ff 	bl	8003cdc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	f003 0320 	and.w	r3, r3, #32
 8003ae8:	2b20      	cmp	r3, #32
 8003aea:	d10e      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68db      	ldr	r3, [r3, #12]
 8003af2:	f003 0320 	and.w	r3, r3, #32
 8003af6:	2b20      	cmp	r3, #32
 8003af8:	d107      	bne.n	8003b0a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f06f 0220 	mvn.w	r2, #32
 8003b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa7b 	bl	8004000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b084      	sub	sp, #16
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
 8003b1a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_TIM_ConfigClockSource+0x1c>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0b4      	b.n	8003c98 <HAL_TIM_ConfigClockSource+0x186>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2202      	movs	r2, #2
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b4c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b54:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	68ba      	ldr	r2, [r7, #8]
 8003b5c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b66:	d03e      	beq.n	8003be6 <HAL_TIM_ConfigClockSource+0xd4>
 8003b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6c:	f200 8087 	bhi.w	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b74:	f000 8086 	beq.w	8003c84 <HAL_TIM_ConfigClockSource+0x172>
 8003b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b7c:	d87f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b7e:	2b70      	cmp	r3, #112	; 0x70
 8003b80:	d01a      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xa6>
 8003b82:	2b70      	cmp	r3, #112	; 0x70
 8003b84:	d87b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b86:	2b60      	cmp	r3, #96	; 0x60
 8003b88:	d050      	beq.n	8003c2c <HAL_TIM_ConfigClockSource+0x11a>
 8003b8a:	2b60      	cmp	r3, #96	; 0x60
 8003b8c:	d877      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b8e:	2b50      	cmp	r3, #80	; 0x50
 8003b90:	d03c      	beq.n	8003c0c <HAL_TIM_ConfigClockSource+0xfa>
 8003b92:	2b50      	cmp	r3, #80	; 0x50
 8003b94:	d873      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b96:	2b40      	cmp	r3, #64	; 0x40
 8003b98:	d058      	beq.n	8003c4c <HAL_TIM_ConfigClockSource+0x13a>
 8003b9a:	2b40      	cmp	r3, #64	; 0x40
 8003b9c:	d86f      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003b9e:	2b30      	cmp	r3, #48	; 0x30
 8003ba0:	d064      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003ba2:	2b30      	cmp	r3, #48	; 0x30
 8003ba4:	d86b      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003ba6:	2b20      	cmp	r3, #32
 8003ba8:	d060      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003baa:	2b20      	cmp	r3, #32
 8003bac:	d867      	bhi.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d05c      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003bb2:	2b10      	cmp	r3, #16
 8003bb4:	d05a      	beq.n	8003c6c <HAL_TIM_ConfigClockSource+0x15a>
 8003bb6:	e062      	b.n	8003c7e <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f000 f98c 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003bda:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	609a      	str	r2, [r3, #8]
      break;
 8003be4:	e04f      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6818      	ldr	r0, [r3, #0]
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	6899      	ldr	r1, [r3, #8]
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f000 f975 	bl	8003ee4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c08:	609a      	str	r2, [r3, #8]
      break;
 8003c0a:	e03c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6818      	ldr	r0, [r3, #0]
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	6859      	ldr	r1, [r3, #4]
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	461a      	mov	r2, r3
 8003c1a:	f000 f8e9 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2150      	movs	r1, #80	; 0x50
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 f942 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e02c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6818      	ldr	r0, [r3, #0]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	6859      	ldr	r1, [r3, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	461a      	mov	r2, r3
 8003c3a:	f000 f908 	bl	8003e4e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	2160      	movs	r1, #96	; 0x60
 8003c44:	4618      	mov	r0, r3
 8003c46:	f000 f932 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c4a:	e01c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6818      	ldr	r0, [r3, #0]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	6859      	ldr	r1, [r3, #4]
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	68db      	ldr	r3, [r3, #12]
 8003c58:	461a      	mov	r2, r3
 8003c5a:	f000 f8c9 	bl	8003df0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2140      	movs	r1, #64	; 0x40
 8003c64:	4618      	mov	r0, r3
 8003c66:	f000 f922 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c6a:	e00c      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4619      	mov	r1, r3
 8003c76:	4610      	mov	r0, r2
 8003c78:	f000 f919 	bl	8003eae <TIM_ITRx_SetConfig>
      break;
 8003c7c:	e003      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	73fb      	strb	r3, [r7, #15]
      break;
 8003c82:	e000      	b.n	8003c86 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c84:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b083      	sub	sp, #12
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cbc:	bf00      	nop
 8003cbe:	370c      	adds	r7, #12
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce4:	bf00      	nop
 8003ce6:	370c      	adds	r7, #12
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a34      	ldr	r2, [pc, #208]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00f      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0e:	d00b      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a31      	ldr	r2, [pc, #196]	; (8003dd8 <TIM_Base_SetConfig+0xe8>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d007      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <TIM_Base_SetConfig+0xec>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d003      	beq.n	8003d28 <TIM_Base_SetConfig+0x38>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <TIM_Base_SetConfig+0xf0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a25      	ldr	r2, [pc, #148]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d48:	d017      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a22      	ldr	r2, [pc, #136]	; (8003dd8 <TIM_Base_SetConfig+0xe8>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a21      	ldr	r2, [pc, #132]	; (8003ddc <TIM_Base_SetConfig+0xec>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d00f      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a20      	ldr	r2, [pc, #128]	; (8003de0 <TIM_Base_SetConfig+0xf0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d00b      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1f      	ldr	r2, [pc, #124]	; (8003de4 <TIM_Base_SetConfig+0xf4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d007      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a1e      	ldr	r2, [pc, #120]	; (8003de8 <TIM_Base_SetConfig+0xf8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d003      	beq.n	8003d7a <TIM_Base_SetConfig+0x8a>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a1d      	ldr	r2, [pc, #116]	; (8003dec <TIM_Base_SetConfig+0xfc>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d108      	bne.n	8003d8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	68fa      	ldr	r2, [r7, #12]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a08      	ldr	r2, [pc, #32]	; (8003dd4 <TIM_Base_SetConfig+0xe4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	615a      	str	r2, [r3, #20]
}
 8003dc6:	bf00      	nop
 8003dc8:	3714      	adds	r7, #20
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40010000 	.word	0x40010000
 8003dd8:	40000400 	.word	0x40000400
 8003ddc:	40000800 	.word	0x40000800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40014000 	.word	0x40014000
 8003de8:	40014400 	.word	0x40014400
 8003dec:	40014800 	.word	0x40014800

08003df0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	f023 0201 	bic.w	r2, r3, #1
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e1a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f023 030a 	bic.w	r3, r3, #10
 8003e2c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4313      	orrs	r3, r2
 8003e34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	693a      	ldr	r2, [r7, #16]
 8003e3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	621a      	str	r2, [r3, #32]
}
 8003e42:	bf00      	nop
 8003e44:	371c      	adds	r7, #28
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b087      	sub	sp, #28
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	f023 0210 	bic.w	r2, r3, #16
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	031b      	lsls	r3, r3, #12
 8003e7e:	697a      	ldr	r2, [r7, #20]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e8a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	011b      	lsls	r3, r3, #4
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	621a      	str	r2, [r3, #32]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
 8003eb6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ec6:	683a      	ldr	r2, [r7, #0]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	f043 0307 	orr.w	r3, r3, #7
 8003ed0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	609a      	str	r2, [r3, #8]
}
 8003ed8:	bf00      	nop
 8003eda:	3714      	adds	r7, #20
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b087      	sub	sp, #28
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003efe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	697a      	ldr	r2, [r7, #20]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b085      	sub	sp, #20
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f34:	2b01      	cmp	r3, #1
 8003f36:	d101      	bne.n	8003f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f38:	2302      	movs	r3, #2
 8003f3a:	e050      	b.n	8003fde <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2201      	movs	r2, #1
 8003f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a1c      	ldr	r2, [pc, #112]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d018      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f88:	d013      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a18      	ldr	r2, [pc, #96]	; (8003ff0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d00e      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a16      	ldr	r2, [pc, #88]	; (8003ff4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d009      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d004      	beq.n	8003fb2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a13      	ldr	r2, [pc, #76]	; (8003ffc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003fae:	4293      	cmp	r3, r2
 8003fb0:	d10c      	bne.n	8003fcc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3714      	adds	r7, #20
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	40010000 	.word	0x40010000
 8003ff0:	40000400 	.word	0x40000400
 8003ff4:	40000800 	.word	0x40000800
 8003ff8:	40000c00 	.word	0x40000c00
 8003ffc:	40014000 	.word	0x40014000

08004000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800401c:	bf00      	nop
 800401e:	370c      	adds	r7, #12
 8004020:	46bd      	mov	sp, r7
 8004022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004026:	4770      	bx	lr

08004028 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d101      	bne.n	800403a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e03f      	b.n	80040ba <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004040:	b2db      	uxtb	r3, r3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d106      	bne.n	8004054 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7fd fe7a 	bl	8001d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2224      	movs	r2, #36	; 0x24
 8004058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68da      	ldr	r2, [r3, #12]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800406a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f929 	bl	80042c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004080:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	695a      	ldr	r2, [r3, #20]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004090:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68da      	ldr	r2, [r3, #12]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2220      	movs	r2, #32
 80040ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2220      	movs	r2, #32
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b08a      	sub	sp, #40	; 0x28
 80040c6:	af02      	add	r7, sp, #8
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	4613      	mov	r3, r2
 80040d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040dc:	b2db      	uxtb	r3, r3
 80040de:	2b20      	cmp	r3, #32
 80040e0:	d17c      	bne.n	80041dc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d002      	beq.n	80040ee <HAL_UART_Transmit+0x2c>
 80040e8:	88fb      	ldrh	r3, [r7, #6]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e075      	b.n	80041de <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f8:	2b01      	cmp	r3, #1
 80040fa:	d101      	bne.n	8004100 <HAL_UART_Transmit+0x3e>
 80040fc:	2302      	movs	r3, #2
 80040fe:	e06e      	b.n	80041de <HAL_UART_Transmit+0x11c>
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2201      	movs	r2, #1
 8004104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2221      	movs	r2, #33	; 0x21
 8004112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004116:	f7fd ffa3 	bl	8002060 <HAL_GetTick>
 800411a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	88fa      	ldrh	r2, [r7, #6]
 8004120:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	88fa      	ldrh	r2, [r7, #6]
 8004126:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004130:	d108      	bne.n	8004144 <HAL_UART_Transmit+0x82>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d104      	bne.n	8004144 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800413a:	2300      	movs	r3, #0
 800413c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	61bb      	str	r3, [r7, #24]
 8004142:	e003      	b.n	800414c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004154:	e02a      	b.n	80041ac <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	9300      	str	r3, [sp, #0]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2200      	movs	r2, #0
 800415e:	2180      	movs	r1, #128	; 0x80
 8004160:	68f8      	ldr	r0, [r7, #12]
 8004162:	f000 f840 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 8004166:	4603      	mov	r3, r0
 8004168:	2b00      	cmp	r3, #0
 800416a:	d001      	beq.n	8004170 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e036      	b.n	80041de <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10b      	bne.n	800418e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004176:	69bb      	ldr	r3, [r7, #24]
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	461a      	mov	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004184:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	3302      	adds	r3, #2
 800418a:	61bb      	str	r3, [r7, #24]
 800418c:	e007      	b.n	800419e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	781a      	ldrb	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004198:	69fb      	ldr	r3, [r7, #28]
 800419a:	3301      	adds	r3, #1
 800419c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041a2:	b29b      	uxth	r3, r3
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d1cf      	bne.n	8004156 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	9300      	str	r3, [sp, #0]
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	2200      	movs	r2, #0
 80041be:	2140      	movs	r1, #64	; 0x40
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f000 f810 	bl	80041e6 <UART_WaitOnFlagUntilTimeout>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80041cc:	2303      	movs	r3, #3
 80041ce:	e006      	b.n	80041de <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2220      	movs	r2, #32
 80041d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80041d8:	2300      	movs	r3, #0
 80041da:	e000      	b.n	80041de <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80041dc:	2302      	movs	r3, #2
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3720      	adds	r7, #32
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b090      	sub	sp, #64	; 0x40
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	60f8      	str	r0, [r7, #12]
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	603b      	str	r3, [r7, #0]
 80041f2:	4613      	mov	r3, r2
 80041f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041f6:	e050      	b.n	800429a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d04c      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004202:	2b00      	cmp	r3, #0
 8004204:	d007      	beq.n	8004216 <UART_WaitOnFlagUntilTimeout+0x30>
 8004206:	f7fd ff2b 	bl	8002060 <HAL_GetTick>
 800420a:	4602      	mov	r2, r0
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	1ad3      	subs	r3, r2, r3
 8004210:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004212:	429a      	cmp	r2, r3
 8004214:	d241      	bcs.n	800429a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	330c      	adds	r3, #12
 800421c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004220:	e853 3f00 	ldrex	r3, [r3]
 8004224:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	330c      	adds	r3, #12
 8004234:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004236:	637a      	str	r2, [r7, #52]	; 0x34
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800423c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1e5      	bne.n	8004216 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3314      	adds	r3, #20
 8004250:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	e853 3f00 	ldrex	r3, [r3]
 8004258:	613b      	str	r3, [r7, #16]
   return(result);
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	f023 0301 	bic.w	r3, r3, #1
 8004260:	63bb      	str	r3, [r7, #56]	; 0x38
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	3314      	adds	r3, #20
 8004268:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800426a:	623a      	str	r2, [r7, #32]
 800426c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	69f9      	ldr	r1, [r7, #28]
 8004270:	6a3a      	ldr	r2, [r7, #32]
 8004272:	e841 2300 	strex	r3, r2, [r1]
 8004276:	61bb      	str	r3, [r7, #24]
   return(result);
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1e5      	bne.n	800424a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2220      	movs	r2, #32
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e00f      	b.n	80042ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	4013      	ands	r3, r2
 80042a4:	68ba      	ldr	r2, [r7, #8]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	bf0c      	ite	eq
 80042aa:	2301      	moveq	r3, #1
 80042ac:	2300      	movne	r3, #0
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	461a      	mov	r2, r3
 80042b2:	79fb      	ldrb	r3, [r7, #7]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d09f      	beq.n	80041f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3740      	adds	r7, #64	; 0x40
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
	...

080042c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042c8:	b09f      	sub	sp, #124	; 0x7c
 80042ca:	af00      	add	r7, sp, #0
 80042cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80042d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042da:	68d9      	ldr	r1, [r3, #12]
 80042dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042de:	681a      	ldr	r2, [r3, #0]
 80042e0:	ea40 0301 	orr.w	r3, r0, r1
 80042e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80042e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042e8:	689a      	ldr	r2, [r3, #8]
 80042ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f2:	695b      	ldr	r3, [r3, #20]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	69db      	ldr	r3, [r3, #28]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80042fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	68db      	ldr	r3, [r3, #12]
 8004304:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004308:	f021 010c 	bic.w	r1, r1, #12
 800430c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004312:	430b      	orrs	r3, r1
 8004314:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004316:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004320:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004322:	6999      	ldr	r1, [r3, #24]
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	ea40 0301 	orr.w	r3, r0, r1
 800432c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800432e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	4bc5      	ldr	r3, [pc, #788]	; (8004648 <UART_SetConfig+0x384>)
 8004334:	429a      	cmp	r2, r3
 8004336:	d004      	beq.n	8004342 <UART_SetConfig+0x7e>
 8004338:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	4bc3      	ldr	r3, [pc, #780]	; (800464c <UART_SetConfig+0x388>)
 800433e:	429a      	cmp	r2, r3
 8004340:	d103      	bne.n	800434a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004342:	f7fe fda9 	bl	8002e98 <HAL_RCC_GetPCLK2Freq>
 8004346:	6778      	str	r0, [r7, #116]	; 0x74
 8004348:	e002      	b.n	8004350 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800434a:	f7fe fd91 	bl	8002e70 <HAL_RCC_GetPCLK1Freq>
 800434e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004350:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004358:	f040 80b6 	bne.w	80044c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800435c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800435e:	461c      	mov	r4, r3
 8004360:	f04f 0500 	mov.w	r5, #0
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	1891      	adds	r1, r2, r2
 800436a:	6439      	str	r1, [r7, #64]	; 0x40
 800436c:	415b      	adcs	r3, r3
 800436e:	647b      	str	r3, [r7, #68]	; 0x44
 8004370:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004374:	1912      	adds	r2, r2, r4
 8004376:	eb45 0303 	adc.w	r3, r5, r3
 800437a:	f04f 0000 	mov.w	r0, #0
 800437e:	f04f 0100 	mov.w	r1, #0
 8004382:	00d9      	lsls	r1, r3, #3
 8004384:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004388:	00d0      	lsls	r0, r2, #3
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	1911      	adds	r1, r2, r4
 8004390:	6639      	str	r1, [r7, #96]	; 0x60
 8004392:	416b      	adcs	r3, r5
 8004394:	667b      	str	r3, [r7, #100]	; 0x64
 8004396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	461a      	mov	r2, r3
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	1891      	adds	r1, r2, r2
 80043a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80043a4:	415b      	adcs	r3, r3
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80043b0:	f7fc fa74 	bl	800089c <__aeabi_uldivmod>
 80043b4:	4602      	mov	r2, r0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4ba5      	ldr	r3, [pc, #660]	; (8004650 <UART_SetConfig+0x38c>)
 80043ba:	fba3 2302 	umull	r2, r3, r3, r2
 80043be:	095b      	lsrs	r3, r3, #5
 80043c0:	011e      	lsls	r6, r3, #4
 80043c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043c4:	461c      	mov	r4, r3
 80043c6:	f04f 0500 	mov.w	r5, #0
 80043ca:	4622      	mov	r2, r4
 80043cc:	462b      	mov	r3, r5
 80043ce:	1891      	adds	r1, r2, r2
 80043d0:	6339      	str	r1, [r7, #48]	; 0x30
 80043d2:	415b      	adcs	r3, r3
 80043d4:	637b      	str	r3, [r7, #52]	; 0x34
 80043d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80043da:	1912      	adds	r2, r2, r4
 80043dc:	eb45 0303 	adc.w	r3, r5, r3
 80043e0:	f04f 0000 	mov.w	r0, #0
 80043e4:	f04f 0100 	mov.w	r1, #0
 80043e8:	00d9      	lsls	r1, r3, #3
 80043ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043ee:	00d0      	lsls	r0, r2, #3
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	1911      	adds	r1, r2, r4
 80043f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80043f8:	416b      	adcs	r3, r5
 80043fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	461a      	mov	r2, r3
 8004402:	f04f 0300 	mov.w	r3, #0
 8004406:	1891      	adds	r1, r2, r2
 8004408:	62b9      	str	r1, [r7, #40]	; 0x28
 800440a:	415b      	adcs	r3, r3
 800440c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004412:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004416:	f7fc fa41 	bl	800089c <__aeabi_uldivmod>
 800441a:	4602      	mov	r2, r0
 800441c:	460b      	mov	r3, r1
 800441e:	4b8c      	ldr	r3, [pc, #560]	; (8004650 <UART_SetConfig+0x38c>)
 8004420:	fba3 1302 	umull	r1, r3, r3, r2
 8004424:	095b      	lsrs	r3, r3, #5
 8004426:	2164      	movs	r1, #100	; 0x64
 8004428:	fb01 f303 	mul.w	r3, r1, r3
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	3332      	adds	r3, #50	; 0x32
 8004432:	4a87      	ldr	r2, [pc, #540]	; (8004650 <UART_SetConfig+0x38c>)
 8004434:	fba2 2303 	umull	r2, r3, r2, r3
 8004438:	095b      	lsrs	r3, r3, #5
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004440:	441e      	add	r6, r3
 8004442:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004444:	4618      	mov	r0, r3
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	4602      	mov	r2, r0
 800444c:	460b      	mov	r3, r1
 800444e:	1894      	adds	r4, r2, r2
 8004450:	623c      	str	r4, [r7, #32]
 8004452:	415b      	adcs	r3, r3
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
 8004456:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800445a:	1812      	adds	r2, r2, r0
 800445c:	eb41 0303 	adc.w	r3, r1, r3
 8004460:	f04f 0400 	mov.w	r4, #0
 8004464:	f04f 0500 	mov.w	r5, #0
 8004468:	00dd      	lsls	r5, r3, #3
 800446a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800446e:	00d4      	lsls	r4, r2, #3
 8004470:	4622      	mov	r2, r4
 8004472:	462b      	mov	r3, r5
 8004474:	1814      	adds	r4, r2, r0
 8004476:	653c      	str	r4, [r7, #80]	; 0x50
 8004478:	414b      	adcs	r3, r1
 800447a:	657b      	str	r3, [r7, #84]	; 0x54
 800447c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	461a      	mov	r2, r3
 8004482:	f04f 0300 	mov.w	r3, #0
 8004486:	1891      	adds	r1, r2, r2
 8004488:	61b9      	str	r1, [r7, #24]
 800448a:	415b      	adcs	r3, r3
 800448c:	61fb      	str	r3, [r7, #28]
 800448e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004492:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004496:	f7fc fa01 	bl	800089c <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b6c      	ldr	r3, [pc, #432]	; (8004650 <UART_SetConfig+0x38c>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	; 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3332      	adds	r3, #50	; 0x32
 80044b2:	4a67      	ldr	r2, [pc, #412]	; (8004650 <UART_SetConfig+0x38c>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 0207 	and.w	r2, r3, #7
 80044be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4432      	add	r2, r6
 80044c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80044c6:	e0b9      	b.n	800463c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ca:	461c      	mov	r4, r3
 80044cc:	f04f 0500 	mov.w	r5, #0
 80044d0:	4622      	mov	r2, r4
 80044d2:	462b      	mov	r3, r5
 80044d4:	1891      	adds	r1, r2, r2
 80044d6:	6139      	str	r1, [r7, #16]
 80044d8:	415b      	adcs	r3, r3
 80044da:	617b      	str	r3, [r7, #20]
 80044dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80044e0:	1912      	adds	r2, r2, r4
 80044e2:	eb45 0303 	adc.w	r3, r5, r3
 80044e6:	f04f 0000 	mov.w	r0, #0
 80044ea:	f04f 0100 	mov.w	r1, #0
 80044ee:	00d9      	lsls	r1, r3, #3
 80044f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044f4:	00d0      	lsls	r0, r2, #3
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	eb12 0804 	adds.w	r8, r2, r4
 80044fe:	eb43 0905 	adc.w	r9, r3, r5
 8004502:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	4618      	mov	r0, r3
 8004508:	f04f 0100 	mov.w	r1, #0
 800450c:	f04f 0200 	mov.w	r2, #0
 8004510:	f04f 0300 	mov.w	r3, #0
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800451a:	0082      	lsls	r2, r0, #2
 800451c:	4640      	mov	r0, r8
 800451e:	4649      	mov	r1, r9
 8004520:	f7fc f9bc 	bl	800089c <__aeabi_uldivmod>
 8004524:	4602      	mov	r2, r0
 8004526:	460b      	mov	r3, r1
 8004528:	4b49      	ldr	r3, [pc, #292]	; (8004650 <UART_SetConfig+0x38c>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	011e      	lsls	r6, r3, #4
 8004532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004534:	4618      	mov	r0, r3
 8004536:	f04f 0100 	mov.w	r1, #0
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	1894      	adds	r4, r2, r2
 8004540:	60bc      	str	r4, [r7, #8]
 8004542:	415b      	adcs	r3, r3
 8004544:	60fb      	str	r3, [r7, #12]
 8004546:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800454a:	1812      	adds	r2, r2, r0
 800454c:	eb41 0303 	adc.w	r3, r1, r3
 8004550:	f04f 0400 	mov.w	r4, #0
 8004554:	f04f 0500 	mov.w	r5, #0
 8004558:	00dd      	lsls	r5, r3, #3
 800455a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800455e:	00d4      	lsls	r4, r2, #3
 8004560:	4622      	mov	r2, r4
 8004562:	462b      	mov	r3, r5
 8004564:	1814      	adds	r4, r2, r0
 8004566:	64bc      	str	r4, [r7, #72]	; 0x48
 8004568:	414b      	adcs	r3, r1
 800456a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800456c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	4618      	mov	r0, r3
 8004572:	f04f 0100 	mov.w	r1, #0
 8004576:	f04f 0200 	mov.w	r2, #0
 800457a:	f04f 0300 	mov.w	r3, #0
 800457e:	008b      	lsls	r3, r1, #2
 8004580:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004584:	0082      	lsls	r2, r0, #2
 8004586:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800458a:	f7fc f987 	bl	800089c <__aeabi_uldivmod>
 800458e:	4602      	mov	r2, r0
 8004590:	460b      	mov	r3, r1
 8004592:	4b2f      	ldr	r3, [pc, #188]	; (8004650 <UART_SetConfig+0x38c>)
 8004594:	fba3 1302 	umull	r1, r3, r3, r2
 8004598:	095b      	lsrs	r3, r3, #5
 800459a:	2164      	movs	r1, #100	; 0x64
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	011b      	lsls	r3, r3, #4
 80045a4:	3332      	adds	r3, #50	; 0x32
 80045a6:	4a2a      	ldr	r2, [pc, #168]	; (8004650 <UART_SetConfig+0x38c>)
 80045a8:	fba2 2303 	umull	r2, r3, r2, r3
 80045ac:	095b      	lsrs	r3, r3, #5
 80045ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045b2:	441e      	add	r6, r3
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	4618      	mov	r0, r3
 80045b8:	f04f 0100 	mov.w	r1, #0
 80045bc:	4602      	mov	r2, r0
 80045be:	460b      	mov	r3, r1
 80045c0:	1894      	adds	r4, r2, r2
 80045c2:	603c      	str	r4, [r7, #0]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	607b      	str	r3, [r7, #4]
 80045c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045cc:	1812      	adds	r2, r2, r0
 80045ce:	eb41 0303 	adc.w	r3, r1, r3
 80045d2:	f04f 0400 	mov.w	r4, #0
 80045d6:	f04f 0500 	mov.w	r5, #0
 80045da:	00dd      	lsls	r5, r3, #3
 80045dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045e0:	00d4      	lsls	r4, r2, #3
 80045e2:	4622      	mov	r2, r4
 80045e4:	462b      	mov	r3, r5
 80045e6:	eb12 0a00 	adds.w	sl, r2, r0
 80045ea:	eb43 0b01 	adc.w	fp, r3, r1
 80045ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f04f 0100 	mov.w	r1, #0
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	008b      	lsls	r3, r1, #2
 8004602:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004606:	0082      	lsls	r2, r0, #2
 8004608:	4650      	mov	r0, sl
 800460a:	4659      	mov	r1, fp
 800460c:	f7fc f946 	bl	800089c <__aeabi_uldivmod>
 8004610:	4602      	mov	r2, r0
 8004612:	460b      	mov	r3, r1
 8004614:	4b0e      	ldr	r3, [pc, #56]	; (8004650 <UART_SetConfig+0x38c>)
 8004616:	fba3 1302 	umull	r1, r3, r3, r2
 800461a:	095b      	lsrs	r3, r3, #5
 800461c:	2164      	movs	r1, #100	; 0x64
 800461e:	fb01 f303 	mul.w	r3, r1, r3
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	011b      	lsls	r3, r3, #4
 8004626:	3332      	adds	r3, #50	; 0x32
 8004628:	4a09      	ldr	r2, [pc, #36]	; (8004650 <UART_SetConfig+0x38c>)
 800462a:	fba2 2303 	umull	r2, r3, r2, r3
 800462e:	095b      	lsrs	r3, r3, #5
 8004630:	f003 020f 	and.w	r2, r3, #15
 8004634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4432      	add	r2, r6
 800463a:	609a      	str	r2, [r3, #8]
}
 800463c:	bf00      	nop
 800463e:	377c      	adds	r7, #124	; 0x7c
 8004640:	46bd      	mov	sp, r7
 8004642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004646:	bf00      	nop
 8004648:	40011000 	.word	0x40011000
 800464c:	40011400 	.word	0x40011400
 8004650:	51eb851f 	.word	0x51eb851f

08004654 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004658:	4904      	ldr	r1, [pc, #16]	; (800466c <MX_FATFS_Init+0x18>)
 800465a:	4805      	ldr	r0, [pc, #20]	; (8004670 <MX_FATFS_Init+0x1c>)
 800465c:	f003 f9ca 	bl	80079f4 <FATFS_LinkDriver>
 8004660:	4603      	mov	r3, r0
 8004662:	461a      	mov	r2, r3
 8004664:	4b03      	ldr	r3, [pc, #12]	; (8004674 <MX_FATFS_Init+0x20>)
 8004666:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20002d90 	.word	0x20002d90
 8004670:	20000020 	.word	0x20000020
 8004674:	20002d94 	.word	0x20002d94

08004678 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800467c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800467e:	4618      	mov	r0, r3
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b082      	sub	sp, #8
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	  Stat = SD_disk_initialize(pdrv);
 8004692:	79fb      	ldrb	r3, [r7, #7]
 8004694:	4618      	mov	r0, r3
 8004696:	f7fc fc37 	bl	8000f08 <SD_disk_initialize>
 800469a:	4603      	mov	r3, r0
 800469c:	b2da      	uxtb	r2, r3
 800469e:	4b04      	ldr	r3, [pc, #16]	; (80046b0 <USER_initialize+0x28>)
 80046a0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80046a2:	4b03      	ldr	r3, [pc, #12]	; (80046b0 <USER_initialize+0x28>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3708      	adds	r7, #8
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	2000001d 	.word	0x2000001d

080046b4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	4603      	mov	r3, r0
 80046bc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80046be:	79fb      	ldrb	r3, [r7, #7]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7fc fd0b 	bl	80010dc <SD_disk_status>
 80046c6:	4603      	mov	r3, r0
 80046c8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	60b9      	str	r1, [r7, #8]
 80046da:	607a      	str	r2, [r7, #4]
 80046dc:	603b      	str	r3, [r7, #0]
 80046de:	4603      	mov	r3, r0
 80046e0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 80046e2:	7bf8      	ldrb	r0, [r7, #15]
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	f7fc fd0d 	bl	8001108 <SD_disk_read>
 80046ee:	4603      	mov	r3, r0
 80046f0:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}

080046fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80046fa:	b580      	push	{r7, lr}
 80046fc:	b084      	sub	sp, #16
 80046fe:	af00      	add	r7, sp, #0
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
 8004706:	4603      	mov	r3, r0
 8004708:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800470a:	7bf8      	ldrb	r0, [r7, #15]
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	f7fc fd63 	bl	80011dc <SD_disk_write>
 8004716:	4603      	mov	r3, r0
 8004718:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	4603      	mov	r3, r0
 800472a:	603a      	str	r2, [r7, #0]
 800472c:	71fb      	strb	r3, [r7, #7]
 800472e:	460b      	mov	r3, r1
 8004730:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004736:	79fb      	ldrb	r3, [r7, #7]
 8004738:	79b9      	ldrb	r1, [r7, #6]
 800473a:	683a      	ldr	r2, [r7, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f7fc fdd1 	bl	80012e4 <SD_disk_ioctl>
 8004742:	4603      	mov	r3, r0
 8004744:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	4603      	mov	r3, r0
 8004758:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800475a:	79fb      	ldrb	r3, [r7, #7]
 800475c:	4a08      	ldr	r2, [pc, #32]	; (8004780 <disk_status+0x30>)
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	4413      	add	r3, r2
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	79fa      	ldrb	r2, [r7, #7]
 8004768:	4905      	ldr	r1, [pc, #20]	; (8004780 <disk_status+0x30>)
 800476a:	440a      	add	r2, r1
 800476c:	7a12      	ldrb	r2, [r2, #8]
 800476e:	4610      	mov	r0, r2
 8004770:	4798      	blx	r3
 8004772:	4603      	mov	r3, r0
 8004774:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004776:	7bfb      	ldrb	r3, [r7, #15]
}
 8004778:	4618      	mov	r0, r3
 800477a:	3710      	adds	r7, #16
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	200002f4 	.word	0x200002f4

08004784 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004792:	79fb      	ldrb	r3, [r7, #7]
 8004794:	4a0d      	ldr	r2, [pc, #52]	; (80047cc <disk_initialize+0x48>)
 8004796:	5cd3      	ldrb	r3, [r2, r3]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d111      	bne.n	80047c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	4a0b      	ldr	r2, [pc, #44]	; (80047cc <disk_initialize+0x48>)
 80047a0:	2101      	movs	r1, #1
 80047a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	4a09      	ldr	r2, [pc, #36]	; (80047cc <disk_initialize+0x48>)
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	79fa      	ldrb	r2, [r7, #7]
 80047b2:	4906      	ldr	r1, [pc, #24]	; (80047cc <disk_initialize+0x48>)
 80047b4:	440a      	add	r2, r1
 80047b6:	7a12      	ldrb	r2, [r2, #8]
 80047b8:	4610      	mov	r0, r2
 80047ba:	4798      	blx	r3
 80047bc:	4603      	mov	r3, r0
 80047be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3710      	adds	r7, #16
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	200002f4 	.word	0x200002f4

080047d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80047d0:	b590      	push	{r4, r7, lr}
 80047d2:	b087      	sub	sp, #28
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	607a      	str	r2, [r7, #4]
 80047da:	603b      	str	r3, [r7, #0]
 80047dc:	4603      	mov	r3, r0
 80047de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80047e0:	7bfb      	ldrb	r3, [r7, #15]
 80047e2:	4a0a      	ldr	r2, [pc, #40]	; (800480c <disk_read+0x3c>)
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	685b      	ldr	r3, [r3, #4]
 80047ea:	689c      	ldr	r4, [r3, #8]
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	4a07      	ldr	r2, [pc, #28]	; (800480c <disk_read+0x3c>)
 80047f0:	4413      	add	r3, r2
 80047f2:	7a18      	ldrb	r0, [r3, #8]
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	68b9      	ldr	r1, [r7, #8]
 80047fa:	47a0      	blx	r4
 80047fc:	4603      	mov	r3, r0
 80047fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8004800:	7dfb      	ldrb	r3, [r7, #23]
}
 8004802:	4618      	mov	r0, r3
 8004804:	371c      	adds	r7, #28
 8004806:	46bd      	mov	sp, r7
 8004808:	bd90      	pop	{r4, r7, pc}
 800480a:	bf00      	nop
 800480c:	200002f4 	.word	0x200002f4

08004810 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004810:	b590      	push	{r4, r7, lr}
 8004812:	b087      	sub	sp, #28
 8004814:	af00      	add	r7, sp, #0
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
 800481a:	603b      	str	r3, [r7, #0]
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	4a0a      	ldr	r2, [pc, #40]	; (800484c <disk_write+0x3c>)
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	4413      	add	r3, r2
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	68dc      	ldr	r4, [r3, #12]
 800482c:	7bfb      	ldrb	r3, [r7, #15]
 800482e:	4a07      	ldr	r2, [pc, #28]	; (800484c <disk_write+0x3c>)
 8004830:	4413      	add	r3, r2
 8004832:	7a18      	ldrb	r0, [r3, #8]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	47a0      	blx	r4
 800483c:	4603      	mov	r3, r0
 800483e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004840:	7dfb      	ldrb	r3, [r7, #23]
}
 8004842:	4618      	mov	r0, r3
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	bd90      	pop	{r4, r7, pc}
 800484a:	bf00      	nop
 800484c:	200002f4 	.word	0x200002f4

08004850 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	4603      	mov	r3, r0
 8004858:	603a      	str	r2, [r7, #0]
 800485a:	71fb      	strb	r3, [r7, #7]
 800485c:	460b      	mov	r3, r1
 800485e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004860:	79fb      	ldrb	r3, [r7, #7]
 8004862:	4a09      	ldr	r2, [pc, #36]	; (8004888 <disk_ioctl+0x38>)
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	4413      	add	r3, r2
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	79fa      	ldrb	r2, [r7, #7]
 800486e:	4906      	ldr	r1, [pc, #24]	; (8004888 <disk_ioctl+0x38>)
 8004870:	440a      	add	r2, r1
 8004872:	7a10      	ldrb	r0, [r2, #8]
 8004874:	79b9      	ldrb	r1, [r7, #6]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	4798      	blx	r3
 800487a:	4603      	mov	r3, r0
 800487c:	73fb      	strb	r3, [r7, #15]
  return res;
 800487e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3710      	adds	r7, #16
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}
 8004888:	200002f4 	.word	0x200002f4

0800488c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	3301      	adds	r3, #1
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800489c:	89fb      	ldrh	r3, [r7, #14]
 800489e:	021b      	lsls	r3, r3, #8
 80048a0:	b21a      	sxth	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	781b      	ldrb	r3, [r3, #0]
 80048a6:	b21b      	sxth	r3, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b21b      	sxth	r3, r3
 80048ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 80048ae:	89fb      	ldrh	r3, [r7, #14]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3714      	adds	r7, #20
 80048b4:	46bd      	mov	sp, r7
 80048b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ba:	4770      	bx	lr

080048bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	3303      	adds	r3, #3
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	021b      	lsls	r3, r3, #8
 80048d0:	687a      	ldr	r2, [r7, #4]
 80048d2:	3202      	adds	r2, #2
 80048d4:	7812      	ldrb	r2, [r2, #0]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	3201      	adds	r2, #1
 80048e2:	7812      	ldrb	r2, [r2, #0]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	021b      	lsls	r3, r3, #8
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	7812      	ldrb	r2, [r2, #0]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60fb      	str	r3, [r7, #12]
	return rv;
 80048f4:	68fb      	ldr	r3, [r7, #12]
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	460b      	mov	r3, r1
 800490c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	1c5a      	adds	r2, r3, #1
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	887a      	ldrh	r2, [r7, #2]
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]
 800491a:	887b      	ldrh	r3, [r7, #2]
 800491c:	0a1b      	lsrs	r3, r3, #8
 800491e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	1c5a      	adds	r2, r3, #1
 8004924:	607a      	str	r2, [r7, #4]
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	701a      	strb	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	607a      	str	r2, [r7, #4]
 8004948:	683a      	ldr	r2, [r7, #0]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	701a      	strb	r2, [r3, #0]
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	607a      	str	r2, [r7, #4]
 800495a:	683a      	ldr	r2, [r7, #0]
 800495c:	b2d2      	uxtb	r2, r2
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	0a1b      	lsrs	r3, r3, #8
 8004964:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1c5a      	adds	r2, r3, #1
 800496a:	607a      	str	r2, [r7, #4]
 800496c:	683a      	ldr	r2, [r7, #0]
 800496e:	b2d2      	uxtb	r2, r2
 8004970:	701a      	strb	r2, [r3, #0]
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	0a1b      	lsrs	r3, r3, #8
 8004976:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	1c5a      	adds	r2, r3, #1
 800497c:	607a      	str	r2, [r7, #4]
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	b2d2      	uxtb	r2, r2
 8004982:	701a      	strb	r2, [r3, #0]
}
 8004984:	bf00      	nop
 8004986:	370c      	adds	r7, #12
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr

08004990 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00d      	beq.n	80049c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80049aa:	693a      	ldr	r2, [r7, #16]
 80049ac:	1c53      	adds	r3, r2, #1
 80049ae:	613b      	str	r3, [r7, #16]
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	1c59      	adds	r1, r3, #1
 80049b4:	6179      	str	r1, [r7, #20]
 80049b6:	7812      	ldrb	r2, [r2, #0]
 80049b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	3b01      	subs	r3, #1
 80049be:	607b      	str	r3, [r7, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f1      	bne.n	80049aa <mem_cpy+0x1a>
	}
}
 80049c6:	bf00      	nop
 80049c8:	371c      	adds	r7, #28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80049d2:	b480      	push	{r7}
 80049d4:	b087      	sub	sp, #28
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	1c5a      	adds	r2, r3, #1
 80049e6:	617a      	str	r2, [r7, #20]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	b2d2      	uxtb	r2, r2
 80049ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	3b01      	subs	r3, #1
 80049f2:	607b      	str	r3, [r7, #4]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d1f3      	bne.n	80049e2 <mem_set+0x10>
}
 80049fa:	bf00      	nop
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004a08:	b480      	push	{r7}
 8004a0a:	b089      	sub	sp, #36	; 0x24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	60f8      	str	r0, [r7, #12]
 8004a10:	60b9      	str	r1, [r7, #8]
 8004a12:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	61fb      	str	r3, [r7, #28]
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	61fa      	str	r2, [r7, #28]
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	4619      	mov	r1, r3
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	61ba      	str	r2, [r7, #24]
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	1acb      	subs	r3, r1, r3
 8004a34:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	607b      	str	r3, [r7, #4]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d002      	beq.n	8004a48 <mem_cmp+0x40>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d0eb      	beq.n	8004a20 <mem_cmp+0x18>

	return r;
 8004a48:	697b      	ldr	r3, [r7, #20]
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3724      	adds	r7, #36	; 0x24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004a56:	b480      	push	{r7}
 8004a58:	b083      	sub	sp, #12
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
 8004a5e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004a60:	e002      	b.n	8004a68 <chk_chr+0x12>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3301      	adds	r3, #1
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d005      	beq.n	8004a7c <chk_chr+0x26>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	461a      	mov	r2, r3
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d1f2      	bne.n	8004a62 <chk_chr+0xc>
	return *str;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	60bb      	str	r3, [r7, #8]
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	60fb      	str	r3, [r7, #12]
 8004a9e:	e029      	b.n	8004af4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004aa0:	4a27      	ldr	r2, [pc, #156]	; (8004b40 <chk_lock+0xb4>)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	4413      	add	r3, r2
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d01d      	beq.n	8004aea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004aae:	4a24      	ldr	r2, [pc, #144]	; (8004b40 <chk_lock+0xb4>)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	011b      	lsls	r3, r3, #4
 8004ab4:	4413      	add	r3, r2
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d116      	bne.n	8004aee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004ac0:	4a1f      	ldr	r2, [pc, #124]	; (8004b40 <chk_lock+0xb4>)
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	4413      	add	r3, r2
 8004ac8:	3304      	adds	r3, #4
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d10c      	bne.n	8004aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ad4:	4a1a      	ldr	r2, [pc, #104]	; (8004b40 <chk_lock+0xb4>)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	011b      	lsls	r3, r3, #4
 8004ada:	4413      	add	r3, r2
 8004adc:	3308      	adds	r3, #8
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d102      	bne.n	8004aee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004ae8:	e007      	b.n	8004afa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004aea:	2301      	movs	r3, #1
 8004aec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d9d2      	bls.n	8004aa0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d109      	bne.n	8004b14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d102      	bne.n	8004b0c <chk_lock+0x80>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d101      	bne.n	8004b10 <chk_lock+0x84>
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	e010      	b.n	8004b32 <chk_lock+0xa6>
 8004b10:	2312      	movs	r3, #18
 8004b12:	e00e      	b.n	8004b32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d108      	bne.n	8004b2c <chk_lock+0xa0>
 8004b1a:	4a09      	ldr	r2, [pc, #36]	; (8004b40 <chk_lock+0xb4>)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	011b      	lsls	r3, r3, #4
 8004b20:	4413      	add	r3, r2
 8004b22:	330c      	adds	r3, #12
 8004b24:	881b      	ldrh	r3, [r3, #0]
 8004b26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b2a:	d101      	bne.n	8004b30 <chk_lock+0xa4>
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	e000      	b.n	8004b32 <chk_lock+0xa6>
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3714      	adds	r7, #20
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop
 8004b40:	200000d4 	.word	0x200000d4

08004b44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	607b      	str	r3, [r7, #4]
 8004b4e:	e002      	b.n	8004b56 <enq_lock+0x12>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3301      	adds	r3, #1
 8004b54:	607b      	str	r3, [r7, #4]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d806      	bhi.n	8004b6a <enq_lock+0x26>
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <enq_lock+0x40>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	4413      	add	r3, r2
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f2      	bne.n	8004b50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b02      	cmp	r3, #2
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	200000d4 	.word	0x200000d4

08004b88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004b92:	2300      	movs	r3, #0
 8004b94:	60fb      	str	r3, [r7, #12]
 8004b96:	e01f      	b.n	8004bd8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004b98:	4a41      	ldr	r2, [pc, #260]	; (8004ca0 <inc_lock+0x118>)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	011b      	lsls	r3, r3, #4
 8004b9e:	4413      	add	r3, r2
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d113      	bne.n	8004bd2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004baa:	4a3d      	ldr	r2, [pc, #244]	; (8004ca0 <inc_lock+0x118>)
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d109      	bne.n	8004bd2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004bbe:	4a38      	ldr	r2, [pc, #224]	; (8004ca0 <inc_lock+0x118>)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	4413      	add	r3, r2
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d006      	beq.n	8004be0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d9dc      	bls.n	8004b98 <inc_lock+0x10>
 8004bde:	e000      	b.n	8004be2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004be0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d132      	bne.n	8004c4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004be8:	2300      	movs	r3, #0
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e002      	b.n	8004bf4 <inc_lock+0x6c>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d806      	bhi.n	8004c08 <inc_lock+0x80>
 8004bfa:	4a29      	ldr	r2, [pc, #164]	; (8004ca0 <inc_lock+0x118>)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	4413      	add	r3, r2
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f2      	bne.n	8004bee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d101      	bne.n	8004c12 <inc_lock+0x8a>
 8004c0e:	2300      	movs	r3, #0
 8004c10:	e040      	b.n	8004c94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	4922      	ldr	r1, [pc, #136]	; (8004ca0 <inc_lock+0x118>)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	440b      	add	r3, r1
 8004c1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689a      	ldr	r2, [r3, #8]
 8004c24:	491e      	ldr	r1, [pc, #120]	; (8004ca0 <inc_lock+0x118>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	011b      	lsls	r3, r3, #4
 8004c2a:	440b      	add	r3, r1
 8004c2c:	3304      	adds	r3, #4
 8004c2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	491a      	ldr	r1, [pc, #104]	; (8004ca0 <inc_lock+0x118>)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	011b      	lsls	r3, r3, #4
 8004c3a:	440b      	add	r3, r1
 8004c3c:	3308      	adds	r3, #8
 8004c3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004c40:	4a17      	ldr	r2, [pc, #92]	; (8004ca0 <inc_lock+0x118>)
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	011b      	lsls	r3, r3, #4
 8004c46:	4413      	add	r3, r2
 8004c48:	330c      	adds	r3, #12
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d009      	beq.n	8004c68 <inc_lock+0xe0>
 8004c54:	4a12      	ldr	r2, [pc, #72]	; (8004ca0 <inc_lock+0x118>)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	011b      	lsls	r3, r3, #4
 8004c5a:	4413      	add	r3, r2
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	881b      	ldrh	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <inc_lock+0xe0>
 8004c64:	2300      	movs	r3, #0
 8004c66:	e015      	b.n	8004c94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d108      	bne.n	8004c80 <inc_lock+0xf8>
 8004c6e:	4a0c      	ldr	r2, [pc, #48]	; (8004ca0 <inc_lock+0x118>)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	011b      	lsls	r3, r3, #4
 8004c74:	4413      	add	r3, r2
 8004c76:	330c      	adds	r3, #12
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	b29a      	uxth	r2, r3
 8004c7e:	e001      	b.n	8004c84 <inc_lock+0xfc>
 8004c80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c84:	4906      	ldr	r1, [pc, #24]	; (8004ca0 <inc_lock+0x118>)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	440b      	add	r3, r1
 8004c8c:	330c      	adds	r3, #12
 8004c8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr
 8004ca0:	200000d4 	.word	0x200000d4

08004ca4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d825      	bhi.n	8004d04 <dec_lock+0x60>
		n = Files[i].ctr;
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <dec_lock+0x74>)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	4413      	add	r3, r2
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	881b      	ldrh	r3, [r3, #0]
 8004cc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004cc6:	89fb      	ldrh	r3, [r7, #14]
 8004cc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ccc:	d101      	bne.n	8004cd2 <dec_lock+0x2e>
 8004cce:	2300      	movs	r3, #0
 8004cd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004cd2:	89fb      	ldrh	r3, [r7, #14]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d002      	beq.n	8004cde <dec_lock+0x3a>
 8004cd8:	89fb      	ldrh	r3, [r7, #14]
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004cde:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <dec_lock+0x74>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	89fa      	ldrh	r2, [r7, #14]
 8004cea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004cec:	89fb      	ldrh	r3, [r7, #14]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d105      	bne.n	8004cfe <dec_lock+0x5a>
 8004cf2:	4a09      	ldr	r2, [pc, #36]	; (8004d18 <dec_lock+0x74>)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	011b      	lsls	r3, r3, #4
 8004cf8:	4413      	add	r3, r2
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	737b      	strb	r3, [r7, #13]
 8004d02:	e001      	b.n	8004d08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004d04:	2302      	movs	r3, #2
 8004d06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004d08:	7b7b      	ldrb	r3, [r7, #13]
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	200000d4 	.word	0x200000d4

08004d1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]
 8004d28:	e010      	b.n	8004d4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004d2a:	4a0d      	ldr	r2, [pc, #52]	; (8004d60 <clear_lock+0x44>)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	011b      	lsls	r3, r3, #4
 8004d30:	4413      	add	r3, r2
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d105      	bne.n	8004d46 <clear_lock+0x2a>
 8004d3a:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <clear_lock+0x44>)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	011b      	lsls	r3, r3, #4
 8004d40:	4413      	add	r3, r2
 8004d42:	2200      	movs	r2, #0
 8004d44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d9eb      	bls.n	8004d2a <clear_lock+0xe>
	}
}
 8004d52:	bf00      	nop
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr
 8004d60:	200000d4 	.word	0x200000d4

08004d64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b086      	sub	sp, #24
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	78db      	ldrb	r3, [r3, #3]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d034      	beq.n	8004de2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	7858      	ldrb	r0, [r3, #1]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004d88:	2301      	movs	r3, #1
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	f7ff fd40 	bl	8004810 <disk_write>
 8004d90:	4603      	mov	r3, r0
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	73fb      	strb	r3, [r7, #15]
 8004d9a:	e022      	b.n	8004de2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	1ad2      	subs	r2, r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d217      	bcs.n	8004de2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	789b      	ldrb	r3, [r3, #2]
 8004db6:	613b      	str	r3, [r7, #16]
 8004db8:	e010      	b.n	8004ddc <sync_window+0x78>
					wsect += fs->fsize;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	697a      	ldr	r2, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	7858      	ldrb	r0, [r3, #1]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004dce:	2301      	movs	r3, #1
 8004dd0:	697a      	ldr	r2, [r7, #20]
 8004dd2:	f7ff fd1d 	bl	8004810 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	3b01      	subs	r3, #1
 8004dda:	613b      	str	r3, [r7, #16]
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d8eb      	bhi.n	8004dba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3718      	adds	r7, #24
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004df6:	2300      	movs	r3, #0
 8004df8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfe:	683a      	ldr	r2, [r7, #0]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d01b      	beq.n	8004e3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ffad 	bl	8004d64 <sync_window>
 8004e0a:	4603      	mov	r3, r0
 8004e0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8004e0e:	7bfb      	ldrb	r3, [r7, #15]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d113      	bne.n	8004e3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	7858      	ldrb	r0, [r3, #1]
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004e1e:	2301      	movs	r3, #1
 8004e20:	683a      	ldr	r2, [r7, #0]
 8004e22:	f7ff fcd5 	bl	80047d0 <disk_read>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	683a      	ldr	r2, [r7, #0]
 8004e3a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8004e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
	...

08004e48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	f7ff ff87 	bl	8004d64 <sync_window>
 8004e56:	4603      	mov	r3, r0
 8004e58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004e5a:	7bfb      	ldrb	r3, [r7, #15]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d159      	bne.n	8004f14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	781b      	ldrb	r3, [r3, #0]
 8004e64:	2b03      	cmp	r3, #3
 8004e66:	d149      	bne.n	8004efc <sync_fs+0xb4>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	791b      	ldrb	r3, [r3, #4]
 8004e6c:	2b01      	cmp	r3, #1
 8004e6e:	d145      	bne.n	8004efc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	899b      	ldrh	r3, [r3, #12]
 8004e7a:	461a      	mov	r2, r3
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	f7ff fda8 	bl	80049d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3338      	adds	r3, #56	; 0x38
 8004e86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004e8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f7ff fd37 	bl	8004902 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	3338      	adds	r3, #56	; 0x38
 8004e98:	4921      	ldr	r1, [pc, #132]	; (8004f20 <sync_fs+0xd8>)
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7ff fd4c 	bl	8004938 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3338      	adds	r3, #56	; 0x38
 8004ea4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004ea8:	491e      	ldr	r1, [pc, #120]	; (8004f24 <sync_fs+0xdc>)
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f7ff fd44 	bl	8004938 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3338      	adds	r3, #56	; 0x38
 8004eb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	699b      	ldr	r3, [r3, #24]
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	f7ff fd3a 	bl	8004938 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3338      	adds	r3, #56	; 0x38
 8004ec8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	4619      	mov	r1, r3
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	f7ff fd30 	bl	8004938 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004edc:	1c5a      	adds	r2, r3, #1
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	7858      	ldrb	r0, [r3, #1]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f7ff fc8d 	bl	8004810 <disk_write>
			fs->fsi_flag = 0;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	785b      	ldrb	r3, [r3, #1]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2100      	movs	r1, #0
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7ff fca3 	bl	8004850 <disk_ioctl>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <sync_fs+0xcc>
 8004f10:	2301      	movs	r3, #1
 8004f12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	41615252 	.word	0x41615252
 8004f24:	61417272 	.word	0x61417272

08004f28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b083      	sub	sp, #12
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	3b02      	subs	r3, #2
 8004f36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	3b02      	subs	r3, #2
 8004f3e:	683a      	ldr	r2, [r7, #0]
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d301      	bcc.n	8004f48 <clust2sect+0x20>
 8004f44:	2300      	movs	r3, #0
 8004f46:	e008      	b.n	8004f5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	895b      	ldrh	r3, [r3, #10]
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	fb03 f202 	mul.w	r2, r3, r2
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f58:	4413      	add	r3, r2
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d904      	bls.n	8004f86 <get_fat+0x20>
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d302      	bcc.n	8004f8c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004f86:	2301      	movs	r3, #1
 8004f88:	617b      	str	r3, [r7, #20]
 8004f8a:	e0bb      	b.n	8005104 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8004f8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004f90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	2b03      	cmp	r3, #3
 8004f98:	f000 8083 	beq.w	80050a2 <get_fat+0x13c>
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	f300 80a7 	bgt.w	80050f0 <get_fat+0x18a>
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d002      	beq.n	8004fac <get_fat+0x46>
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d056      	beq.n	8005058 <get_fat+0xf2>
 8004faa:	e0a1      	b.n	80050f0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	085b      	lsrs	r3, r3, #1
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	899b      	ldrh	r3, [r3, #12]
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004fca:	4413      	add	r3, r2
 8004fcc:	4619      	mov	r1, r3
 8004fce:	6938      	ldr	r0, [r7, #16]
 8004fd0:	f7ff ff0c 	bl	8004dec <move_window>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f040 808d 	bne.w	80050f6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	60fa      	str	r2, [r7, #12]
 8004fe2:	693a      	ldr	r2, [r7, #16]
 8004fe4:	8992      	ldrh	r2, [r2, #12]
 8004fe6:	fbb3 f1f2 	udiv	r1, r3, r2
 8004fea:	fb02 f201 	mul.w	r2, r2, r1
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	693a      	ldr	r2, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004ff8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	899b      	ldrh	r3, [r3, #12]
 8005002:	4619      	mov	r1, r3
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	fbb3 f3f1 	udiv	r3, r3, r1
 800500a:	4413      	add	r3, r2
 800500c:	4619      	mov	r1, r3
 800500e:	6938      	ldr	r0, [r7, #16]
 8005010:	f7ff feec 	bl	8004dec <move_window>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d16f      	bne.n	80050fa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800501a:	693b      	ldr	r3, [r7, #16]
 800501c:	899b      	ldrh	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	fbb3 f1f2 	udiv	r1, r3, r2
 8005026:	fb02 f201 	mul.w	r2, r2, r1
 800502a:	1a9b      	subs	r3, r3, r2
 800502c:	693a      	ldr	r2, [r7, #16]
 800502e:	4413      	add	r3, r2
 8005030:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005034:	021b      	lsls	r3, r3, #8
 8005036:	461a      	mov	r2, r3
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	4313      	orrs	r3, r2
 800503c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	f003 0301 	and.w	r3, r3, #1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d002      	beq.n	800504e <get_fat+0xe8>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	e002      	b.n	8005054 <get_fat+0xee>
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005054:	617b      	str	r3, [r7, #20]
			break;
 8005056:	e055      	b.n	8005104 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005058:	693b      	ldr	r3, [r7, #16]
 800505a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	899b      	ldrh	r3, [r3, #12]
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	b29b      	uxth	r3, r3
 8005064:	4619      	mov	r1, r3
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	fbb3 f3f1 	udiv	r3, r3, r1
 800506c:	4413      	add	r3, r2
 800506e:	4619      	mov	r1, r3
 8005070:	6938      	ldr	r0, [r7, #16]
 8005072:	f7ff febb 	bl	8004dec <move_window>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d140      	bne.n	80050fe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	8992      	ldrh	r2, [r2, #12]
 800508a:	fbb3 f0f2 	udiv	r0, r3, r2
 800508e:	fb02 f200 	mul.w	r2, r2, r0
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	440b      	add	r3, r1
 8005096:	4618      	mov	r0, r3
 8005098:	f7ff fbf8 	bl	800488c <ld_word>
 800509c:	4603      	mov	r3, r0
 800509e:	617b      	str	r3, [r7, #20]
			break;
 80050a0:	e030      	b.n	8005104 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	899b      	ldrh	r3, [r3, #12]
 80050aa:	089b      	lsrs	r3, r3, #2
 80050ac:	b29b      	uxth	r3, r3
 80050ae:	4619      	mov	r1, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050b6:	4413      	add	r3, r2
 80050b8:	4619      	mov	r1, r3
 80050ba:	6938      	ldr	r0, [r7, #16]
 80050bc:	f7ff fe96 	bl	8004dec <move_window>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d11d      	bne.n	8005102 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	8992      	ldrh	r2, [r2, #12]
 80050d4:	fbb3 f0f2 	udiv	r0, r3, r2
 80050d8:	fb02 f200 	mul.w	r2, r2, r0
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	440b      	add	r3, r1
 80050e0:	4618      	mov	r0, r3
 80050e2:	f7ff fbeb 	bl	80048bc <ld_dword>
 80050e6:	4603      	mov	r3, r0
 80050e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80050ec:	617b      	str	r3, [r7, #20]
			break;
 80050ee:	e009      	b.n	8005104 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80050f0:	2301      	movs	r3, #1
 80050f2:	617b      	str	r3, [r7, #20]
 80050f4:	e006      	b.n	8005104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050f6:	bf00      	nop
 80050f8:	e004      	b.n	8005104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80050fa:	bf00      	nop
 80050fc:	e002      	b.n	8005104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80050fe:	bf00      	nop
 8005100:	e000      	b.n	8005104 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005102:	bf00      	nop
		}
	}

	return val;
 8005104:	697b      	ldr	r3, [r7, #20]
}
 8005106:	4618      	mov	r0, r3
 8005108:	3718      	adds	r7, #24
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800510e:	b590      	push	{r4, r7, lr}
 8005110:	b089      	sub	sp, #36	; 0x24
 8005112:	af00      	add	r7, sp, #0
 8005114:	60f8      	str	r0, [r7, #12]
 8005116:	60b9      	str	r1, [r7, #8]
 8005118:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800511a:	2302      	movs	r3, #2
 800511c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	f240 8102 	bls.w	800532a <put_fat+0x21c>
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	429a      	cmp	r2, r3
 800512e:	f080 80fc 	bcs.w	800532a <put_fat+0x21c>
		switch (fs->fs_type) {
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	2b03      	cmp	r3, #3
 8005138:	f000 80b6 	beq.w	80052a8 <put_fat+0x19a>
 800513c:	2b03      	cmp	r3, #3
 800513e:	f300 80fd 	bgt.w	800533c <put_fat+0x22e>
 8005142:	2b01      	cmp	r3, #1
 8005144:	d003      	beq.n	800514e <put_fat+0x40>
 8005146:	2b02      	cmp	r3, #2
 8005148:	f000 8083 	beq.w	8005252 <put_fat+0x144>
 800514c:	e0f6      	b.n	800533c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	085b      	lsrs	r3, r3, #1
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	4413      	add	r3, r2
 800515a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	899b      	ldrh	r3, [r3, #12]
 8005164:	4619      	mov	r1, r3
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	fbb3 f3f1 	udiv	r3, r3, r1
 800516c:	4413      	add	r3, r2
 800516e:	4619      	mov	r1, r3
 8005170:	68f8      	ldr	r0, [r7, #12]
 8005172:	f7ff fe3b 	bl	8004dec <move_window>
 8005176:	4603      	mov	r3, r0
 8005178:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800517a:	7ffb      	ldrb	r3, [r7, #31]
 800517c:	2b00      	cmp	r3, #0
 800517e:	f040 80d6 	bne.w	800532e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	1c5a      	adds	r2, r3, #1
 800518c:	61ba      	str	r2, [r7, #24]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	8992      	ldrh	r2, [r2, #12]
 8005192:	fbb3 f0f2 	udiv	r0, r3, r2
 8005196:	fb02 f200 	mul.w	r2, r2, r0
 800519a:	1a9b      	subs	r3, r3, r2
 800519c:	440b      	add	r3, r1
 800519e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <put_fat+0xb8>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b25b      	sxtb	r3, r3
 80051b0:	f003 030f 	and.w	r3, r3, #15
 80051b4:	b25a      	sxtb	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	b25b      	sxtb	r3, r3
 80051be:	4313      	orrs	r3, r2
 80051c0:	b25b      	sxtb	r3, r3
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	e001      	b.n	80051ca <put_fat+0xbc>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	b2db      	uxtb	r3, r3
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2201      	movs	r2, #1
 80051d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	899b      	ldrh	r3, [r3, #12]
 80051dc:	4619      	mov	r1, r3
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	fbb3 f3f1 	udiv	r3, r3, r1
 80051e4:	4413      	add	r3, r2
 80051e6:	4619      	mov	r1, r3
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	f7ff fdff 	bl	8004dec <move_window>
 80051ee:	4603      	mov	r3, r0
 80051f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80051f2:	7ffb      	ldrb	r3, [r7, #31]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	f040 809c 	bne.w	8005332 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	899b      	ldrh	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	69bb      	ldr	r3, [r7, #24]
 8005208:	fbb3 f0f2 	udiv	r0, r3, r2
 800520c:	fb02 f200 	mul.w	r2, r2, r0
 8005210:	1a9b      	subs	r3, r3, r2
 8005212:	440b      	add	r3, r1
 8005214:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	d003      	beq.n	8005228 <put_fat+0x11a>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	091b      	lsrs	r3, r3, #4
 8005224:	b2db      	uxtb	r3, r3
 8005226:	e00e      	b.n	8005246 <put_fat+0x138>
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	b25b      	sxtb	r3, r3
 800522e:	f023 030f 	bic.w	r3, r3, #15
 8005232:	b25a      	sxtb	r2, r3
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	b25b      	sxtb	r3, r3
 800523a:	f003 030f 	and.w	r3, r3, #15
 800523e:	b25b      	sxtb	r3, r3
 8005240:	4313      	orrs	r3, r2
 8005242:	b25b      	sxtb	r3, r3
 8005244:	b2db      	uxtb	r3, r3
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2201      	movs	r2, #1
 800524e:	70da      	strb	r2, [r3, #3]
			break;
 8005250:	e074      	b.n	800533c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	899b      	ldrh	r3, [r3, #12]
 800525a:	085b      	lsrs	r3, r3, #1
 800525c:	b29b      	uxth	r3, r3
 800525e:	4619      	mov	r1, r3
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	fbb3 f3f1 	udiv	r3, r3, r1
 8005266:	4413      	add	r3, r2
 8005268:	4619      	mov	r1, r3
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f7ff fdbe 	bl	8004dec <move_window>
 8005270:	4603      	mov	r3, r0
 8005272:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005274:	7ffb      	ldrb	r3, [r7, #31]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d15d      	bne.n	8005336 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	005b      	lsls	r3, r3, #1
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	8992      	ldrh	r2, [r2, #12]
 8005288:	fbb3 f0f2 	udiv	r0, r3, r2
 800528c:	fb02 f200 	mul.w	r2, r2, r0
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	440b      	add	r3, r1
 8005294:	687a      	ldr	r2, [r7, #4]
 8005296:	b292      	uxth	r2, r2
 8005298:	4611      	mov	r1, r2
 800529a:	4618      	mov	r0, r3
 800529c:	f7ff fb31 	bl	8004902 <st_word>
			fs->wflag = 1;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2201      	movs	r2, #1
 80052a4:	70da      	strb	r2, [r3, #3]
			break;
 80052a6:	e049      	b.n	800533c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	899b      	ldrh	r3, [r3, #12]
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	4619      	mov	r1, r3
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	fbb3 f3f1 	udiv	r3, r3, r1
 80052bc:	4413      	add	r3, r2
 80052be:	4619      	mov	r1, r3
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f7ff fd93 	bl	8004dec <move_window>
 80052c6:	4603      	mov	r3, r0
 80052c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d134      	bne.n	800533a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052dc:	68bb      	ldr	r3, [r7, #8]
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	8992      	ldrh	r2, [r2, #12]
 80052e4:	fbb3 f0f2 	udiv	r0, r3, r2
 80052e8:	fb02 f200 	mul.w	r2, r2, r0
 80052ec:	1a9b      	subs	r3, r3, r2
 80052ee:	440b      	add	r3, r1
 80052f0:	4618      	mov	r0, r3
 80052f2:	f7ff fae3 	bl	80048bc <ld_dword>
 80052f6:	4603      	mov	r3, r0
 80052f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80052fc:	4323      	orrs	r3, r4
 80052fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	8992      	ldrh	r2, [r2, #12]
 800530e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005312:	fb02 f200 	mul.w	r2, r2, r0
 8005316:	1a9b      	subs	r3, r3, r2
 8005318:	440b      	add	r3, r1
 800531a:	6879      	ldr	r1, [r7, #4]
 800531c:	4618      	mov	r0, r3
 800531e:	f7ff fb0b 	bl	8004938 <st_dword>
			fs->wflag = 1;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2201      	movs	r2, #1
 8005326:	70da      	strb	r2, [r3, #3]
			break;
 8005328:	e008      	b.n	800533c <put_fat+0x22e>
		}
	}
 800532a:	bf00      	nop
 800532c:	e006      	b.n	800533c <put_fat+0x22e>
			if (res != FR_OK) break;
 800532e:	bf00      	nop
 8005330:	e004      	b.n	800533c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005332:	bf00      	nop
 8005334:	e002      	b.n	800533c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005336:	bf00      	nop
 8005338:	e000      	b.n	800533c <put_fat+0x22e>
			if (res != FR_OK) break;
 800533a:	bf00      	nop
	return res;
 800533c:	7ffb      	ldrb	r3, [r7, #31]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3724      	adds	r7, #36	; 0x24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd90      	pop	{r4, r7, pc}

08005346 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005346:	b580      	push	{r7, lr}
 8005348:	b088      	sub	sp, #32
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d904      	bls.n	800536c <remove_chain+0x26>
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	429a      	cmp	r2, r3
 800536a:	d301      	bcc.n	8005370 <remove_chain+0x2a>
 800536c:	2302      	movs	r3, #2
 800536e:	e04b      	b.n	8005408 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00c      	beq.n	8005390 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005376:	f04f 32ff 	mov.w	r2, #4294967295
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	69b8      	ldr	r0, [r7, #24]
 800537e:	f7ff fec6 	bl	800510e <put_fat>
 8005382:	4603      	mov	r3, r0
 8005384:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005386:	7ffb      	ldrb	r3, [r7, #31]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d001      	beq.n	8005390 <remove_chain+0x4a>
 800538c:	7ffb      	ldrb	r3, [r7, #31]
 800538e:	e03b      	b.n	8005408 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005390:	68b9      	ldr	r1, [r7, #8]
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f7ff fde7 	bl	8004f66 <get_fat>
 8005398:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d031      	beq.n	8005404 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2b01      	cmp	r3, #1
 80053a4:	d101      	bne.n	80053aa <remove_chain+0x64>
 80053a6:	2302      	movs	r3, #2
 80053a8:	e02e      	b.n	8005408 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053b0:	d101      	bne.n	80053b6 <remove_chain+0x70>
 80053b2:	2301      	movs	r3, #1
 80053b4:	e028      	b.n	8005408 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80053b6:	2200      	movs	r2, #0
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	69b8      	ldr	r0, [r7, #24]
 80053bc:	f7ff fea7 	bl	800510e <put_fat>
 80053c0:	4603      	mov	r3, r0
 80053c2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80053c4:	7ffb      	ldrb	r3, [r7, #31]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d001      	beq.n	80053ce <remove_chain+0x88>
 80053ca:	7ffb      	ldrb	r3, [r7, #31]
 80053cc:	e01c      	b.n	8005408 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	699a      	ldr	r2, [r3, #24]
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	3b02      	subs	r3, #2
 80053d8:	429a      	cmp	r2, r3
 80053da:	d20b      	bcs.n	80053f4 <remove_chain+0xae>
			fs->free_clst++;
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	791b      	ldrb	r3, [r3, #4]
 80053ea:	f043 0301 	orr.w	r3, r3, #1
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	69db      	ldr	r3, [r3, #28]
 80053fc:	68ba      	ldr	r2, [r7, #8]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d3c6      	bcc.n	8005390 <remove_chain+0x4a>
 8005402:	e000      	b.n	8005406 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005404:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3720      	adds	r7, #32
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b088      	sub	sp, #32
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
 8005418:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10d      	bne.n	8005442 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d004      	beq.n	800543c <create_chain+0x2c>
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	69ba      	ldr	r2, [r7, #24]
 8005438:	429a      	cmp	r2, r3
 800543a:	d31b      	bcc.n	8005474 <create_chain+0x64>
 800543c:	2301      	movs	r3, #1
 800543e:	61bb      	str	r3, [r7, #24]
 8005440:	e018      	b.n	8005474 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005442:	6839      	ldr	r1, [r7, #0]
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff fd8e 	bl	8004f66 <get_fat>
 800544a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d801      	bhi.n	8005456 <create_chain+0x46>
 8005452:	2301      	movs	r3, #1
 8005454:	e070      	b.n	8005538 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800545c:	d101      	bne.n	8005462 <create_chain+0x52>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	e06a      	b.n	8005538 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	69db      	ldr	r3, [r3, #28]
 8005466:	68fa      	ldr	r2, [r7, #12]
 8005468:	429a      	cmp	r2, r3
 800546a:	d201      	bcs.n	8005470 <create_chain+0x60>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	e063      	b.n	8005538 <create_chain+0x128>
		scl = clst;
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	3301      	adds	r3, #1
 800547c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	69fa      	ldr	r2, [r7, #28]
 8005484:	429a      	cmp	r2, r3
 8005486:	d307      	bcc.n	8005498 <create_chain+0x88>
				ncl = 2;
 8005488:	2302      	movs	r3, #2
 800548a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800548c:	69fa      	ldr	r2, [r7, #28]
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	429a      	cmp	r2, r3
 8005492:	d901      	bls.n	8005498 <create_chain+0x88>
 8005494:	2300      	movs	r3, #0
 8005496:	e04f      	b.n	8005538 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005498:	69f9      	ldr	r1, [r7, #28]
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f7ff fd63 	bl	8004f66 <get_fat>
 80054a0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00e      	beq.n	80054c6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b01      	cmp	r3, #1
 80054ac:	d003      	beq.n	80054b6 <create_chain+0xa6>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054b4:	d101      	bne.n	80054ba <create_chain+0xaa>
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	e03e      	b.n	8005538 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80054ba:	69fa      	ldr	r2, [r7, #28]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d1da      	bne.n	8005478 <create_chain+0x68>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e038      	b.n	8005538 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80054c6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80054c8:	f04f 32ff 	mov.w	r2, #4294967295
 80054cc:	69f9      	ldr	r1, [r7, #28]
 80054ce:	6938      	ldr	r0, [r7, #16]
 80054d0:	f7ff fe1d 	bl	800510e <put_fat>
 80054d4:	4603      	mov	r3, r0
 80054d6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d109      	bne.n	80054f2 <create_chain+0xe2>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d006      	beq.n	80054f2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	6839      	ldr	r1, [r7, #0]
 80054e8:	6938      	ldr	r0, [r7, #16]
 80054ea:	f7ff fe10 	bl	800510e <put_fat>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d116      	bne.n	8005526 <create_chain+0x116>
		fs->last_clst = ncl;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	69fa      	ldr	r2, [r7, #28]
 80054fc:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	699a      	ldr	r2, [r3, #24]
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	69db      	ldr	r3, [r3, #28]
 8005506:	3b02      	subs	r3, #2
 8005508:	429a      	cmp	r2, r3
 800550a:	d804      	bhi.n	8005516 <create_chain+0x106>
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	699b      	ldr	r3, [r3, #24]
 8005510:	1e5a      	subs	r2, r3, #1
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	791b      	ldrb	r3, [r3, #4]
 800551a:	f043 0301 	orr.w	r3, r3, #1
 800551e:	b2da      	uxtb	r2, r3
 8005520:	693b      	ldr	r3, [r7, #16]
 8005522:	711a      	strb	r2, [r3, #4]
 8005524:	e007      	b.n	8005536 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005526:	7dfb      	ldrb	r3, [r7, #23]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d102      	bne.n	8005532 <create_chain+0x122>
 800552c:	f04f 33ff 	mov.w	r3, #4294967295
 8005530:	e000      	b.n	8005534 <create_chain+0x124>
 8005532:	2301      	movs	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005536:	69fb      	ldr	r3, [r7, #28]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3720      	adds	r7, #32
 800553c:	46bd      	mov	sp, r7
 800553e:	bd80      	pop	{r7, pc}

08005540 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005540:	b480      	push	{r7}
 8005542:	b087      	sub	sp, #28
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005554:	3304      	adds	r3, #4
 8005556:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	899b      	ldrh	r3, [r3, #12]
 800555c:	461a      	mov	r2, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	fbb3 f3f2 	udiv	r3, r3, r2
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	8952      	ldrh	r2, [r2, #10]
 8005568:	fbb3 f3f2 	udiv	r3, r3, r2
 800556c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	613a      	str	r2, [r7, #16]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <clmt_clust+0x42>
 800557e:	2300      	movs	r3, #0
 8005580:	e010      	b.n	80055a4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	429a      	cmp	r2, r3
 8005588:	d307      	bcc.n	800559a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	1ad3      	subs	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3304      	adds	r3, #4
 8005596:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005598:	e7e9      	b.n	800556e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800559a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	4413      	add	r3, r2
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	371c      	adds	r7, #28
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055c6:	d204      	bcs.n	80055d2 <dir_sdi+0x22>
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	f003 031f 	and.w	r3, r3, #31
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d001      	beq.n	80055d6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80055d2:	2302      	movs	r3, #2
 80055d4:	e071      	b.n	80056ba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d106      	bne.n	80055f6 <dir_sdi+0x46>
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d902      	bls.n	80055f6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10c      	bne.n	8005616 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	095b      	lsrs	r3, r3, #5
 8005600:	693a      	ldr	r2, [r7, #16]
 8005602:	8912      	ldrh	r2, [r2, #8]
 8005604:	4293      	cmp	r3, r2
 8005606:	d301      	bcc.n	800560c <dir_sdi+0x5c>
 8005608:	2302      	movs	r3, #2
 800560a:	e056      	b.n	80056ba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	61da      	str	r2, [r3, #28]
 8005614:	e02d      	b.n	8005672 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	895b      	ldrh	r3, [r3, #10]
 800561a:	461a      	mov	r2, r3
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	899b      	ldrh	r3, [r3, #12]
 8005620:	fb03 f302 	mul.w	r3, r3, r2
 8005624:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005626:	e019      	b.n	800565c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6979      	ldr	r1, [r7, #20]
 800562c:	4618      	mov	r0, r3
 800562e:	f7ff fc9a 	bl	8004f66 <get_fat>
 8005632:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f1b3 3fff 	cmp.w	r3, #4294967295
 800563a:	d101      	bne.n	8005640 <dir_sdi+0x90>
 800563c:	2301      	movs	r3, #1
 800563e:	e03c      	b.n	80056ba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b01      	cmp	r3, #1
 8005644:	d904      	bls.n	8005650 <dir_sdi+0xa0>
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	697a      	ldr	r2, [r7, #20]
 800564c:	429a      	cmp	r2, r3
 800564e:	d301      	bcc.n	8005654 <dir_sdi+0xa4>
 8005650:	2302      	movs	r3, #2
 8005652:	e032      	b.n	80056ba <dir_sdi+0x10a>
			ofs -= csz;
 8005654:	683a      	ldr	r2, [r7, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800565c:	683a      	ldr	r2, [r7, #0]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	429a      	cmp	r2, r3
 8005662:	d2e1      	bcs.n	8005628 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005664:	6979      	ldr	r1, [r7, #20]
 8005666:	6938      	ldr	r0, [r7, #16]
 8005668:	f7ff fc5e 	bl	8004f28 <clust2sect>
 800566c:	4602      	mov	r2, r0
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d101      	bne.n	8005684 <dir_sdi+0xd4>
 8005680:	2302      	movs	r3, #2
 8005682:	e01a      	b.n	80056ba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	69da      	ldr	r2, [r3, #28]
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	899b      	ldrh	r3, [r3, #12]
 800568c:	4619      	mov	r1, r3
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	fbb3 f3f1 	udiv	r3, r3, r1
 8005694:	441a      	add	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	899b      	ldrh	r3, [r3, #12]
 80056a4:	461a      	mov	r2, r3
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80056ac:	fb02 f200 	mul.w	r2, r2, r0
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	18ca      	adds	r2, r1, r3
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80056b8:	2300      	movs	r3, #0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3718      	adds	r7, #24
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b086      	sub	sp, #24
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	695b      	ldr	r3, [r3, #20]
 80056d6:	3320      	adds	r3, #32
 80056d8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d003      	beq.n	80056ea <dir_next+0x28>
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80056e8:	d301      	bcc.n	80056ee <dir_next+0x2c>
 80056ea:	2304      	movs	r3, #4
 80056ec:	e0bb      	b.n	8005866 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	899b      	ldrh	r3, [r3, #12]
 80056f2:	461a      	mov	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80056fa:	fb02 f201 	mul.w	r2, r2, r1
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	2b00      	cmp	r3, #0
 8005702:	f040 809d 	bne.w	8005840 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10b      	bne.n	8005730 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	8912      	ldrh	r2, [r2, #8]
 8005720:	4293      	cmp	r3, r2
 8005722:	f0c0 808d 	bcc.w	8005840 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	61da      	str	r2, [r3, #28]
 800572c:	2304      	movs	r3, #4
 800572e:	e09a      	b.n	8005866 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	899b      	ldrh	r3, [r3, #12]
 8005734:	461a      	mov	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	fbb3 f3f2 	udiv	r3, r3, r2
 800573c:	68fa      	ldr	r2, [r7, #12]
 800573e:	8952      	ldrh	r2, [r2, #10]
 8005740:	3a01      	subs	r2, #1
 8005742:	4013      	ands	r3, r2
 8005744:	2b00      	cmp	r3, #0
 8005746:	d17b      	bne.n	8005840 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	4619      	mov	r1, r3
 8005750:	4610      	mov	r0, r2
 8005752:	f7ff fc08 	bl	8004f66 <get_fat>
 8005756:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	2b01      	cmp	r3, #1
 800575c:	d801      	bhi.n	8005762 <dir_next+0xa0>
 800575e:	2302      	movs	r3, #2
 8005760:	e081      	b.n	8005866 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005768:	d101      	bne.n	800576e <dir_next+0xac>
 800576a:	2301      	movs	r3, #1
 800576c:	e07b      	b.n	8005866 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	69db      	ldr	r3, [r3, #28]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	429a      	cmp	r2, r3
 8005776:	d359      	bcc.n	800582c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	61da      	str	r2, [r3, #28]
 8005784:	2304      	movs	r3, #4
 8005786:	e06e      	b.n	8005866 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	4619      	mov	r1, r3
 8005790:	4610      	mov	r0, r2
 8005792:	f7ff fe3d 	bl	8005410 <create_chain>
 8005796:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d101      	bne.n	80057a2 <dir_next+0xe0>
 800579e:	2307      	movs	r3, #7
 80057a0:	e061      	b.n	8005866 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d101      	bne.n	80057ac <dir_next+0xea>
 80057a8:	2302      	movs	r3, #2
 80057aa:	e05c      	b.n	8005866 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b2:	d101      	bne.n	80057b8 <dir_next+0xf6>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e056      	b.n	8005866 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f7ff fad3 	bl	8004d64 <sync_window>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <dir_next+0x106>
 80057c4:	2301      	movs	r3, #1
 80057c6:	e04e      	b.n	8005866 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	899b      	ldrh	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	2100      	movs	r1, #0
 80057d6:	f7ff f8fc 	bl	80049d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80057da:	2300      	movs	r3, #0
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	68f8      	ldr	r0, [r7, #12]
 80057e2:	f7ff fba1 	bl	8004f28 <clust2sect>
 80057e6:	4602      	mov	r2, r0
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	635a      	str	r2, [r3, #52]	; 0x34
 80057ec:	e012      	b.n	8005814 <dir_next+0x152>
						fs->wflag = 1;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2201      	movs	r2, #1
 80057f2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f7ff fab5 	bl	8004d64 <sync_window>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <dir_next+0x142>
 8005800:	2301      	movs	r3, #1
 8005802:	e030      	b.n	8005866 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005804:	693b      	ldr	r3, [r7, #16]
 8005806:	3301      	adds	r3, #1
 8005808:	613b      	str	r3, [r7, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800580e:	1c5a      	adds	r2, r3, #1
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	635a      	str	r2, [r3, #52]	; 0x34
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	895b      	ldrh	r3, [r3, #10]
 8005818:	461a      	mov	r2, r3
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	4293      	cmp	r3, r2
 800581e:	d3e6      	bcc.n	80057ee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	1ad2      	subs	r2, r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005832:	6979      	ldr	r1, [r7, #20]
 8005834:	68f8      	ldr	r0, [r7, #12]
 8005836:	f7ff fb77 	bl	8004f28 <clust2sect>
 800583a:	4602      	mov	r2, r0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	899b      	ldrh	r3, [r3, #12]
 8005850:	461a      	mov	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	fbb3 f0f2 	udiv	r0, r3, r2
 8005858:	fb02 f200 	mul.w	r2, r2, r0
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	18ca      	adds	r2, r1, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005864:	2300      	movs	r3, #0
}
 8005866:	4618      	mov	r0, r3
 8005868:	3718      	adds	r7, #24
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800586e:	b580      	push	{r7, lr}
 8005870:	b086      	sub	sp, #24
 8005872:	af00      	add	r7, sp, #0
 8005874:	6078      	str	r0, [r7, #4]
 8005876:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800587e:	2100      	movs	r1, #0
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff fe95 	bl	80055b0 <dir_sdi>
 8005886:	4603      	mov	r3, r0
 8005888:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800588a:	7dfb      	ldrb	r3, [r7, #23]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d12b      	bne.n	80058e8 <dir_alloc+0x7a>
		n = 0;
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	69db      	ldr	r3, [r3, #28]
 8005898:	4619      	mov	r1, r3
 800589a:	68f8      	ldr	r0, [r7, #12]
 800589c:	f7ff faa6 	bl	8004dec <move_window>
 80058a0:	4603      	mov	r3, r0
 80058a2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80058a4:	7dfb      	ldrb	r3, [r7, #23]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d11d      	bne.n	80058e6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a1b      	ldr	r3, [r3, #32]
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	2be5      	cmp	r3, #229	; 0xe5
 80058b2:	d004      	beq.n	80058be <dir_alloc+0x50>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6a1b      	ldr	r3, [r3, #32]
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d107      	bne.n	80058ce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	3301      	adds	r3, #1
 80058c2:	613b      	str	r3, [r7, #16]
 80058c4:	693a      	ldr	r2, [r7, #16]
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d102      	bne.n	80058d2 <dir_alloc+0x64>
 80058cc:	e00c      	b.n	80058e8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80058ce:	2300      	movs	r3, #0
 80058d0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80058d2:	2101      	movs	r1, #1
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f7ff fef4 	bl	80056c2 <dir_next>
 80058da:	4603      	mov	r3, r0
 80058dc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0d7      	beq.n	8005894 <dir_alloc+0x26>
 80058e4:	e000      	b.n	80058e8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80058e6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80058e8:	7dfb      	ldrb	r3, [r7, #23]
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d101      	bne.n	80058f2 <dir_alloc+0x84>
 80058ee:	2307      	movs	r3, #7
 80058f0:	75fb      	strb	r3, [r7, #23]
	return res;
 80058f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3718      	adds	r7, #24
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b084      	sub	sp, #16
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
 8005904:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	331a      	adds	r3, #26
 800590a:	4618      	mov	r0, r3
 800590c:	f7fe ffbe 	bl	800488c <ld_word>
 8005910:	4603      	mov	r3, r0
 8005912:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	781b      	ldrb	r3, [r3, #0]
 8005918:	2b03      	cmp	r3, #3
 800591a:	d109      	bne.n	8005930 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	4618      	mov	r0, r3
 8005922:	f7fe ffb3 	bl	800488c <ld_word>
 8005926:	4603      	mov	r3, r0
 8005928:	041b      	lsls	r3, r3, #16
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	4313      	orrs	r3, r2
 800592e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005930:	68fb      	ldr	r3, [r7, #12]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	60f8      	str	r0, [r7, #12]
 8005942:	60b9      	str	r1, [r7, #8]
 8005944:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	331a      	adds	r3, #26
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	b292      	uxth	r2, r2
 800594e:	4611      	mov	r1, r2
 8005950:	4618      	mov	r0, r3
 8005952:	f7fe ffd6 	bl	8004902 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	781b      	ldrb	r3, [r3, #0]
 800595a:	2b03      	cmp	r3, #3
 800595c:	d109      	bne.n	8005972 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	f103 0214 	add.w	r2, r3, #20
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	0c1b      	lsrs	r3, r3, #16
 8005968:	b29b      	uxth	r3, r3
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f7fe ffc8 	bl	8004902 <st_word>
	}
}
 8005972:	bf00      	nop
 8005974:	3710      	adds	r7, #16
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}
	...

0800597c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800597c:	b590      	push	{r4, r7, lr}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	331a      	adds	r3, #26
 800598a:	4618      	mov	r0, r3
 800598c:	f7fe ff7e 	bl	800488c <ld_word>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <cmp_lfn+0x1e>
 8005996:	2300      	movs	r3, #0
 8005998:	e059      	b.n	8005a4e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80059a2:	1e5a      	subs	r2, r3, #1
 80059a4:	4613      	mov	r3, r2
 80059a6:	005b      	lsls	r3, r3, #1
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	4413      	add	r3, r2
 80059ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80059b0:	2301      	movs	r3, #1
 80059b2:	81fb      	strh	r3, [r7, #14]
 80059b4:	2300      	movs	r3, #0
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	e033      	b.n	8005a22 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80059ba:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <cmp_lfn+0xdc>)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	4413      	add	r3, r2
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	461a      	mov	r2, r3
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	4413      	add	r3, r2
 80059c8:	4618      	mov	r0, r3
 80059ca:	f7fe ff5f 	bl	800488c <ld_word>
 80059ce:	4603      	mov	r3, r0
 80059d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80059d2:	89fb      	ldrh	r3, [r7, #14]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d01a      	beq.n	8005a0e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	2bfe      	cmp	r3, #254	; 0xfe
 80059dc:	d812      	bhi.n	8005a04 <cmp_lfn+0x88>
 80059de:	89bb      	ldrh	r3, [r7, #12]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f002 f853 	bl	8007a8c <ff_wtoupper>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461c      	mov	r4, r3
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	617a      	str	r2, [r7, #20]
 80059f0:	005b      	lsls	r3, r3, #1
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	4413      	add	r3, r2
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f002 f847 	bl	8007a8c <ff_wtoupper>
 80059fe:	4603      	mov	r3, r0
 8005a00:	429c      	cmp	r4, r3
 8005a02:	d001      	beq.n	8005a08 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005a04:	2300      	movs	r3, #0
 8005a06:	e022      	b.n	8005a4e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005a08:	89bb      	ldrh	r3, [r7, #12]
 8005a0a:	81fb      	strh	r3, [r7, #14]
 8005a0c:	e006      	b.n	8005a1c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005a0e:	89bb      	ldrh	r3, [r7, #12]
 8005a10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d001      	beq.n	8005a1c <cmp_lfn+0xa0>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	e018      	b.n	8005a4e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	613b      	str	r3, [r7, #16]
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	2b0c      	cmp	r3, #12
 8005a26:	d9c8      	bls.n	80059ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d00b      	beq.n	8005a4c <cmp_lfn+0xd0>
 8005a34:	89fb      	ldrh	r3, [r7, #14]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d008      	beq.n	8005a4c <cmp_lfn+0xd0>
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	4413      	add	r3, r2
 8005a42:	881b      	ldrh	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <cmp_lfn+0xd0>
 8005a48:	2300      	movs	r3, #0
 8005a4a:	e000      	b.n	8005a4e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005a4c:	2301      	movs	r3, #1
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	371c      	adds	r7, #28
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd90      	pop	{r4, r7, pc}
 8005a56:	bf00      	nop
 8005a58:	08008624 	.word	0x08008624

08005a5c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4611      	mov	r1, r2
 8005a68:	461a      	mov	r2, r3
 8005a6a:	460b      	mov	r3, r1
 8005a6c:	71fb      	strb	r3, [r7, #7]
 8005a6e:	4613      	mov	r3, r2
 8005a70:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	330d      	adds	r3, #13
 8005a76:	79ba      	ldrb	r2, [r7, #6]
 8005a78:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	330b      	adds	r3, #11
 8005a7e:	220f      	movs	r2, #15
 8005a80:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	330c      	adds	r3, #12
 8005a86:	2200      	movs	r2, #0
 8005a88:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	331a      	adds	r3, #26
 8005a8e:	2100      	movs	r1, #0
 8005a90:	4618      	mov	r0, r3
 8005a92:	f7fe ff36 	bl	8004902 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	1e5a      	subs	r2, r3, #1
 8005a9a:	4613      	mov	r3, r2
 8005a9c:	005b      	lsls	r3, r3, #1
 8005a9e:	4413      	add	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	82fb      	strh	r3, [r7, #22]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005aae:	8afb      	ldrh	r3, [r7, #22]
 8005ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d007      	beq.n	8005ac8 <put_lfn+0x6c>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	1c5a      	adds	r2, r3, #1
 8005abc:	61fa      	str	r2, [r7, #28]
 8005abe:	005b      	lsls	r3, r3, #1
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005ac8:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <put_lfn+0xcc>)
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	4413      	add	r3, r2
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	8afa      	ldrh	r2, [r7, #22]
 8005ad8:	4611      	mov	r1, r2
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe ff11 	bl	8004902 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005ae0:	8afb      	ldrh	r3, [r7, #22]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d102      	bne.n	8005aec <put_lfn+0x90>
 8005ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005aea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61bb      	str	r3, [r7, #24]
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	2b0c      	cmp	r3, #12
 8005af6:	d9da      	bls.n	8005aae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005af8:	8afb      	ldrh	r3, [r7, #22]
 8005afa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d006      	beq.n	8005b10 <put_lfn+0xb4>
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	005b      	lsls	r3, r3, #1
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4413      	add	r3, r2
 8005b0a:	881b      	ldrh	r3, [r3, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d103      	bne.n	8005b18 <put_lfn+0xbc>
 8005b10:	79fb      	ldrb	r3, [r7, #7]
 8005b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b16:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	79fa      	ldrb	r2, [r7, #7]
 8005b1c:	701a      	strb	r2, [r3, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	3720      	adds	r7, #32
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	08008624 	.word	0x08008624

08005b2c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08c      	sub	sp, #48	; 0x30
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005b3a:	220b      	movs	r2, #11
 8005b3c:	68b9      	ldr	r1, [r7, #8]
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f7fe ff26 	bl	8004990 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	2b05      	cmp	r3, #5
 8005b48:	d92b      	bls.n	8005ba2 <gen_numname+0x76>
		sr = seq;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005b4e:	e022      	b.n	8005b96 <gen_numname+0x6a>
			wc = *lfn++;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	1c9a      	adds	r2, r3, #2
 8005b54:	607a      	str	r2, [r7, #4]
 8005b56:	881b      	ldrh	r3, [r3, #0]
 8005b58:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b5e:	e017      	b.n	8005b90 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	005a      	lsls	r2, r3, #1
 8005b64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	4413      	add	r3, r2
 8005b6c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b70:	085b      	lsrs	r3, r3, #1
 8005b72:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <gen_numname+0x5e>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005b84:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005b88:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b8c:	3301      	adds	r3, #1
 8005b8e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b92:	2b0f      	cmp	r3, #15
 8005b94:	d9e4      	bls.n	8005b60 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1d8      	bne.n	8005b50 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005ba2:	2307      	movs	r3, #7
 8005ba4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 030f 	and.w	r3, r3, #15
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	3330      	adds	r3, #48	; 0x30
 8005bb2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005bb6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bba:	2b39      	cmp	r3, #57	; 0x39
 8005bbc:	d904      	bls.n	8005bc8 <gen_numname+0x9c>
 8005bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005bc2:	3307      	adds	r3, #7
 8005bc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005bd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	091b      	lsrs	r3, r3, #4
 8005be0:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1de      	bne.n	8005ba6 <gen_numname+0x7a>
	ns[i] = '~';
 8005be8:	f107 0214 	add.w	r2, r7, #20
 8005bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bee:	4413      	add	r3, r2
 8005bf0:	227e      	movs	r2, #126	; 0x7e
 8005bf2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf8:	e002      	b.n	8005c00 <gen_numname+0xd4>
 8005bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8005c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d205      	bcs.n	8005c14 <gen_numname+0xe8>
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	4413      	add	r3, r2
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b20      	cmp	r3, #32
 8005c12:	d1f2      	bne.n	8005bfa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c16:	2b07      	cmp	r3, #7
 8005c18:	d808      	bhi.n	8005c2c <gen_numname+0x100>
 8005c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005c20:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005c24:	4413      	add	r3, r2
 8005c26:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005c2a:	e000      	b.n	8005c2e <gen_numname+0x102>
 8005c2c:	2120      	movs	r1, #32
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	1c5a      	adds	r2, r3, #1
 8005c32:	627a      	str	r2, [r7, #36]	; 0x24
 8005c34:	68fa      	ldr	r2, [r7, #12]
 8005c36:	4413      	add	r3, r2
 8005c38:	460a      	mov	r2, r1
 8005c3a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c3e:	2b07      	cmp	r3, #7
 8005c40:	d9e8      	bls.n	8005c14 <gen_numname+0xe8>
}
 8005c42:	bf00      	nop
 8005c44:	bf00      	nop
 8005c46:	3730      	adds	r7, #48	; 0x30
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	bd80      	pop	{r7, pc}

08005c4c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005c54:	2300      	movs	r3, #0
 8005c56:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005c58:	230b      	movs	r3, #11
 8005c5a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	b2da      	uxtb	r2, r3
 8005c60:	0852      	lsrs	r2, r2, #1
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	4313      	orrs	r3, r2
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	1c59      	adds	r1, r3, #1
 8005c6c:	6079      	str	r1, [r7, #4]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	4413      	add	r3, r2
 8005c72:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	3b01      	subs	r3, #1
 8005c78:	60bb      	str	r3, [r7, #8]
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1ed      	bne.n	8005c5c <sum_sfn+0x10>
	return sum;
 8005c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3714      	adds	r7, #20
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b086      	sub	sp, #24
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f7ff fc86 	bl	80055b0 <dir_sdi>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ca8:	7dfb      	ldrb	r3, [r7, #23]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <dir_find+0x24>
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	e0a9      	b.n	8005e06 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005cb2:	23ff      	movs	r3, #255	; 0xff
 8005cb4:	753b      	strb	r3, [r7, #20]
 8005cb6:	7d3b      	ldrb	r3, [r7, #20]
 8005cb8:	757b      	strb	r3, [r7, #21]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8005cc0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	69db      	ldr	r3, [r3, #28]
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	6938      	ldr	r0, [r7, #16]
 8005cca:	f7ff f88f 	bl	8004dec <move_window>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005cd2:	7dfb      	ldrb	r3, [r7, #23]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f040 8090 	bne.w	8005dfa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005ce2:	7dbb      	ldrb	r3, [r7, #22]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <dir_find+0x60>
 8005ce8:	2304      	movs	r3, #4
 8005cea:	75fb      	strb	r3, [r7, #23]
 8005cec:	e08a      	b.n	8005e04 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	330b      	adds	r3, #11
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfa:	73fb      	strb	r3, [r7, #15]
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	7bfa      	ldrb	r2, [r7, #15]
 8005d00:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005d02:	7dbb      	ldrb	r3, [r7, #22]
 8005d04:	2be5      	cmp	r3, #229	; 0xe5
 8005d06:	d007      	beq.n	8005d18 <dir_find+0x8a>
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	f003 0308 	and.w	r3, r3, #8
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <dir_find+0x98>
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
 8005d14:	2b0f      	cmp	r3, #15
 8005d16:	d006      	beq.n	8005d26 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005d18:	23ff      	movs	r3, #255	; 0xff
 8005d1a:	757b      	strb	r3, [r7, #21]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005d22:	631a      	str	r2, [r3, #48]	; 0x30
 8005d24:	e05e      	b.n	8005de4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	2b0f      	cmp	r3, #15
 8005d2a:	d136      	bne.n	8005d9a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d154      	bne.n	8005de4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005d3a:	7dbb      	ldrb	r3, [r7, #22]
 8005d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00d      	beq.n	8005d60 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	7b5b      	ldrb	r3, [r3, #13]
 8005d4a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005d4c:	7dbb      	ldrb	r3, [r7, #22]
 8005d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d52:	75bb      	strb	r3, [r7, #22]
 8005d54:	7dbb      	ldrb	r3, [r7, #22]
 8005d56:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695a      	ldr	r2, [r3, #20]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005d60:	7dba      	ldrb	r2, [r7, #22]
 8005d62:	7d7b      	ldrb	r3, [r7, #21]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d115      	bne.n	8005d94 <dir_find+0x106>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6a1b      	ldr	r3, [r3, #32]
 8005d6c:	330d      	adds	r3, #13
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	7d3a      	ldrb	r2, [r7, #20]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d10e      	bne.n	8005d94 <dir_find+0x106>
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	691a      	ldr	r2, [r3, #16]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	4619      	mov	r1, r3
 8005d80:	4610      	mov	r0, r2
 8005d82:	f7ff fdfb 	bl	800597c <cmp_lfn>
 8005d86:	4603      	mov	r3, r0
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <dir_find+0x106>
 8005d8c:	7d7b      	ldrb	r3, [r7, #21]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	e000      	b.n	8005d96 <dir_find+0x108>
 8005d94:	23ff      	movs	r3, #255	; 0xff
 8005d96:	757b      	strb	r3, [r7, #21]
 8005d98:	e024      	b.n	8005de4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005d9a:	7d7b      	ldrb	r3, [r7, #21]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d109      	bne.n	8005db4 <dir_find+0x126>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6a1b      	ldr	r3, [r3, #32]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f7ff ff51 	bl	8005c4c <sum_sfn>
 8005daa:	4603      	mov	r3, r0
 8005dac:	461a      	mov	r2, r3
 8005dae:	7d3b      	ldrb	r3, [r7, #20]
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d024      	beq.n	8005dfe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005dba:	f003 0301 	and.w	r3, r3, #1
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <dir_find+0x14a>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6a18      	ldr	r0, [r3, #32]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	3324      	adds	r3, #36	; 0x24
 8005dca:	220b      	movs	r2, #11
 8005dcc:	4619      	mov	r1, r3
 8005dce:	f7fe fe1b 	bl	8004a08 <mem_cmp>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d014      	beq.n	8005e02 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005dd8:	23ff      	movs	r3, #255	; 0xff
 8005dda:	757b      	strb	r3, [r7, #21]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f04f 32ff 	mov.w	r2, #4294967295
 8005de2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005de4:	2100      	movs	r1, #0
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fc6b 	bl	80056c2 <dir_next>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005df0:	7dfb      	ldrb	r3, [r7, #23]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	f43f af65 	beq.w	8005cc2 <dir_find+0x34>
 8005df8:	e004      	b.n	8005e04 <dir_find+0x176>
		if (res != FR_OK) break;
 8005dfa:	bf00      	nop
 8005dfc:	e002      	b.n	8005e04 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005dfe:	bf00      	nop
 8005e00:	e000      	b.n	8005e04 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005e02:	bf00      	nop

	return res;
 8005e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3718      	adds	r7, #24
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
	...

08005e10 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b08c      	sub	sp, #48	; 0x30
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005e24:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d001      	beq.n	8005e30 <dir_register+0x20>
 8005e2c:	2306      	movs	r3, #6
 8005e2e:	e0e0      	b.n	8005ff2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005e30:	2300      	movs	r3, #0
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24
 8005e34:	e002      	b.n	8005e3c <dir_register+0x2c>
 8005e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e38:	3301      	adds	r3, #1
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	691a      	ldr	r2, [r3, #16]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	005b      	lsls	r3, r3, #1
 8005e44:	4413      	add	r3, r2
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d1f4      	bne.n	8005e36 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005e52:	f107 030c 	add.w	r3, r7, #12
 8005e56:	220c      	movs	r2, #12
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7fe fd99 	bl	8004990 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005e5e:	7dfb      	ldrb	r3, [r7, #23]
 8005e60:	f003 0301 	and.w	r3, r3, #1
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d032      	beq.n	8005ece <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2240      	movs	r2, #64	; 0x40
 8005e6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8005e70:	2301      	movs	r3, #1
 8005e72:	62bb      	str	r3, [r7, #40]	; 0x28
 8005e74:	e016      	b.n	8005ea4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	f107 010c 	add.w	r1, r7, #12
 8005e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e86:	f7ff fe51 	bl	8005b2c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f7ff feff 	bl	8005c8e <dir_find>
 8005e90:	4603      	mov	r3, r0
 8005e92:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8005e96:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d106      	bne.n	8005eac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ea6:	2b63      	cmp	r3, #99	; 0x63
 8005ea8:	d9e5      	bls.n	8005e76 <dir_register+0x66>
 8005eaa:	e000      	b.n	8005eae <dir_register+0x9e>
			if (res != FR_OK) break;
 8005eac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb0:	2b64      	cmp	r3, #100	; 0x64
 8005eb2:	d101      	bne.n	8005eb8 <dir_register+0xa8>
 8005eb4:	2307      	movs	r3, #7
 8005eb6:	e09c      	b.n	8005ff2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ebc:	2b04      	cmp	r3, #4
 8005ebe:	d002      	beq.n	8005ec6 <dir_register+0xb6>
 8005ec0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005ec4:	e095      	b.n	8005ff2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005ec6:	7dfa      	ldrb	r2, [r7, #23]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
 8005ed0:	f003 0302 	and.w	r3, r3, #2
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d007      	beq.n	8005ee8 <dir_register+0xd8>
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	330c      	adds	r3, #12
 8005edc:	4a47      	ldr	r2, [pc, #284]	; (8005ffc <dir_register+0x1ec>)
 8005ede:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee2:	089b      	lsrs	r3, r3, #2
 8005ee4:	3301      	adds	r3, #1
 8005ee6:	e000      	b.n	8005eea <dir_register+0xda>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8005eec:	6a39      	ldr	r1, [r7, #32]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff fcbd 	bl	800586e <dir_alloc>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8005efa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d148      	bne.n	8005f94 <dir_register+0x184>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	623b      	str	r3, [r7, #32]
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d042      	beq.n	8005f94 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	015b      	lsls	r3, r3, #5
 8005f16:	1ad3      	subs	r3, r2, r3
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff fb48 	bl	80055b0 <dir_sdi>
 8005f20:	4603      	mov	r3, r0
 8005f22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005f26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d132      	bne.n	8005f94 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	3324      	adds	r3, #36	; 0x24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fe8a 	bl	8005c4c <sum_sfn>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	69db      	ldr	r3, [r3, #28]
 8005f40:	4619      	mov	r1, r3
 8005f42:	69f8      	ldr	r0, [r7, #28]
 8005f44:	f7fe ff52 	bl	8004dec <move_window>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8005f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d11d      	bne.n	8005f92 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	6918      	ldr	r0, [r3, #16]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a19      	ldr	r1, [r3, #32]
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	b2da      	uxtb	r2, r3
 8005f62:	7efb      	ldrb	r3, [r7, #27]
 8005f64:	f7ff fd7a 	bl	8005a5c <put_lfn>
				fs->wflag = 1;
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005f6e:	2100      	movs	r1, #0
 8005f70:	6878      	ldr	r0, [r7, #4]
 8005f72:	f7ff fba6 	bl	80056c2 <dir_next>
 8005f76:	4603      	mov	r3, r0
 8005f78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8005f7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d107      	bne.n	8005f94 <dir_register+0x184>
 8005f84:	6a3b      	ldr	r3, [r7, #32]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	623b      	str	r3, [r7, #32]
 8005f8a:	6a3b      	ldr	r3, [r7, #32]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1d5      	bne.n	8005f3c <dir_register+0x12c>
 8005f90:	e000      	b.n	8005f94 <dir_register+0x184>
				if (res != FR_OK) break;
 8005f92:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005f94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d128      	bne.n	8005fee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	69db      	ldr	r3, [r3, #28]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	69f8      	ldr	r0, [r7, #28]
 8005fa4:	f7fe ff22 	bl	8004dec <move_window>
 8005fa8:	4603      	mov	r3, r0
 8005faa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8005fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d11b      	bne.n	8005fee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a1b      	ldr	r3, [r3, #32]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	2100      	movs	r1, #0
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7fe fd07 	bl	80049d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6a18      	ldr	r0, [r3, #32]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	3324      	adds	r3, #36	; 0x24
 8005fcc:	220b      	movs	r2, #11
 8005fce:	4619      	mov	r1, r3
 8005fd0:	f7fe fcde 	bl	8004990 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a1b      	ldr	r3, [r3, #32]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	f002 0218 	and.w	r2, r2, #24
 8005fe4:	b2d2      	uxtb	r2, r2
 8005fe6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	2201      	movs	r2, #1
 8005fec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8005fee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3730      	adds	r7, #48	; 0x30
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	4ec4ec4f 	.word	0x4ec4ec4f

08006000 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	613b      	str	r3, [r7, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	60fb      	str	r3, [r7, #12]
 8006018:	2300      	movs	r3, #0
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	61ba      	str	r2, [r7, #24]
 8006026:	693a      	ldr	r2, [r7, #16]
 8006028:	4413      	add	r3, r2
 800602a:	781b      	ldrb	r3, [r3, #0]
 800602c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800602e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006030:	2b1f      	cmp	r3, #31
 8006032:	d940      	bls.n	80060b6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006036:	2b2f      	cmp	r3, #47	; 0x2f
 8006038:	d006      	beq.n	8006048 <create_name+0x48>
 800603a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800603c:	2b5c      	cmp	r3, #92	; 0x5c
 800603e:	d110      	bne.n	8006062 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006040:	e002      	b.n	8006048 <create_name+0x48>
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	3301      	adds	r3, #1
 8006046:	61bb      	str	r3, [r7, #24]
 8006048:	693a      	ldr	r2, [r7, #16]
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	4413      	add	r3, r2
 800604e:	781b      	ldrb	r3, [r3, #0]
 8006050:	2b2f      	cmp	r3, #47	; 0x2f
 8006052:	d0f6      	beq.n	8006042 <create_name+0x42>
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	69bb      	ldr	r3, [r7, #24]
 8006058:	4413      	add	r3, r2
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	2b5c      	cmp	r3, #92	; 0x5c
 800605e:	d0f0      	beq.n	8006042 <create_name+0x42>
			break;
 8006060:	e02a      	b.n	80060b8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2bfe      	cmp	r3, #254	; 0xfe
 8006066:	d901      	bls.n	800606c <create_name+0x6c>
 8006068:	2306      	movs	r3, #6
 800606a:	e177      	b.n	800635c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800606c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800606e:	b2db      	uxtb	r3, r3
 8006070:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006072:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006074:	2101      	movs	r1, #1
 8006076:	4618      	mov	r0, r3
 8006078:	f001 fccc 	bl	8007a14 <ff_convert>
 800607c:	4603      	mov	r3, r0
 800607e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006082:	2b00      	cmp	r3, #0
 8006084:	d101      	bne.n	800608a <create_name+0x8a>
 8006086:	2306      	movs	r3, #6
 8006088:	e168      	b.n	800635c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800608a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800608c:	2b7f      	cmp	r3, #127	; 0x7f
 800608e:	d809      	bhi.n	80060a4 <create_name+0xa4>
 8006090:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006092:	4619      	mov	r1, r3
 8006094:	48b3      	ldr	r0, [pc, #716]	; (8006364 <create_name+0x364>)
 8006096:	f7fe fcde 	bl	8004a56 <chk_chr>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d001      	beq.n	80060a4 <create_name+0xa4>
 80060a0:	2306      	movs	r3, #6
 80060a2:	e15b      	b.n	800635c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	1c5a      	adds	r2, r3, #1
 80060a8:	617a      	str	r2, [r7, #20]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	4413      	add	r3, r2
 80060b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80060b2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80060b4:	e7b4      	b.n	8006020 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80060b6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80060b8:	693a      	ldr	r2, [r7, #16]
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	441a      	add	r2, r3
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80060c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060c4:	2b1f      	cmp	r3, #31
 80060c6:	d801      	bhi.n	80060cc <create_name+0xcc>
 80060c8:	2304      	movs	r3, #4
 80060ca:	e000      	b.n	80060ce <create_name+0xce>
 80060cc:	2300      	movs	r3, #0
 80060ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060d2:	e011      	b.n	80060f8 <create_name+0xf8>
		w = lfn[di - 1];
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80060da:	3b01      	subs	r3, #1
 80060dc:	005b      	lsls	r3, r3, #1
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80060e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060e8:	2b20      	cmp	r3, #32
 80060ea:	d002      	beq.n	80060f2 <create_name+0xf2>
 80060ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80060ee:	2b2e      	cmp	r3, #46	; 0x2e
 80060f0:	d106      	bne.n	8006100 <create_name+0x100>
		di--;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	3b01      	subs	r3, #1
 80060f6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1ea      	bne.n	80060d4 <create_name+0xd4>
 80060fe:	e000      	b.n	8006102 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006100:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	005b      	lsls	r3, r3, #1
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	2200      	movs	r2, #0
 800610c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <create_name+0x118>
 8006114:	2306      	movs	r3, #6
 8006116:	e121      	b.n	800635c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3324      	adds	r3, #36	; 0x24
 800611c:	220b      	movs	r2, #11
 800611e:	2120      	movs	r1, #32
 8006120:	4618      	mov	r0, r3
 8006122:	f7fe fc56 	bl	80049d2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006126:	2300      	movs	r3, #0
 8006128:	61bb      	str	r3, [r7, #24]
 800612a:	e002      	b.n	8006132 <create_name+0x132>
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	3301      	adds	r3, #1
 8006130:	61bb      	str	r3, [r7, #24]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2b20      	cmp	r3, #32
 800613e:	d0f5      	beq.n	800612c <create_name+0x12c>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	68fa      	ldr	r2, [r7, #12]
 8006146:	4413      	add	r3, r2
 8006148:	881b      	ldrh	r3, [r3, #0]
 800614a:	2b2e      	cmp	r3, #46	; 0x2e
 800614c:	d0ee      	beq.n	800612c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d009      	beq.n	8006168 <create_name+0x168>
 8006154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006158:	f043 0303 	orr.w	r3, r3, #3
 800615c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006160:	e002      	b.n	8006168 <create_name+0x168>
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	3b01      	subs	r3, #1
 8006166:	617b      	str	r3, [r7, #20]
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d009      	beq.n	8006182 <create_name+0x182>
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006174:	3b01      	subs	r3, #1
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	2b2e      	cmp	r3, #46	; 0x2e
 8006180:	d1ef      	bne.n	8006162 <create_name+0x162>

	i = b = 0; ni = 8;
 8006182:	2300      	movs	r3, #0
 8006184:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006188:	2300      	movs	r3, #0
 800618a:	623b      	str	r3, [r7, #32]
 800618c:	2308      	movs	r3, #8
 800618e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	61ba      	str	r2, [r7, #24]
 8006196:	005b      	lsls	r3, r3, #1
 8006198:	68fa      	ldr	r2, [r7, #12]
 800619a:	4413      	add	r3, r2
 800619c:	881b      	ldrh	r3, [r3, #0]
 800619e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80061a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	f000 8090 	beq.w	80062c8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80061a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d006      	beq.n	80061bc <create_name+0x1bc>
 80061ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80061b0:	2b2e      	cmp	r3, #46	; 0x2e
 80061b2:	d10a      	bne.n	80061ca <create_name+0x1ca>
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d006      	beq.n	80061ca <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80061bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061c0:	f043 0303 	orr.w	r3, r3, #3
 80061c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061c8:	e07d      	b.n	80062c6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80061ca:	6a3a      	ldr	r2, [r7, #32]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d203      	bcs.n	80061da <create_name+0x1da>
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d123      	bne.n	8006222 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b0b      	cmp	r3, #11
 80061de:	d106      	bne.n	80061ee <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80061e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061e4:	f043 0303 	orr.w	r3, r3, #3
 80061e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80061ec:	e06f      	b.n	80062ce <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d005      	beq.n	8006202 <create_name+0x202>
 80061f6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80061fa:	f043 0303 	orr.w	r3, r3, #3
 80061fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006202:	69ba      	ldr	r2, [r7, #24]
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	429a      	cmp	r2, r3
 8006208:	d860      	bhi.n	80062cc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	61bb      	str	r3, [r7, #24]
 800620e:	2308      	movs	r3, #8
 8006210:	623b      	str	r3, [r7, #32]
 8006212:	230b      	movs	r3, #11
 8006214:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006216:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006220:	e051      	b.n	80062c6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006222:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006224:	2b7f      	cmp	r3, #127	; 0x7f
 8006226:	d914      	bls.n	8006252 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800622a:	2100      	movs	r1, #0
 800622c:	4618      	mov	r0, r3
 800622e:	f001 fbf1 	bl	8007a14 <ff_convert>
 8006232:	4603      	mov	r3, r0
 8006234:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006238:	2b00      	cmp	r3, #0
 800623a:	d004      	beq.n	8006246 <create_name+0x246>
 800623c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800623e:	3b80      	subs	r3, #128	; 0x80
 8006240:	4a49      	ldr	r2, [pc, #292]	; (8006368 <create_name+0x368>)
 8006242:	5cd3      	ldrb	r3, [r2, r3]
 8006244:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800624a:	f043 0302 	orr.w	r3, r3, #2
 800624e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006254:	2b00      	cmp	r3, #0
 8006256:	d007      	beq.n	8006268 <create_name+0x268>
 8006258:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800625a:	4619      	mov	r1, r3
 800625c:	4843      	ldr	r0, [pc, #268]	; (800636c <create_name+0x36c>)
 800625e:	f7fe fbfa 	bl	8004a56 <chk_chr>
 8006262:	4603      	mov	r3, r0
 8006264:	2b00      	cmp	r3, #0
 8006266:	d008      	beq.n	800627a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006268:	235f      	movs	r3, #95	; 0x5f
 800626a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800626c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006270:	f043 0303 	orr.w	r3, r3, #3
 8006274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8006278:	e01b      	b.n	80062b2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800627a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800627c:	2b40      	cmp	r3, #64	; 0x40
 800627e:	d909      	bls.n	8006294 <create_name+0x294>
 8006280:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006282:	2b5a      	cmp	r3, #90	; 0x5a
 8006284:	d806      	bhi.n	8006294 <create_name+0x294>
					b |= 2;
 8006286:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800628a:	f043 0302 	orr.w	r3, r3, #2
 800628e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006292:	e00e      	b.n	80062b2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8006294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006296:	2b60      	cmp	r3, #96	; 0x60
 8006298:	d90b      	bls.n	80062b2 <create_name+0x2b2>
 800629a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629c:	2b7a      	cmp	r3, #122	; 0x7a
 800629e:	d808      	bhi.n	80062b2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80062a0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80062ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062ae:	3b20      	subs	r3, #32
 80062b0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80062b2:	6a3b      	ldr	r3, [r7, #32]
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	623a      	str	r2, [r7, #32]
 80062b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062ba:	b2d1      	uxtb	r1, r2
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	4413      	add	r3, r2
 80062c0:	460a      	mov	r2, r1
 80062c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80062c6:	e763      	b.n	8006190 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80062c8:	bf00      	nop
 80062ca:	e000      	b.n	80062ce <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80062cc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062d4:	2be5      	cmp	r3, #229	; 0xe5
 80062d6:	d103      	bne.n	80062e0 <create_name+0x2e0>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2205      	movs	r2, #5
 80062dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	2b08      	cmp	r3, #8
 80062e4:	d104      	bne.n	80062f0 <create_name+0x2f0>
 80062e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80062f0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80062f4:	f003 030c 	and.w	r3, r3, #12
 80062f8:	2b0c      	cmp	r3, #12
 80062fa:	d005      	beq.n	8006308 <create_name+0x308>
 80062fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006300:	f003 0303 	and.w	r3, r3, #3
 8006304:	2b03      	cmp	r3, #3
 8006306:	d105      	bne.n	8006314 <create_name+0x314>
 8006308:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800630c:	f043 0302 	orr.w	r3, r3, #2
 8006310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d117      	bne.n	8006350 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006320:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006324:	f003 0303 	and.w	r3, r3, #3
 8006328:	2b01      	cmp	r3, #1
 800632a:	d105      	bne.n	8006338 <create_name+0x338>
 800632c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006330:	f043 0310 	orr.w	r3, r3, #16
 8006334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006338:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800633c:	f003 030c 	and.w	r3, r3, #12
 8006340:	2b04      	cmp	r3, #4
 8006342:	d105      	bne.n	8006350 <create_name+0x350>
 8006344:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006348:	f043 0308 	orr.w	r3, r3, #8
 800634c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006356:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800635a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800635c:	4618      	mov	r0, r3
 800635e:	3728      	adds	r7, #40	; 0x28
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	08008544 	.word	0x08008544
 8006368:	080085a4 	.word	0x080085a4
 800636c:	08008550 	.word	0x08008550

08006370 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b086      	sub	sp, #24
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8006384:	e002      	b.n	800638c <follow_path+0x1c>
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	3301      	adds	r3, #1
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b2f      	cmp	r3, #47	; 0x2f
 8006392:	d0f8      	beq.n	8006386 <follow_path+0x16>
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	2b5c      	cmp	r3, #92	; 0x5c
 800639a:	d0f4      	beq.n	8006386 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	781b      	ldrb	r3, [r3, #0]
 80063a6:	2b1f      	cmp	r3, #31
 80063a8:	d80a      	bhi.n	80063c0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2280      	movs	r2, #128	; 0x80
 80063ae:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff f8fb 	bl	80055b0 <dir_sdi>
 80063ba:	4603      	mov	r3, r0
 80063bc:	75fb      	strb	r3, [r7, #23]
 80063be:	e048      	b.n	8006452 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80063c0:	463b      	mov	r3, r7
 80063c2:	4619      	mov	r1, r3
 80063c4:	6878      	ldr	r0, [r7, #4]
 80063c6:	f7ff fe1b 	bl	8006000 <create_name>
 80063ca:	4603      	mov	r3, r0
 80063cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d139      	bne.n	8006448 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fc5a 	bl	8005c8e <dir_find>
 80063da:	4603      	mov	r3, r0
 80063dc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80063e4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d00a      	beq.n	8006402 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80063ec:	7dfb      	ldrb	r3, [r7, #23]
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d12c      	bne.n	800644c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80063f2:	7afb      	ldrb	r3, [r7, #11]
 80063f4:	f003 0304 	and.w	r3, r3, #4
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d127      	bne.n	800644c <follow_path+0xdc>
 80063fc:	2305      	movs	r3, #5
 80063fe:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006400:	e024      	b.n	800644c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006402:	7afb      	ldrb	r3, [r7, #11]
 8006404:	f003 0304 	and.w	r3, r3, #4
 8006408:	2b00      	cmp	r3, #0
 800640a:	d121      	bne.n	8006450 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	799b      	ldrb	r3, [r3, #6]
 8006410:	f003 0310 	and.w	r3, r3, #16
 8006414:	2b00      	cmp	r3, #0
 8006416:	d102      	bne.n	800641e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006418:	2305      	movs	r3, #5
 800641a:	75fb      	strb	r3, [r7, #23]
 800641c:	e019      	b.n	8006452 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	695b      	ldr	r3, [r3, #20]
 8006428:	68fa      	ldr	r2, [r7, #12]
 800642a:	8992      	ldrh	r2, [r2, #12]
 800642c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006430:	fb02 f200 	mul.w	r2, r2, r0
 8006434:	1a9b      	subs	r3, r3, r2
 8006436:	440b      	add	r3, r1
 8006438:	4619      	mov	r1, r3
 800643a:	68f8      	ldr	r0, [r7, #12]
 800643c:	f7ff fa5e 	bl	80058fc <ld_clust>
 8006440:	4602      	mov	r2, r0
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006446:	e7bb      	b.n	80063c0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006448:	bf00      	nop
 800644a:	e002      	b.n	8006452 <follow_path+0xe2>
				break;
 800644c:	bf00      	nop
 800644e:	e000      	b.n	8006452 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006450:	bf00      	nop
			}
		}
	}

	return res;
 8006452:	7dfb      	ldrb	r3, [r7, #23]
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800645c:	b480      	push	{r7}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006464:	f04f 33ff 	mov.w	r3, #4294967295
 8006468:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d031      	beq.n	80064d6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	617b      	str	r3, [r7, #20]
 8006478:	e002      	b.n	8006480 <get_ldnumber+0x24>
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	3301      	adds	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b1f      	cmp	r3, #31
 8006486:	d903      	bls.n	8006490 <get_ldnumber+0x34>
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	2b3a      	cmp	r3, #58	; 0x3a
 800648e:	d1f4      	bne.n	800647a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	781b      	ldrb	r3, [r3, #0]
 8006494:	2b3a      	cmp	r3, #58	; 0x3a
 8006496:	d11c      	bne.n	80064d2 <get_ldnumber+0x76>
			tp = *path;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	1c5a      	adds	r2, r3, #1
 80064a2:	60fa      	str	r2, [r7, #12]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	3b30      	subs	r3, #48	; 0x30
 80064a8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	2b09      	cmp	r3, #9
 80064ae:	d80e      	bhi.n	80064ce <get_ldnumber+0x72>
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d10a      	bne.n	80064ce <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d107      	bne.n	80064ce <get_ldnumber+0x72>
					vol = (int)i;
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	3301      	adds	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	697a      	ldr	r2, [r7, #20]
 80064cc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	e002      	b.n	80064d8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80064d2:	2300      	movs	r3, #0
 80064d4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80064d6:	693b      	ldr	r3, [r7, #16]
}
 80064d8:	4618      	mov	r0, r3
 80064da:	371c      	adds	r7, #28
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	70da      	strb	r2, [r3, #3]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f04f 32ff 	mov.w	r2, #4294967295
 80064fa:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80064fc:	6839      	ldr	r1, [r7, #0]
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f7fe fc74 	bl	8004dec <move_window>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d001      	beq.n	800650e <check_fs+0x2a>
 800650a:	2304      	movs	r3, #4
 800650c:	e038      	b.n	8006580 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	3338      	adds	r3, #56	; 0x38
 8006512:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006516:	4618      	mov	r0, r3
 8006518:	f7fe f9b8 	bl	800488c <ld_word>
 800651c:	4603      	mov	r3, r0
 800651e:	461a      	mov	r2, r3
 8006520:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006524:	429a      	cmp	r2, r3
 8006526:	d001      	beq.n	800652c <check_fs+0x48>
 8006528:	2303      	movs	r3, #3
 800652a:	e029      	b.n	8006580 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006532:	2be9      	cmp	r3, #233	; 0xe9
 8006534:	d009      	beq.n	800654a <check_fs+0x66>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800653c:	2beb      	cmp	r3, #235	; 0xeb
 800653e:	d11e      	bne.n	800657e <check_fs+0x9a>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006546:	2b90      	cmp	r3, #144	; 0x90
 8006548:	d119      	bne.n	800657e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	3338      	adds	r3, #56	; 0x38
 800654e:	3336      	adds	r3, #54	; 0x36
 8006550:	4618      	mov	r0, r3
 8006552:	f7fe f9b3 	bl	80048bc <ld_dword>
 8006556:	4603      	mov	r3, r0
 8006558:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800655c:	4a0a      	ldr	r2, [pc, #40]	; (8006588 <check_fs+0xa4>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <check_fs+0x82>
 8006562:	2300      	movs	r3, #0
 8006564:	e00c      	b.n	8006580 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	3338      	adds	r3, #56	; 0x38
 800656a:	3352      	adds	r3, #82	; 0x52
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe f9a5 	bl	80048bc <ld_dword>
 8006572:	4603      	mov	r3, r0
 8006574:	4a05      	ldr	r2, [pc, #20]	; (800658c <check_fs+0xa8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d101      	bne.n	800657e <check_fs+0x9a>
 800657a:	2300      	movs	r3, #0
 800657c:	e000      	b.n	8006580 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800657e:	2302      	movs	r3, #2
}
 8006580:	4618      	mov	r0, r3
 8006582:	3708      	adds	r7, #8
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	00544146 	.word	0x00544146
 800658c:	33544146 	.word	0x33544146

08006590 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b096      	sub	sp, #88	; 0x58
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4613      	mov	r3, r2
 800659c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f7ff ff59 	bl	800645c <get_ldnumber>
 80065aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80065ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	da01      	bge.n	80065b6 <find_volume+0x26>
 80065b2:	230b      	movs	r3, #11
 80065b4:	e268      	b.n	8006a88 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80065b6:	4ab0      	ldr	r2, [pc, #704]	; (8006878 <find_volume+0x2e8>)
 80065b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80065c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d101      	bne.n	80065ca <find_volume+0x3a>
 80065c6:	230c      	movs	r3, #12
 80065c8:	e25e      	b.n	8006a88 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	f023 0301 	bic.w	r3, r3, #1
 80065d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80065d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d01a      	beq.n	8006616 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80065e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065e2:	785b      	ldrb	r3, [r3, #1]
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fe f8b3 	bl	8004750 <disk_status>
 80065ea:	4603      	mov	r3, r0
 80065ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80065f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80065f4:	f003 0301 	and.w	r3, r3, #1
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10c      	bne.n	8006616 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80065fc:	79fb      	ldrb	r3, [r7, #7]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d007      	beq.n	8006612 <find_volume+0x82>
 8006602:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006606:	f003 0304 	and.w	r3, r3, #4
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800660e:	230a      	movs	r3, #10
 8006610:	e23a      	b.n	8006a88 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006612:	2300      	movs	r3, #0
 8006614:	e238      	b.n	8006a88 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006618:	2200      	movs	r2, #0
 800661a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800661c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800661e:	b2da      	uxtb	r2, r3
 8006620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006622:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006626:	785b      	ldrb	r3, [r3, #1]
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe f8ab 	bl	8004784 <disk_initialize>
 800662e:	4603      	mov	r3, r0
 8006630:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006634:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	2b00      	cmp	r3, #0
 800663e:	d001      	beq.n	8006644 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006640:	2303      	movs	r3, #3
 8006642:	e221      	b.n	8006a88 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006644:	79fb      	ldrb	r3, [r7, #7]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d007      	beq.n	800665a <find_volume+0xca>
 800664a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800664e:	f003 0304 	and.w	r3, r3, #4
 8006652:	2b00      	cmp	r3, #0
 8006654:	d001      	beq.n	800665a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006656:	230a      	movs	r3, #10
 8006658:	e216      	b.n	8006a88 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800665a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800665c:	7858      	ldrb	r0, [r3, #1]
 800665e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006660:	330c      	adds	r3, #12
 8006662:	461a      	mov	r2, r3
 8006664:	2102      	movs	r1, #2
 8006666:	f7fe f8f3 	bl	8004850 <disk_ioctl>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <find_volume+0xe4>
 8006670:	2301      	movs	r3, #1
 8006672:	e209      	b.n	8006a88 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006676:	899b      	ldrh	r3, [r3, #12]
 8006678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667c:	d80d      	bhi.n	800669a <find_volume+0x10a>
 800667e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006680:	899b      	ldrh	r3, [r3, #12]
 8006682:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006686:	d308      	bcc.n	800669a <find_volume+0x10a>
 8006688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800668a:	899b      	ldrh	r3, [r3, #12]
 800668c:	461a      	mov	r2, r3
 800668e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006690:	899b      	ldrh	r3, [r3, #12]
 8006692:	3b01      	subs	r3, #1
 8006694:	4013      	ands	r3, r2
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <find_volume+0x10e>
 800669a:	2301      	movs	r3, #1
 800669c:	e1f4      	b.n	8006a88 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80066a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80066a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80066a6:	f7ff ff1d 	bl	80064e4 <check_fs>
 80066aa:	4603      	mov	r3, r0
 80066ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80066b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d14b      	bne.n	8006750 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066b8:	2300      	movs	r3, #0
 80066ba:	643b      	str	r3, [r7, #64]	; 0x40
 80066bc:	e01f      	b.n	80066fe <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80066be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066c0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80066c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066c6:	011b      	lsls	r3, r3, #4
 80066c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80066cc:	4413      	add	r3, r2
 80066ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80066d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d2:	3304      	adds	r3, #4
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <find_volume+0x158>
 80066da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066dc:	3308      	adds	r3, #8
 80066de:	4618      	mov	r0, r3
 80066e0:	f7fe f8ec 	bl	80048bc <ld_dword>
 80066e4:	4602      	mov	r2, r0
 80066e6:	e000      	b.n	80066ea <find_volume+0x15a>
 80066e8:	2200      	movs	r2, #0
 80066ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80066f2:	440b      	add	r3, r1
 80066f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80066f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066fa:	3301      	adds	r3, #1
 80066fc:	643b      	str	r3, [r7, #64]	; 0x40
 80066fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006700:	2b03      	cmp	r3, #3
 8006702:	d9dc      	bls.n	80066be <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006704:	2300      	movs	r3, #0
 8006706:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006708:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800670a:	2b00      	cmp	r3, #0
 800670c:	d002      	beq.n	8006714 <find_volume+0x184>
 800670e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006710:	3b01      	subs	r3, #1
 8006712:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006714:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800671c:	4413      	add	r3, r2
 800671e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006722:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <find_volume+0x1a6>
 800672a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800672c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800672e:	f7ff fed9 	bl	80064e4 <check_fs>
 8006732:	4603      	mov	r3, r0
 8006734:	e000      	b.n	8006738 <find_volume+0x1a8>
 8006736:	2303      	movs	r3, #3
 8006738:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800673c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006740:	2b01      	cmp	r3, #1
 8006742:	d905      	bls.n	8006750 <find_volume+0x1c0>
 8006744:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006746:	3301      	adds	r3, #1
 8006748:	643b      	str	r3, [r7, #64]	; 0x40
 800674a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800674c:	2b03      	cmp	r3, #3
 800674e:	d9e1      	bls.n	8006714 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006750:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006754:	2b04      	cmp	r3, #4
 8006756:	d101      	bne.n	800675c <find_volume+0x1cc>
 8006758:	2301      	movs	r3, #1
 800675a:	e195      	b.n	8006a88 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800675c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006760:	2b01      	cmp	r3, #1
 8006762:	d901      	bls.n	8006768 <find_volume+0x1d8>
 8006764:	230d      	movs	r3, #13
 8006766:	e18f      	b.n	8006a88 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676a:	3338      	adds	r3, #56	; 0x38
 800676c:	330b      	adds	r3, #11
 800676e:	4618      	mov	r0, r3
 8006770:	f7fe f88c 	bl	800488c <ld_word>
 8006774:	4603      	mov	r3, r0
 8006776:	461a      	mov	r2, r3
 8006778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800677a:	899b      	ldrh	r3, [r3, #12]
 800677c:	429a      	cmp	r2, r3
 800677e:	d001      	beq.n	8006784 <find_volume+0x1f4>
 8006780:	230d      	movs	r3, #13
 8006782:	e181      	b.n	8006a88 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006786:	3338      	adds	r3, #56	; 0x38
 8006788:	3316      	adds	r3, #22
 800678a:	4618      	mov	r0, r3
 800678c:	f7fe f87e 	bl	800488c <ld_word>
 8006790:	4603      	mov	r3, r0
 8006792:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006794:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006796:	2b00      	cmp	r3, #0
 8006798:	d106      	bne.n	80067a8 <find_volume+0x218>
 800679a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679c:	3338      	adds	r3, #56	; 0x38
 800679e:	3324      	adds	r3, #36	; 0x24
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe f88b 	bl	80048bc <ld_dword>
 80067a6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80067a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80067ac:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80067ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80067b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067b6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80067b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ba:	789b      	ldrb	r3, [r3, #2]
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d005      	beq.n	80067cc <find_volume+0x23c>
 80067c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c2:	789b      	ldrb	r3, [r3, #2]
 80067c4:	2b02      	cmp	r3, #2
 80067c6:	d001      	beq.n	80067cc <find_volume+0x23c>
 80067c8:	230d      	movs	r3, #13
 80067ca:	e15d      	b.n	8006a88 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80067cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ce:	789b      	ldrb	r3, [r3, #2]
 80067d0:	461a      	mov	r2, r3
 80067d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067d4:	fb02 f303 	mul.w	r3, r2, r3
 80067d8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80067da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80067e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067e8:	895b      	ldrh	r3, [r3, #10]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d008      	beq.n	8006800 <find_volume+0x270>
 80067ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f0:	895b      	ldrh	r3, [r3, #10]
 80067f2:	461a      	mov	r2, r3
 80067f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f6:	895b      	ldrh	r3, [r3, #10]
 80067f8:	3b01      	subs	r3, #1
 80067fa:	4013      	ands	r3, r2
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d001      	beq.n	8006804 <find_volume+0x274>
 8006800:	230d      	movs	r3, #13
 8006802:	e141      	b.n	8006a88 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006806:	3338      	adds	r3, #56	; 0x38
 8006808:	3311      	adds	r3, #17
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe f83e 	bl	800488c <ld_word>
 8006810:	4603      	mov	r3, r0
 8006812:	461a      	mov	r2, r3
 8006814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006816:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800681a:	891b      	ldrh	r3, [r3, #8]
 800681c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800681e:	8992      	ldrh	r2, [r2, #12]
 8006820:	0952      	lsrs	r2, r2, #5
 8006822:	b292      	uxth	r2, r2
 8006824:	fbb3 f1f2 	udiv	r1, r3, r2
 8006828:	fb02 f201 	mul.w	r2, r2, r1
 800682c:	1a9b      	subs	r3, r3, r2
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <find_volume+0x2a8>
 8006834:	230d      	movs	r3, #13
 8006836:	e127      	b.n	8006a88 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800683a:	3338      	adds	r3, #56	; 0x38
 800683c:	3313      	adds	r3, #19
 800683e:	4618      	mov	r0, r3
 8006840:	f7fe f824 	bl	800488c <ld_word>
 8006844:	4603      	mov	r3, r0
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684a:	2b00      	cmp	r3, #0
 800684c:	d106      	bne.n	800685c <find_volume+0x2cc>
 800684e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006850:	3338      	adds	r3, #56	; 0x38
 8006852:	3320      	adds	r3, #32
 8006854:	4618      	mov	r0, r3
 8006856:	f7fe f831 	bl	80048bc <ld_dword>
 800685a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800685c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800685e:	3338      	adds	r3, #56	; 0x38
 8006860:	330e      	adds	r3, #14
 8006862:	4618      	mov	r0, r3
 8006864:	f7fe f812 	bl	800488c <ld_word>
 8006868:	4603      	mov	r3, r0
 800686a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800686c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800686e:	2b00      	cmp	r3, #0
 8006870:	d104      	bne.n	800687c <find_volume+0x2ec>
 8006872:	230d      	movs	r3, #13
 8006874:	e108      	b.n	8006a88 <find_volume+0x4f8>
 8006876:	bf00      	nop
 8006878:	200000cc 	.word	0x200000cc

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800687c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800687e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006880:	4413      	add	r3, r2
 8006882:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006884:	8911      	ldrh	r1, [r2, #8]
 8006886:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006888:	8992      	ldrh	r2, [r2, #12]
 800688a:	0952      	lsrs	r2, r2, #5
 800688c:	b292      	uxth	r2, r2
 800688e:	fbb1 f2f2 	udiv	r2, r1, r2
 8006892:	b292      	uxth	r2, r2
 8006894:	4413      	add	r3, r2
 8006896:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	429a      	cmp	r2, r3
 800689e:	d201      	bcs.n	80068a4 <find_volume+0x314>
 80068a0:	230d      	movs	r3, #13
 80068a2:	e0f1      	b.n	8006a88 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80068a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068a8:	1ad3      	subs	r3, r2, r3
 80068aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068ac:	8952      	ldrh	r2, [r2, #10]
 80068ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d101      	bne.n	80068be <find_volume+0x32e>
 80068ba:	230d      	movs	r3, #13
 80068bc:	e0e4      	b.n	8006a88 <find_volume+0x4f8>
		fmt = FS_FAT32;
 80068be:	2303      	movs	r3, #3
 80068c0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d802      	bhi.n	80068d4 <find_volume+0x344>
 80068ce:	2302      	movs	r3, #2
 80068d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	f640 72f5 	movw	r2, #4085	; 0xff5
 80068da:	4293      	cmp	r3, r2
 80068dc:	d802      	bhi.n	80068e4 <find_volume+0x354>
 80068de:	2301      	movs	r3, #1
 80068e0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	1c9a      	adds	r2, r3, #2
 80068e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ea:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80068ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068f0:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80068f2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80068f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068f6:	441a      	add	r2, r3
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80068fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80068fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006900:	441a      	add	r2, r3
 8006902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006904:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006906:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800690a:	2b03      	cmp	r3, #3
 800690c:	d11e      	bne.n	800694c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800690e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006910:	3338      	adds	r3, #56	; 0x38
 8006912:	332a      	adds	r3, #42	; 0x2a
 8006914:	4618      	mov	r0, r3
 8006916:	f7fd ffb9 	bl	800488c <ld_word>
 800691a:	4603      	mov	r3, r0
 800691c:	2b00      	cmp	r3, #0
 800691e:	d001      	beq.n	8006924 <find_volume+0x394>
 8006920:	230d      	movs	r3, #13
 8006922:	e0b1      	b.n	8006a88 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006926:	891b      	ldrh	r3, [r3, #8]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d001      	beq.n	8006930 <find_volume+0x3a0>
 800692c:	230d      	movs	r3, #13
 800692e:	e0ab      	b.n	8006a88 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006932:	3338      	adds	r3, #56	; 0x38
 8006934:	332c      	adds	r3, #44	; 0x2c
 8006936:	4618      	mov	r0, r3
 8006938:	f7fd ffc0 	bl	80048bc <ld_dword>
 800693c:	4602      	mov	r2, r0
 800693e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006940:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	647b      	str	r3, [r7, #68]	; 0x44
 800694a:	e01f      	b.n	800698c <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800694c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800694e:	891b      	ldrh	r3, [r3, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d101      	bne.n	8006958 <find_volume+0x3c8>
 8006954:	230d      	movs	r3, #13
 8006956:	e097      	b.n	8006a88 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800695c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800695e:	441a      	add	r2, r3
 8006960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006962:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006964:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006968:	2b02      	cmp	r3, #2
 800696a:	d103      	bne.n	8006974 <find_volume+0x3e4>
 800696c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696e:	69db      	ldr	r3, [r3, #28]
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	e00a      	b.n	800698a <find_volume+0x3fa>
 8006974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	4613      	mov	r3, r2
 800697a:	005b      	lsls	r3, r3, #1
 800697c:	4413      	add	r3, r2
 800697e:	085a      	lsrs	r2, r3, #1
 8006980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006982:	69db      	ldr	r3, [r3, #28]
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800698c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800698e:	6a1a      	ldr	r2, [r3, #32]
 8006990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006992:	899b      	ldrh	r3, [r3, #12]
 8006994:	4619      	mov	r1, r3
 8006996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006998:	440b      	add	r3, r1
 800699a:	3b01      	subs	r3, #1
 800699c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800699e:	8989      	ldrh	r1, [r1, #12]
 80069a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80069a4:	429a      	cmp	r2, r3
 80069a6:	d201      	bcs.n	80069ac <find_volume+0x41c>
 80069a8:	230d      	movs	r3, #13
 80069aa:	e06d      	b.n	8006a88 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80069ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ae:	f04f 32ff 	mov.w	r2, #4294967295
 80069b2:	619a      	str	r2, [r3, #24]
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	699a      	ldr	r2, [r3, #24]
 80069b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ba:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80069bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069be:	2280      	movs	r2, #128	; 0x80
 80069c0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80069c2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d149      	bne.n	8006a5e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	3338      	adds	r3, #56	; 0x38
 80069ce:	3330      	adds	r3, #48	; 0x30
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fd ff5b 	bl	800488c <ld_word>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d140      	bne.n	8006a5e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 80069dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069de:	3301      	adds	r3, #1
 80069e0:	4619      	mov	r1, r3
 80069e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80069e4:	f7fe fa02 	bl	8004dec <move_window>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d137      	bne.n	8006a5e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 80069ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f0:	2200      	movs	r2, #0
 80069f2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80069f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f6:	3338      	adds	r3, #56	; 0x38
 80069f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fd ff45 	bl	800488c <ld_word>
 8006a02:	4603      	mov	r3, r0
 8006a04:	461a      	mov	r2, r3
 8006a06:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d127      	bne.n	8006a5e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a10:	3338      	adds	r3, #56	; 0x38
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fd ff52 	bl	80048bc <ld_dword>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	4a1d      	ldr	r2, [pc, #116]	; (8006a90 <find_volume+0x500>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d11e      	bne.n	8006a5e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a22:	3338      	adds	r3, #56	; 0x38
 8006a24:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7fd ff47 	bl	80048bc <ld_dword>
 8006a2e:	4603      	mov	r3, r0
 8006a30:	4a18      	ldr	r2, [pc, #96]	; (8006a94 <find_volume+0x504>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d113      	bne.n	8006a5e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a38:	3338      	adds	r3, #56	; 0x38
 8006a3a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f7fd ff3c 	bl	80048bc <ld_dword>
 8006a44:	4602      	mov	r2, r0
 8006a46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a48:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	3338      	adds	r3, #56	; 0x38
 8006a4e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7fd ff32 	bl	80048bc <ld_dword>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a5c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a60:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006a64:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006a66:	4b0c      	ldr	r3, [pc, #48]	; (8006a98 <find_volume+0x508>)
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	b29a      	uxth	r2, r3
 8006a6e:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <find_volume+0x508>)
 8006a70:	801a      	strh	r2, [r3, #0]
 8006a72:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <find_volume+0x508>)
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a78:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7c:	4a07      	ldr	r2, [pc, #28]	; (8006a9c <find_volume+0x50c>)
 8006a7e:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006a80:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a82:	f7fe f94b 	bl	8004d1c <clear_lock>
#endif
	return FR_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3758      	adds	r7, #88	; 0x58
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}
 8006a90:	41615252 	.word	0x41615252
 8006a94:	61417272 	.word	0x61417272
 8006a98:	200000d0 	.word	0x200000d0
 8006a9c:	200000f4 	.word	0x200000f4

08006aa0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006aaa:	2309      	movs	r3, #9
 8006aac:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d01c      	beq.n	8006aee <validate+0x4e>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d018      	beq.n	8006aee <validate+0x4e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d013      	beq.n	8006aee <validate+0x4e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	889a      	ldrh	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	88db      	ldrh	r3, [r3, #6]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d10c      	bne.n	8006aee <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	785b      	ldrb	r3, [r3, #1]
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fd fe38 	bl	8004750 <disk_status>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	f003 0301 	and.w	r3, r3, #1
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <validate+0x4e>
			res = FR_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006aee:	7bfb      	ldrb	r3, [r7, #15]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d102      	bne.n	8006afa <validate+0x5a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	e000      	b.n	8006afc <validate+0x5c>
 8006afa:	2300      	movs	r3, #0
 8006afc:	683a      	ldr	r2, [r7, #0]
 8006afe:	6013      	str	r3, [r2, #0]
	return res;
 8006b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006b1e:	f107 0310 	add.w	r3, r7, #16
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7ff fc9a 	bl	800645c <get_ldnumber>
 8006b28:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	da01      	bge.n	8006b34 <f_mount+0x28>
 8006b30:	230b      	movs	r3, #11
 8006b32:	e02b      	b.n	8006b8c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006b34:	4a17      	ldr	r2, [pc, #92]	; (8006b94 <f_mount+0x88>)
 8006b36:	69fb      	ldr	r3, [r7, #28]
 8006b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006b3c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d005      	beq.n	8006b50 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006b44:	69b8      	ldr	r0, [r7, #24]
 8006b46:	f7fe f8e9 	bl	8004d1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d002      	beq.n	8006b5c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	490d      	ldr	r1, [pc, #52]	; (8006b94 <f_mount+0x88>)
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d002      	beq.n	8006b72 <f_mount+0x66>
 8006b6c:	79fb      	ldrb	r3, [r7, #7]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d001      	beq.n	8006b76 <f_mount+0x6a>
 8006b72:	2300      	movs	r3, #0
 8006b74:	e00a      	b.n	8006b8c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006b76:	f107 010c 	add.w	r1, r7, #12
 8006b7a:	f107 0308 	add.w	r3, r7, #8
 8006b7e:	2200      	movs	r2, #0
 8006b80:	4618      	mov	r0, r3
 8006b82:	f7ff fd05 	bl	8006590 <find_volume>
 8006b86:	4603      	mov	r3, r0
 8006b88:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006b8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3720      	adds	r7, #32
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	200000cc 	.word	0x200000cc

08006b98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b09a      	sub	sp, #104	; 0x68
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	4613      	mov	r3, r2
 8006ba4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d101      	bne.n	8006bb0 <f_open+0x18>
 8006bac:	2309      	movs	r3, #9
 8006bae:	e1bb      	b.n	8006f28 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006bb0:	79fb      	ldrb	r3, [r7, #7]
 8006bb2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bb6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006bb8:	79fa      	ldrb	r2, [r7, #7]
 8006bba:	f107 0114 	add.w	r1, r7, #20
 8006bbe:	f107 0308 	add.w	r3, r7, #8
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff fce4 	bl	8006590 <find_volume>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006bce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	f040 819f 	bne.w	8006f16 <f_open+0x37e>
		dj.obj.fs = fs;
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006bdc:	68ba      	ldr	r2, [r7, #8]
 8006bde:	f107 0318 	add.w	r3, r7, #24
 8006be2:	4611      	mov	r1, r2
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff fbc3 	bl	8006370 <follow_path>
 8006bea:	4603      	mov	r3, r0
 8006bec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006bf0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d11a      	bne.n	8006c2e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006bf8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bfc:	b25b      	sxtb	r3, r3
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da03      	bge.n	8006c0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006c02:	2306      	movs	r3, #6
 8006c04:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c08:	e011      	b.n	8006c2e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006c0a:	79fb      	ldrb	r3, [r7, #7]
 8006c0c:	f023 0301 	bic.w	r3, r3, #1
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	f107 0318 	add.w	r3, r7, #24
 8006c20:	4611      	mov	r1, r2
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7fd ff32 	bl	8004a8c <chk_lock>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006c2e:	79fb      	ldrb	r3, [r7, #7]
 8006c30:	f003 031c 	and.w	r3, r3, #28
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d07f      	beq.n	8006d38 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006c38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006c40:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c44:	2b04      	cmp	r3, #4
 8006c46:	d10e      	bne.n	8006c66 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006c48:	f7fd ff7c 	bl	8004b44 <enq_lock>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d006      	beq.n	8006c60 <f_open+0xc8>
 8006c52:	f107 0318 	add.w	r3, r7, #24
 8006c56:	4618      	mov	r0, r3
 8006c58:	f7ff f8da 	bl	8005e10 <dir_register>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	e000      	b.n	8006c62 <f_open+0xca>
 8006c60:	2312      	movs	r3, #18
 8006c62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	f043 0308 	orr.w	r3, r3, #8
 8006c6c:	71fb      	strb	r3, [r7, #7]
 8006c6e:	e010      	b.n	8006c92 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006c70:	7fbb      	ldrb	r3, [r7, #30]
 8006c72:	f003 0311 	and.w	r3, r3, #17
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <f_open+0xea>
					res = FR_DENIED;
 8006c7a:	2307      	movs	r3, #7
 8006c7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006c80:	e007      	b.n	8006c92 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006c82:	79fb      	ldrb	r3, [r7, #7]
 8006c84:	f003 0304 	and.w	r3, r3, #4
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <f_open+0xfa>
 8006c8c:	2308      	movs	r3, #8
 8006c8e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006c92:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d168      	bne.n	8006d6c <f_open+0x1d4>
 8006c9a:	79fb      	ldrb	r3, [r7, #7]
 8006c9c:	f003 0308 	and.w	r3, r3, #8
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d063      	beq.n	8006d6c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006ca4:	f7fd fce8 	bl	8004678 <get_fattime>
 8006ca8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	330e      	adds	r3, #14
 8006cae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7fd fe41 	bl	8004938 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cb8:	3316      	adds	r3, #22
 8006cba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fd fe3b 	bl	8004938 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cc4:	330b      	adds	r3, #11
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cce:	4611      	mov	r1, r2
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fe fe13 	bl	80058fc <ld_clust>
 8006cd6:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006cd8:	697b      	ldr	r3, [r7, #20]
 8006cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006cdc:	2200      	movs	r2, #0
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fe fe2b 	bl	800593a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce6:	331c      	adds	r3, #28
 8006ce8:	2100      	movs	r1, #0
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fd fe24 	bl	8004938 <st_dword>
					fs->wflag = 1;
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2201      	movs	r2, #1
 8006cf4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006cf6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d037      	beq.n	8006d6c <f_open+0x1d4>
						dw = fs->winsect;
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d00:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006d02:	f107 0318 	add.w	r3, r7, #24
 8006d06:	2200      	movs	r2, #0
 8006d08:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fe fb1b 	bl	8005346 <remove_chain>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006d16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d126      	bne.n	8006d6c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe f862 	bl	8004dec <move_window>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006d32:	3a01      	subs	r2, #1
 8006d34:	615a      	str	r2, [r3, #20]
 8006d36:	e019      	b.n	8006d6c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006d38:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d115      	bne.n	8006d6c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006d40:	7fbb      	ldrb	r3, [r7, #30]
 8006d42:	f003 0310 	and.w	r3, r3, #16
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d003      	beq.n	8006d52 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006d4a:	2304      	movs	r3, #4
 8006d4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006d50:	e00c      	b.n	8006d6c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006d52:	79fb      	ldrb	r3, [r7, #7]
 8006d54:	f003 0302 	and.w	r3, r3, #2
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d007      	beq.n	8006d6c <f_open+0x1d4>
 8006d5c:	7fbb      	ldrb	r3, [r7, #30]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d002      	beq.n	8006d6c <f_open+0x1d4>
						res = FR_DENIED;
 8006d66:	2307      	movs	r3, #7
 8006d68:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006d6c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d128      	bne.n	8006dc6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	f003 0308 	and.w	r3, r3, #8
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d003      	beq.n	8006d86 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006d7e:	79fb      	ldrb	r3, [r7, #7]
 8006d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d84:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006d8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006d94:	79fb      	ldrb	r3, [r7, #7]
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bf14      	ite	ne
 8006d9e:	2301      	movne	r3, #1
 8006da0:	2300      	moveq	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	461a      	mov	r2, r3
 8006da6:	f107 0318 	add.w	r3, r7, #24
 8006daa:	4611      	mov	r1, r2
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fd feeb 	bl	8004b88 <inc_lock>
 8006db2:	4602      	mov	r2, r0
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <f_open+0x22e>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006dc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f040 80a3 	bne.w	8006f16 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dd4:	4611      	mov	r1, r2
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7fe fd90 	bl	80058fc <ld_clust>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de4:	331c      	adds	r3, #28
 8006de6:	4618      	mov	r0, r3
 8006de8:	f7fd fd68 	bl	80048bc <ld_dword>
 8006dec:	4602      	mov	r2, r0
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	88da      	ldrh	r2, [r3, #6]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	79fa      	ldrb	r2, [r7, #7]
 8006e0a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3330      	adds	r3, #48	; 0x30
 8006e22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006e26:	2100      	movs	r1, #0
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd fdd2 	bl	80049d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006e2e:	79fb      	ldrb	r3, [r7, #7]
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d06e      	beq.n	8006f16 <f_open+0x37e>
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d06a      	beq.n	8006f16 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	895b      	ldrh	r3, [r3, #10]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	899b      	ldrh	r3, [r3, #12]
 8006e52:	fb03 f302 	mul.w	r3, r3, r2
 8006e56:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68db      	ldr	r3, [r3, #12]
 8006e62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e64:	e016      	b.n	8006e94 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	f7fe f87b 	bl	8004f66 <get_fat>
 8006e70:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8006e72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d802      	bhi.n	8006e7e <f_open+0x2e6>
 8006e78:	2302      	movs	r3, #2
 8006e7a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e84:	d102      	bne.n	8006e8c <f_open+0x2f4>
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006e8c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d103      	bne.n	8006ea4 <f_open+0x30c>
 8006e9c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d8e0      	bhi.n	8006e66 <f_open+0x2ce>
				}
				fp->clust = clst;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ea8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006eaa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d131      	bne.n	8006f16 <f_open+0x37e>
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	899b      	ldrh	r3, [r3, #12]
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eba:	fbb3 f1f2 	udiv	r1, r3, r2
 8006ebe:	fb02 f201 	mul.w	r2, r2, r1
 8006ec2:	1a9b      	subs	r3, r3, r2
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d026      	beq.n	8006f16 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7fe f82b 	bl	8004f28 <clust2sect>
 8006ed2:	64f8      	str	r0, [r7, #76]	; 0x4c
 8006ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d103      	bne.n	8006ee2 <f_open+0x34a>
						res = FR_INT_ERR;
 8006eda:	2302      	movs	r3, #2
 8006edc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006ee0:	e019      	b.n	8006f16 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	899b      	ldrh	r3, [r3, #12]
 8006ee6:	461a      	mov	r2, r3
 8006ee8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eea:	fbb3 f2f2 	udiv	r2, r3, r2
 8006eee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ef0:	441a      	add	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	7858      	ldrb	r0, [r3, #1]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	2301      	movs	r3, #1
 8006f06:	f7fd fc63 	bl	80047d0 <disk_read>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d002      	beq.n	8006f16 <f_open+0x37e>
 8006f10:	2301      	movs	r3, #1
 8006f12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8006f16:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <f_open+0x38c>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2200      	movs	r2, #0
 8006f22:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8006f24:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3768      	adds	r7, #104	; 0x68
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08c      	sub	sp, #48	; 0x30
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	2200      	movs	r2, #0
 8006f46:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f107 0210 	add.w	r2, r7, #16
 8006f4e:	4611      	mov	r1, r2
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7ff fda5 	bl	8006aa0 <validate>
 8006f56:	4603      	mov	r3, r0
 8006f58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006f5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d107      	bne.n	8006f74 <f_write+0x44>
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	7d5b      	ldrb	r3, [r3, #21]
 8006f68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8006f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <f_write+0x4a>
 8006f74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f78:	e16a      	b.n	8007250 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	7d1b      	ldrb	r3, [r3, #20]
 8006f7e:	f003 0302 	and.w	r3, r3, #2
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <f_write+0x5a>
 8006f86:	2307      	movs	r3, #7
 8006f88:	e162      	b.n	8007250 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	699a      	ldr	r2, [r3, #24]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	441a      	add	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	699b      	ldr	r3, [r3, #24]
 8006f96:	429a      	cmp	r2, r3
 8006f98:	f080 814c 	bcs.w	8007234 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006fa4:	e146      	b.n	8007234 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	8992      	ldrh	r2, [r2, #12]
 8006fae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006fb2:	fb02 f201 	mul.w	r2, r2, r1
 8006fb6:	1a9b      	subs	r3, r3, r2
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f040 80f1 	bne.w	80071a0 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	693a      	ldr	r2, [r7, #16]
 8006fc4:	8992      	ldrh	r2, [r2, #12]
 8006fc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fca:	693a      	ldr	r2, [r7, #16]
 8006fcc:	8952      	ldrh	r2, [r2, #10]
 8006fce:	3a01      	subs	r2, #1
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d143      	bne.n	8007062 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10c      	bne.n	8006ffc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d11a      	bne.n	8007024 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	2100      	movs	r1, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f7fe fa0c 	bl	8005410 <create_chain>
 8006ff8:	62b8      	str	r0, [r7, #40]	; 0x28
 8006ffa:	e013      	b.n	8007024 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007000:	2b00      	cmp	r3, #0
 8007002:	d007      	beq.n	8007014 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	4619      	mov	r1, r3
 800700a:	68f8      	ldr	r0, [r7, #12]
 800700c:	f7fe fa98 	bl	8005540 <clmt_clust>
 8007010:	62b8      	str	r0, [r7, #40]	; 0x28
 8007012:	e007      	b.n	8007024 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007014:	68fa      	ldr	r2, [r7, #12]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	69db      	ldr	r3, [r3, #28]
 800701a:	4619      	mov	r1, r3
 800701c:	4610      	mov	r0, r2
 800701e:	f7fe f9f7 	bl	8005410 <create_chain>
 8007022:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007026:	2b00      	cmp	r3, #0
 8007028:	f000 8109 	beq.w	800723e <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800702c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702e:	2b01      	cmp	r3, #1
 8007030:	d104      	bne.n	800703c <f_write+0x10c>
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2202      	movs	r2, #2
 8007036:	755a      	strb	r2, [r3, #21]
 8007038:	2302      	movs	r3, #2
 800703a:	e109      	b.n	8007250 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007042:	d104      	bne.n	800704e <f_write+0x11e>
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2201      	movs	r2, #1
 8007048:	755a      	strb	r2, [r3, #21]
 800704a:	2301      	movs	r3, #1
 800704c:	e100      	b.n	8007250 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007052:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d102      	bne.n	8007062 <f_write+0x132>
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007060:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	7d1b      	ldrb	r3, [r3, #20]
 8007066:	b25b      	sxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	da18      	bge.n	800709e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800706c:	693b      	ldr	r3, [r7, #16]
 800706e:	7858      	ldrb	r0, [r3, #1]
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	6a1a      	ldr	r2, [r3, #32]
 800707a:	2301      	movs	r3, #1
 800707c:	f7fd fbc8 	bl	8004810 <disk_write>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d004      	beq.n	8007090 <f_write+0x160>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2201      	movs	r2, #1
 800708a:	755a      	strb	r2, [r3, #21]
 800708c:	2301      	movs	r3, #1
 800708e:	e0df      	b.n	8007250 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	7d1b      	ldrb	r3, [r3, #20]
 8007094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007098:	b2da      	uxtb	r2, r3
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800709e:	693a      	ldr	r2, [r7, #16]
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	69db      	ldr	r3, [r3, #28]
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fd ff3e 	bl	8004f28 <clust2sect>
 80070ac:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d104      	bne.n	80070be <f_write+0x18e>
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	2202      	movs	r2, #2
 80070b8:	755a      	strb	r2, [r3, #21]
 80070ba:	2302      	movs	r3, #2
 80070bc:	e0c8      	b.n	8007250 <f_write+0x320>
			sect += csect;
 80070be:	697a      	ldr	r2, [r7, #20]
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	4413      	add	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	899b      	ldrh	r3, [r3, #12]
 80070ca:	461a      	mov	r2, r3
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80070d2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80070d4:	6a3b      	ldr	r3, [r7, #32]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d043      	beq.n	8007162 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80070da:	69ba      	ldr	r2, [r7, #24]
 80070dc:	6a3b      	ldr	r3, [r7, #32]
 80070de:	4413      	add	r3, r2
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	8952      	ldrh	r2, [r2, #10]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d905      	bls.n	80070f4 <f_write+0x1c4>
					cc = fs->csize - csect;
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	895b      	ldrh	r3, [r3, #10]
 80070ec:	461a      	mov	r2, r3
 80070ee:	69bb      	ldr	r3, [r7, #24]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	7858      	ldrb	r0, [r3, #1]
 80070f8:	6a3b      	ldr	r3, [r7, #32]
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	f7fd fb87 	bl	8004810 <disk_write>
 8007102:	4603      	mov	r3, r0
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <f_write+0x1e2>
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	755a      	strb	r2, [r3, #21]
 800710e:	2301      	movs	r3, #1
 8007110:	e09e      	b.n	8007250 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6a1a      	ldr	r2, [r3, #32]
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	6a3a      	ldr	r2, [r7, #32]
 800711c:	429a      	cmp	r2, r3
 800711e:	d918      	bls.n	8007152 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	697b      	ldr	r3, [r7, #20]
 800712c:	1ad3      	subs	r3, r2, r3
 800712e:	693a      	ldr	r2, [r7, #16]
 8007130:	8992      	ldrh	r2, [r2, #12]
 8007132:	fb02 f303 	mul.w	r3, r2, r3
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	18d1      	adds	r1, r2, r3
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	899b      	ldrh	r3, [r3, #12]
 800713e:	461a      	mov	r2, r3
 8007140:	f7fd fc26 	bl	8004990 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	7d1b      	ldrb	r3, [r3, #20]
 8007148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800714c:	b2da      	uxtb	r2, r3
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	899b      	ldrh	r3, [r3, #12]
 8007156:	461a      	mov	r2, r3
 8007158:	6a3b      	ldr	r3, [r7, #32]
 800715a:	fb02 f303 	mul.w	r3, r2, r3
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8007160:	e04b      	b.n	80071fa <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	6a1b      	ldr	r3, [r3, #32]
 8007166:	697a      	ldr	r2, [r7, #20]
 8007168:	429a      	cmp	r2, r3
 800716a:	d016      	beq.n	800719a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	699a      	ldr	r2, [r3, #24]
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007174:	429a      	cmp	r2, r3
 8007176:	d210      	bcs.n	800719a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	7858      	ldrb	r0, [r3, #1]
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007182:	2301      	movs	r3, #1
 8007184:	697a      	ldr	r2, [r7, #20]
 8007186:	f7fd fb23 	bl	80047d0 <disk_read>
 800718a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800718c:	2b00      	cmp	r3, #0
 800718e:	d004      	beq.n	800719a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2201      	movs	r2, #1
 8007194:	755a      	strb	r2, [r3, #21]
 8007196:	2301      	movs	r3, #1
 8007198:	e05a      	b.n	8007250 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	697a      	ldr	r2, [r7, #20]
 800719e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	899b      	ldrh	r3, [r3, #12]
 80071a4:	4618      	mov	r0, r3
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	693a      	ldr	r2, [r7, #16]
 80071ac:	8992      	ldrh	r2, [r2, #12]
 80071ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80071b2:	fb02 f201 	mul.w	r2, r2, r1
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	1ac3      	subs	r3, r0, r3
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80071bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d901      	bls.n	80071c8 <f_write+0x298>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	693a      	ldr	r2, [r7, #16]
 80071d4:	8992      	ldrh	r2, [r2, #12]
 80071d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80071da:	fb02 f200 	mul.w	r2, r2, r0
 80071de:	1a9b      	subs	r3, r3, r2
 80071e0:	440b      	add	r3, r1
 80071e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071e4:	69f9      	ldr	r1, [r7, #28]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f7fd fbd2 	bl	8004990 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	7d1b      	ldrb	r3, [r3, #20]
 80071f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80071f4:	b2da      	uxtb	r2, r3
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80071fa:	69fa      	ldr	r2, [r7, #28]
 80071fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fe:	4413      	add	r3, r2
 8007200:	61fb      	str	r3, [r7, #28]
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	441a      	add	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	619a      	str	r2, [r3, #24]
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	68da      	ldr	r2, [r3, #12]
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	429a      	cmp	r2, r3
 8007218:	bf38      	it	cc
 800721a:	461a      	movcc	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	60da      	str	r2, [r3, #12]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007226:	441a      	add	r2, r3
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007230:	1ad3      	subs	r3, r2, r3
 8007232:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2b00      	cmp	r3, #0
 8007238:	f47f aeb5 	bne.w	8006fa6 <f_write+0x76>
 800723c:	e000      	b.n	8007240 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800723e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	7d1b      	ldrb	r3, [r3, #20]
 8007244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007248:	b2da      	uxtb	r2, r3
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3730      	adds	r7, #48	; 0x30
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b086      	sub	sp, #24
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f107 0208 	add.w	r2, r7, #8
 8007266:	4611      	mov	r1, r2
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fc19 	bl	8006aa0 <validate>
 800726e:	4603      	mov	r3, r0
 8007270:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007272:	7dfb      	ldrb	r3, [r7, #23]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d168      	bne.n	800734a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	7d1b      	ldrb	r3, [r3, #20]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d062      	beq.n	800734a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	7d1b      	ldrb	r3, [r3, #20]
 8007288:	b25b      	sxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	da15      	bge.n	80072ba <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	7858      	ldrb	r0, [r3, #1]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a1a      	ldr	r2, [r3, #32]
 800729c:	2301      	movs	r3, #1
 800729e:	f7fd fab7 	bl	8004810 <disk_write>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d001      	beq.n	80072ac <f_sync+0x54>
 80072a8:	2301      	movs	r3, #1
 80072aa:	e04f      	b.n	800734c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	7d1b      	ldrb	r3, [r3, #20]
 80072b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80072ba:	f7fd f9dd 	bl	8004678 <get_fattime>
 80072be:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80072c0:	68ba      	ldr	r2, [r7, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072c6:	4619      	mov	r1, r3
 80072c8:	4610      	mov	r0, r2
 80072ca:	f7fd fd8f 	bl	8004dec <move_window>
 80072ce:	4603      	mov	r3, r0
 80072d0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80072d2:	7dfb      	ldrb	r3, [r7, #23]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d138      	bne.n	800734a <f_sync+0xf2>
					dir = fp->dir_ptr;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072dc:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	330b      	adds	r3, #11
 80072e2:	781a      	ldrb	r2, [r3, #0]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	330b      	adds	r3, #11
 80072e8:	f042 0220 	orr.w	r2, r2, #32
 80072ec:	b2d2      	uxtb	r2, r2
 80072ee:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6818      	ldr	r0, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	461a      	mov	r2, r3
 80072fa:	68f9      	ldr	r1, [r7, #12]
 80072fc:	f7fe fb1d 	bl	800593a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f103 021c 	add.w	r2, r3, #28
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	4619      	mov	r1, r3
 800730c:	4610      	mov	r0, r2
 800730e:	f7fd fb13 	bl	8004938 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	3316      	adds	r3, #22
 8007316:	6939      	ldr	r1, [r7, #16]
 8007318:	4618      	mov	r0, r3
 800731a:	f7fd fb0d 	bl	8004938 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	3312      	adds	r3, #18
 8007322:	2100      	movs	r1, #0
 8007324:	4618      	mov	r0, r3
 8007326:	f7fd faec 	bl	8004902 <st_word>
					fs->wflag = 1;
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2201      	movs	r2, #1
 800732e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	4618      	mov	r0, r3
 8007334:	f7fd fd88 	bl	8004e48 <sync_fs>
 8007338:	4603      	mov	r3, r0
 800733a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	7d1b      	ldrb	r3, [r3, #20]
 8007340:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007344:	b2da      	uxtb	r2, r3
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800734a:	7dfb      	ldrb	r3, [r7, #23]
}
 800734c:	4618      	mov	r0, r3
 800734e:	3718      	adds	r7, #24
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b084      	sub	sp, #16
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f7ff ff7b 	bl	8007258 <f_sync>
 8007362:	4603      	mov	r3, r0
 8007364:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007366:	7bfb      	ldrb	r3, [r7, #15]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d118      	bne.n	800739e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	f107 0208 	add.w	r2, r7, #8
 8007372:	4611      	mov	r1, r2
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff fb93 	bl	8006aa0 <validate>
 800737a:	4603      	mov	r3, r0
 800737c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800737e:	7bfb      	ldrb	r3, [r7, #15]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d10c      	bne.n	800739e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	4618      	mov	r0, r3
 800738a:	f7fd fc8b 	bl	8004ca4 <dec_lock>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2200      	movs	r2, #0
 800739c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800739e:	7bfb      	ldrb	r3, [r7, #15]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b090      	sub	sp, #64	; 0x40
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f107 0208 	add.w	r2, r7, #8
 80073b8:	4611      	mov	r1, r2
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7ff fb70 	bl	8006aa0 <validate>
 80073c0:	4603      	mov	r3, r0
 80073c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80073c6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d103      	bne.n	80073d6 <f_lseek+0x2e>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	7d5b      	ldrb	r3, [r3, #21]
 80073d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80073d6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <f_lseek+0x3c>
 80073de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80073e2:	e201      	b.n	80077e8 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	f000 80d9 	beq.w	80075a0 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073f4:	d15a      	bne.n	80074ac <f_lseek+0x104>
			tbl = fp->cltbl;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	1d1a      	adds	r2, r3, #4
 8007400:	627a      	str	r2, [r7, #36]	; 0x24
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	617b      	str	r3, [r7, #20]
 8007406:	2302      	movs	r3, #2
 8007408:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8007410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007412:	2b00      	cmp	r3, #0
 8007414:	d03a      	beq.n	800748c <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	2300      	movs	r3, #0
 800741c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	3302      	adds	r3, #2
 8007422:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800742a:	3301      	adds	r3, #1
 800742c:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007432:	4618      	mov	r0, r3
 8007434:	f7fd fd97 	bl	8004f66 <get_fat>
 8007438:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800743a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800743c:	2b01      	cmp	r3, #1
 800743e:	d804      	bhi.n	800744a <f_lseek+0xa2>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2202      	movs	r2, #2
 8007444:	755a      	strb	r2, [r3, #21]
 8007446:	2302      	movs	r3, #2
 8007448:	e1ce      	b.n	80077e8 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800744a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800744c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007450:	d104      	bne.n	800745c <f_lseek+0xb4>
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2201      	movs	r2, #1
 8007456:	755a      	strb	r2, [r3, #21]
 8007458:	2301      	movs	r3, #1
 800745a:	e1c5      	b.n	80077e8 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	3301      	adds	r3, #1
 8007460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007462:	429a      	cmp	r2, r3
 8007464:	d0de      	beq.n	8007424 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	429a      	cmp	r2, r3
 800746c:	d809      	bhi.n	8007482 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800746e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007470:	1d1a      	adds	r2, r3, #4
 8007472:	627a      	str	r2, [r7, #36]	; 0x24
 8007474:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007476:	601a      	str	r2, [r3, #0]
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	1d1a      	adds	r2, r3, #4
 800747c:	627a      	str	r2, [r7, #36]	; 0x24
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007488:	429a      	cmp	r2, r3
 800748a:	d3c4      	bcc.n	8007416 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007490:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007492:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007494:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	429a      	cmp	r2, r3
 800749a:	d803      	bhi.n	80074a4 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	2200      	movs	r2, #0
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	e19f      	b.n	80077e4 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 80074a4:	2311      	movs	r3, #17
 80074a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80074aa:	e19b      	b.n	80077e4 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	68db      	ldr	r3, [r3, #12]
 80074b0:	683a      	ldr	r2, [r7, #0]
 80074b2:	429a      	cmp	r2, r3
 80074b4:	d902      	bls.n	80074bc <f_lseek+0x114>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	68db      	ldr	r3, [r3, #12]
 80074ba:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	683a      	ldr	r2, [r7, #0]
 80074c0:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f000 818d 	beq.w	80077e4 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	3b01      	subs	r3, #1
 80074ce:	4619      	mov	r1, r3
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f7fe f835 	bl	8005540 <clmt_clust>
 80074d6:	4602      	mov	r2, r0
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80074dc:	68ba      	ldr	r2, [r7, #8]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	4619      	mov	r1, r3
 80074e4:	4610      	mov	r0, r2
 80074e6:	f7fd fd1f 	bl	8004f28 <clust2sect>
 80074ea:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d104      	bne.n	80074fc <f_lseek+0x154>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2202      	movs	r2, #2
 80074f6:	755a      	strb	r2, [r3, #21]
 80074f8:	2302      	movs	r3, #2
 80074fa:	e175      	b.n	80077e8 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	3b01      	subs	r3, #1
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	8992      	ldrh	r2, [r2, #12]
 8007504:	fbb3 f3f2 	udiv	r3, r3, r2
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	8952      	ldrh	r2, [r2, #10]
 800750c:	3a01      	subs	r2, #1
 800750e:	4013      	ands	r3, r2
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	4413      	add	r3, r2
 8007514:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	699b      	ldr	r3, [r3, #24]
 800751a:	68ba      	ldr	r2, [r7, #8]
 800751c:	8992      	ldrh	r2, [r2, #12]
 800751e:	fbb3 f1f2 	udiv	r1, r3, r2
 8007522:	fb02 f201 	mul.w	r2, r2, r1
 8007526:	1a9b      	subs	r3, r3, r2
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 815b 	beq.w	80077e4 <f_lseek+0x43c>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6a1b      	ldr	r3, [r3, #32]
 8007532:	69ba      	ldr	r2, [r7, #24]
 8007534:	429a      	cmp	r2, r3
 8007536:	f000 8155 	beq.w	80077e4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7d1b      	ldrb	r3, [r3, #20]
 800753e:	b25b      	sxtb	r3, r3
 8007540:	2b00      	cmp	r3, #0
 8007542:	da18      	bge.n	8007576 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	7858      	ldrb	r0, [r3, #1]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1a      	ldr	r2, [r3, #32]
 8007552:	2301      	movs	r3, #1
 8007554:	f7fd f95c 	bl	8004810 <disk_write>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d004      	beq.n	8007568 <f_lseek+0x1c0>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2201      	movs	r2, #1
 8007562:	755a      	strb	r2, [r3, #21]
 8007564:	2301      	movs	r3, #1
 8007566:	e13f      	b.n	80077e8 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	7d1b      	ldrb	r3, [r3, #20]
 800756c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007570:	b2da      	uxtb	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	7858      	ldrb	r0, [r3, #1]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007580:	2301      	movs	r3, #1
 8007582:	69ba      	ldr	r2, [r7, #24]
 8007584:	f7fd f924 	bl	80047d0 <disk_read>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d004      	beq.n	8007598 <f_lseek+0x1f0>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2201      	movs	r2, #1
 8007592:	755a      	strb	r2, [r3, #21]
 8007594:	2301      	movs	r3, #1
 8007596:	e127      	b.n	80077e8 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	621a      	str	r2, [r3, #32]
 800759e:	e121      	b.n	80077e4 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	683a      	ldr	r2, [r7, #0]
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d908      	bls.n	80075bc <f_lseek+0x214>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	7d1b      	ldrb	r3, [r3, #20]
 80075ae:	f003 0302 	and.w	r3, r3, #2
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d102      	bne.n	80075bc <f_lseek+0x214>
			ofs = fp->obj.objsize;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 80075c2:	2300      	movs	r3, #0
 80075c4:	637b      	str	r3, [r7, #52]	; 0x34
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80075ca:	619a      	str	r2, [r3, #24]
		if (ofs) {
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	f000 80b5 	beq.w	800773e <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	895b      	ldrh	r3, [r3, #10]
 80075d8:	461a      	mov	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	899b      	ldrh	r3, [r3, #12]
 80075de:	fb03 f302 	mul.w	r3, r3, r2
 80075e2:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01b      	beq.n	8007622 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	1e5a      	subs	r2, r3, #1
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	1e59      	subs	r1, r3, #1
 80075f8:	69fb      	ldr	r3, [r7, #28]
 80075fa:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80075fe:	429a      	cmp	r2, r3
 8007600:	d30f      	bcc.n	8007622 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007602:	6a3b      	ldr	r3, [r7, #32]
 8007604:	1e5a      	subs	r2, r3, #1
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	425b      	negs	r3, r3
 800760a:	401a      	ands	r2, r3
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	683a      	ldr	r2, [r7, #0]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	69db      	ldr	r3, [r3, #28]
 800761e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007620:	e022      	b.n	8007668 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007628:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762a:	2b00      	cmp	r3, #0
 800762c:	d119      	bne.n	8007662 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2100      	movs	r1, #0
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd feec 	bl	8005410 <create_chain>
 8007638:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800763a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763c:	2b01      	cmp	r3, #1
 800763e:	d104      	bne.n	800764a <f_lseek+0x2a2>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	2202      	movs	r2, #2
 8007644:	755a      	strb	r2, [r3, #21]
 8007646:	2302      	movs	r3, #2
 8007648:	e0ce      	b.n	80077e8 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800764a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007650:	d104      	bne.n	800765c <f_lseek+0x2b4>
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2201      	movs	r2, #1
 8007656:	755a      	strb	r2, [r3, #21]
 8007658:	2301      	movs	r3, #1
 800765a:	e0c5      	b.n	80077e8 <f_lseek+0x440>
					fp->obj.sclust = clst;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007660:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007666:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766a:	2b00      	cmp	r3, #0
 800766c:	d067      	beq.n	800773e <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 800766e:	e03a      	b.n	80076e6 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007670:	683a      	ldr	r2, [r7, #0]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	1ad3      	subs	r3, r2, r3
 8007676:	603b      	str	r3, [r7, #0]
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699a      	ldr	r2, [r3, #24]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	441a      	add	r2, r3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	7d1b      	ldrb	r3, [r3, #20]
 8007688:	f003 0302 	and.w	r3, r3, #2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d00b      	beq.n	80076a8 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd febb 	bl	8005410 <create_chain>
 800769a:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d108      	bne.n	80076b4 <f_lseek+0x30c>
							ofs = 0; break;
 80076a2:	2300      	movs	r3, #0
 80076a4:	603b      	str	r3, [r7, #0]
 80076a6:	e022      	b.n	80076ee <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fd fc5a 	bl	8004f66 <get_fat>
 80076b2:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80076b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ba:	d104      	bne.n	80076c6 <f_lseek+0x31e>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	755a      	strb	r2, [r3, #21]
 80076c2:	2301      	movs	r3, #1
 80076c4:	e090      	b.n	80077e8 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 80076c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d904      	bls.n	80076d6 <f_lseek+0x32e>
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	69db      	ldr	r3, [r3, #28]
 80076d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d304      	bcc.n	80076e0 <f_lseek+0x338>
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2202      	movs	r2, #2
 80076da:	755a      	strb	r2, [r3, #21]
 80076dc:	2302      	movs	r3, #2
 80076de:	e083      	b.n	80077e8 <f_lseek+0x440>
					fp->clust = clst;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e4:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	69fb      	ldr	r3, [r7, #28]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d8c0      	bhi.n	8007670 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	699a      	ldr	r2, [r3, #24]
 80076f2:	683b      	ldr	r3, [r7, #0]
 80076f4:	441a      	add	r2, r3
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	899b      	ldrh	r3, [r3, #12]
 80076fe:	461a      	mov	r2, r3
 8007700:	683b      	ldr	r3, [r7, #0]
 8007702:	fbb3 f1f2 	udiv	r1, r3, r2
 8007706:	fb02 f201 	mul.w	r2, r2, r1
 800770a:	1a9b      	subs	r3, r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d016      	beq.n	800773e <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007714:	4618      	mov	r0, r3
 8007716:	f7fd fc07 	bl	8004f28 <clust2sect>
 800771a:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800771c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <f_lseek+0x384>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2202      	movs	r2, #2
 8007726:	755a      	strb	r2, [r3, #21]
 8007728:	2302      	movs	r3, #2
 800772a:	e05d      	b.n	80077e8 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	899b      	ldrh	r3, [r3, #12]
 8007730:	461a      	mov	r2, r3
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	fbb3 f3f2 	udiv	r3, r3, r2
 8007738:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800773a:	4413      	add	r3, r2
 800773c:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	429a      	cmp	r2, r3
 8007748:	d90a      	bls.n	8007760 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	699a      	ldr	r2, [r3, #24]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	7d1b      	ldrb	r3, [r3, #20]
 8007756:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800775a:	b2da      	uxtb	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	699b      	ldr	r3, [r3, #24]
 8007764:	68ba      	ldr	r2, [r7, #8]
 8007766:	8992      	ldrh	r2, [r2, #12]
 8007768:	fbb3 f1f2 	udiv	r1, r3, r2
 800776c:	fb02 f201 	mul.w	r2, r2, r1
 8007770:	1a9b      	subs	r3, r3, r2
 8007772:	2b00      	cmp	r3, #0
 8007774:	d036      	beq.n	80077e4 <f_lseek+0x43c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800777c:	429a      	cmp	r2, r3
 800777e:	d031      	beq.n	80077e4 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	7d1b      	ldrb	r3, [r3, #20]
 8007784:	b25b      	sxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	da18      	bge.n	80077bc <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	7858      	ldrb	r0, [r3, #1]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a1a      	ldr	r2, [r3, #32]
 8007798:	2301      	movs	r3, #1
 800779a:	f7fd f839 	bl	8004810 <disk_write>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d004      	beq.n	80077ae <f_lseek+0x406>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	755a      	strb	r2, [r3, #21]
 80077aa:	2301      	movs	r3, #1
 80077ac:	e01c      	b.n	80077e8 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	7d1b      	ldrb	r3, [r3, #20]
 80077b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	7858      	ldrb	r0, [r3, #1]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80077c6:	2301      	movs	r3, #1
 80077c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077ca:	f7fd f801 	bl	80047d0 <disk_read>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d004      	beq.n	80077de <f_lseek+0x436>
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	755a      	strb	r2, [r3, #21]
 80077da:	2301      	movs	r3, #1
 80077dc:	e004      	b.n	80077e8 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077e2:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 80077e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3740      	adds	r7, #64	; 0x40
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}

080077f0 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b092      	sub	sp, #72	; 0x48
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80077fc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007800:	f107 030c 	add.w	r3, r7, #12
 8007804:	2200      	movs	r2, #0
 8007806:	4618      	mov	r0, r3
 8007808:	f7fe fec2 	bl	8006590 <find_volume>
 800780c:	4603      	mov	r3, r0
 800780e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007812:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007816:	2b00      	cmp	r3, #0
 8007818:	f040 8099 	bne.w	800794e <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800781c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	699a      	ldr	r2, [r3, #24]
 8007826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	3b02      	subs	r3, #2
 800782c:	429a      	cmp	r2, r3
 800782e:	d804      	bhi.n	800783a <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007832:	699a      	ldr	r2, [r3, #24]
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	e089      	b.n	800794e <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800783a:	2300      	movs	r3, #0
 800783c:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d128      	bne.n	8007898 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007846:	2302      	movs	r3, #2
 8007848:	63fb      	str	r3, [r7, #60]	; 0x3c
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800784e:	f107 0314 	add.w	r3, r7, #20
 8007852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007854:	4618      	mov	r0, r3
 8007856:	f7fd fb86 	bl	8004f66 <get_fat>
 800785a:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800785c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800785e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007862:	d103      	bne.n	800786c <f_getfree+0x7c>
 8007864:	2301      	movs	r3, #1
 8007866:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800786a:	e063      	b.n	8007934 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800786c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800786e:	2b01      	cmp	r3, #1
 8007870:	d103      	bne.n	800787a <f_getfree+0x8a>
 8007872:	2302      	movs	r3, #2
 8007874:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007878:	e05c      	b.n	8007934 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800787a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <f_getfree+0x96>
 8007880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007882:	3301      	adds	r3, #1
 8007884:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007888:	3301      	adds	r3, #1
 800788a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	69db      	ldr	r3, [r3, #28]
 8007890:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007892:	429a      	cmp	r2, r3
 8007894:	d3db      	bcc.n	800784e <f_getfree+0x5e>
 8007896:	e04d      	b.n	8007934 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a2:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 80078a4:	2300      	movs	r3, #0
 80078a6:	637b      	str	r3, [r7, #52]	; 0x34
 80078a8:	2300      	movs	r3, #0
 80078aa:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 80078ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d113      	bne.n	80078da <f_getfree+0xea>
							res = move_window(fs, sect++);
 80078b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	1c5a      	adds	r2, r3, #1
 80078b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80078ba:	4619      	mov	r1, r3
 80078bc:	f7fd fa96 	bl	8004dec <move_window>
 80078c0:	4603      	mov	r3, r0
 80078c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 80078c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d131      	bne.n	8007932 <f_getfree+0x142>
							p = fs->win;
 80078ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d0:	3338      	adds	r3, #56	; 0x38
 80078d2:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 80078d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d6:	899b      	ldrh	r3, [r3, #12]
 80078d8:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80078da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d10f      	bne.n	8007902 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80078e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80078e4:	f7fc ffd2 	bl	800488c <ld_word>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d102      	bne.n	80078f4 <f_getfree+0x104>
 80078ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078f0:	3301      	adds	r3, #1
 80078f2:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 80078f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f6:	3302      	adds	r3, #2
 80078f8:	633b      	str	r3, [r7, #48]	; 0x30
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	3b02      	subs	r3, #2
 80078fe:	637b      	str	r3, [r7, #52]	; 0x34
 8007900:	e010      	b.n	8007924 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007902:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007904:	f7fc ffda 	bl	80048bc <ld_dword>
 8007908:	4603      	mov	r3, r0
 800790a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800790e:	2b00      	cmp	r3, #0
 8007910:	d102      	bne.n	8007918 <f_getfree+0x128>
 8007912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007914:	3301      	adds	r3, #1
 8007916:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	3304      	adds	r3, #4
 800791c:	633b      	str	r3, [r7, #48]	; 0x30
 800791e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007920:	3b04      	subs	r3, #4
 8007922:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007926:	3b01      	subs	r3, #1
 8007928:	63fb      	str	r3, [r7, #60]	; 0x3c
 800792a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800792c:	2b00      	cmp	r3, #0
 800792e:	d1bd      	bne.n	80078ac <f_getfree+0xbc>
 8007930:	e000      	b.n	8007934 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007932:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007938:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800793a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800793c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800793e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007942:	791a      	ldrb	r2, [r3, #4]
 8007944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007946:	f042 0201 	orr.w	r2, r2, #1
 800794a:	b2d2      	uxtb	r2, r2
 800794c:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800794e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007952:	4618      	mov	r0, r3
 8007954:	3748      	adds	r7, #72	; 0x48
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800795c:	b480      	push	{r7}
 800795e:	b087      	sub	sp, #28
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	4613      	mov	r3, r2
 8007968:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800796a:	2301      	movs	r3, #1
 800796c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800796e:	2300      	movs	r3, #0
 8007970:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007972:	4b1f      	ldr	r3, [pc, #124]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007974:	7a5b      	ldrb	r3, [r3, #9]
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b00      	cmp	r3, #0
 800797a:	d131      	bne.n	80079e0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800797c:	4b1c      	ldr	r3, [pc, #112]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800797e:	7a5b      	ldrb	r3, [r3, #9]
 8007980:	b2db      	uxtb	r3, r3
 8007982:	461a      	mov	r2, r3
 8007984:	4b1a      	ldr	r3, [pc, #104]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007986:	2100      	movs	r1, #0
 8007988:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800798a:	4b19      	ldr	r3, [pc, #100]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800798c:	7a5b      	ldrb	r3, [r3, #9]
 800798e:	b2db      	uxtb	r3, r3
 8007990:	4a17      	ldr	r2, [pc, #92]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800799a:	4b15      	ldr	r3, [pc, #84]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 800799c:	7a5b      	ldrb	r3, [r3, #9]
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	4b13      	ldr	r3, [pc, #76]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079a4:	4413      	add	r3, r2
 80079a6:	79fa      	ldrb	r2, [r7, #7]
 80079a8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079aa:	4b11      	ldr	r3, [pc, #68]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079ac:	7a5b      	ldrb	r3, [r3, #9]
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	b2d1      	uxtb	r1, r2
 80079b4:	4a0e      	ldr	r2, [pc, #56]	; (80079f0 <FATFS_LinkDriverEx+0x94>)
 80079b6:	7251      	strb	r1, [r2, #9]
 80079b8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079ba:	7dbb      	ldrb	r3, [r7, #22]
 80079bc:	3330      	adds	r3, #48	; 0x30
 80079be:	b2da      	uxtb	r2, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	3301      	adds	r3, #1
 80079c8:	223a      	movs	r2, #58	; 0x3a
 80079ca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3302      	adds	r3, #2
 80079d0:	222f      	movs	r2, #47	; 0x2f
 80079d2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3303      	adds	r3, #3
 80079d8:	2200      	movs	r2, #0
 80079da:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	371c      	adds	r7, #28
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr
 80079ee:	bf00      	nop
 80079f0:	200002f4 	.word	0x200002f4

080079f4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80079fe:	2200      	movs	r2, #0
 8007a00:	6839      	ldr	r1, [r7, #0]
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ffaa 	bl	800795c <FATFS_LinkDriverEx>
 8007a08:	4603      	mov	r3, r0
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
	...

08007a14 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	6039      	str	r1, [r7, #0]
 8007a1e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007a20:	88fb      	ldrh	r3, [r7, #6]
 8007a22:	2b7f      	cmp	r3, #127	; 0x7f
 8007a24:	d802      	bhi.n	8007a2c <ff_convert+0x18>
		c = chr;
 8007a26:	88fb      	ldrh	r3, [r7, #6]
 8007a28:	81fb      	strh	r3, [r7, #14]
 8007a2a:	e025      	b.n	8007a78 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d00b      	beq.n	8007a4a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	2bff      	cmp	r3, #255	; 0xff
 8007a36:	d805      	bhi.n	8007a44 <ff_convert+0x30>
 8007a38:	88fb      	ldrh	r3, [r7, #6]
 8007a3a:	3b80      	subs	r3, #128	; 0x80
 8007a3c:	4a12      	ldr	r2, [pc, #72]	; (8007a88 <ff_convert+0x74>)
 8007a3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a42:	e000      	b.n	8007a46 <ff_convert+0x32>
 8007a44:	2300      	movs	r3, #0
 8007a46:	81fb      	strh	r3, [r7, #14]
 8007a48:	e016      	b.n	8007a78 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	81fb      	strh	r3, [r7, #14]
 8007a4e:	e009      	b.n	8007a64 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007a50:	89fb      	ldrh	r3, [r7, #14]
 8007a52:	4a0d      	ldr	r2, [pc, #52]	; (8007a88 <ff_convert+0x74>)
 8007a54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007a58:	88fa      	ldrh	r2, [r7, #6]
 8007a5a:	429a      	cmp	r2, r3
 8007a5c:	d006      	beq.n	8007a6c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007a5e:	89fb      	ldrh	r3, [r7, #14]
 8007a60:	3301      	adds	r3, #1
 8007a62:	81fb      	strh	r3, [r7, #14]
 8007a64:	89fb      	ldrh	r3, [r7, #14]
 8007a66:	2b7f      	cmp	r3, #127	; 0x7f
 8007a68:	d9f2      	bls.n	8007a50 <ff_convert+0x3c>
 8007a6a:	e000      	b.n	8007a6e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007a6c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007a6e:	89fb      	ldrh	r3, [r7, #14]
 8007a70:	3380      	adds	r3, #128	; 0x80
 8007a72:	b29b      	uxth	r3, r3
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007a78:	89fb      	ldrh	r3, [r7, #14]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr
 8007a86:	bf00      	nop
 8007a88:	08008634 	.word	0x08008634

08007a8c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b087      	sub	sp, #28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9c:	d201      	bcs.n	8007aa2 <ff_wtoupper+0x16>
 8007a9e:	4b3e      	ldr	r3, [pc, #248]	; (8007b98 <ff_wtoupper+0x10c>)
 8007aa0:	e000      	b.n	8007aa4 <ff_wtoupper+0x18>
 8007aa2:	4b3e      	ldr	r3, [pc, #248]	; (8007b9c <ff_wtoupper+0x110>)
 8007aa4:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	1c9a      	adds	r2, r3, #2
 8007aaa:	617a      	str	r2, [r7, #20]
 8007aac:	881b      	ldrh	r3, [r3, #0]
 8007aae:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007ab0:	8a7b      	ldrh	r3, [r7, #18]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d068      	beq.n	8007b88 <ff_wtoupper+0xfc>
 8007ab6:	88fa      	ldrh	r2, [r7, #6]
 8007ab8:	8a7b      	ldrh	r3, [r7, #18]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d364      	bcc.n	8007b88 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007abe:	697b      	ldr	r3, [r7, #20]
 8007ac0:	1c9a      	adds	r2, r3, #2
 8007ac2:	617a      	str	r2, [r7, #20]
 8007ac4:	881b      	ldrh	r3, [r3, #0]
 8007ac6:	823b      	strh	r3, [r7, #16]
 8007ac8:	8a3b      	ldrh	r3, [r7, #16]
 8007aca:	0a1b      	lsrs	r3, r3, #8
 8007acc:	81fb      	strh	r3, [r7, #14]
 8007ace:	8a3b      	ldrh	r3, [r7, #16]
 8007ad0:	b2db      	uxtb	r3, r3
 8007ad2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007ad4:	88fa      	ldrh	r2, [r7, #6]
 8007ad6:	8a79      	ldrh	r1, [r7, #18]
 8007ad8:	8a3b      	ldrh	r3, [r7, #16]
 8007ada:	440b      	add	r3, r1
 8007adc:	429a      	cmp	r2, r3
 8007ade:	da49      	bge.n	8007b74 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007ae0:	89fb      	ldrh	r3, [r7, #14]
 8007ae2:	2b08      	cmp	r3, #8
 8007ae4:	d84f      	bhi.n	8007b86 <ff_wtoupper+0xfa>
 8007ae6:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <ff_wtoupper+0x60>)
 8007ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b23 	.word	0x08007b23
 8007af4:	08007b39 	.word	0x08007b39
 8007af8:	08007b41 	.word	0x08007b41
 8007afc:	08007b49 	.word	0x08007b49
 8007b00:	08007b51 	.word	0x08007b51
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007b61 	.word	0x08007b61
 8007b0c:	08007b69 	.word	0x08007b69
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007b10:	88fa      	ldrh	r2, [r7, #6]
 8007b12:	8a7b      	ldrh	r3, [r7, #18]
 8007b14:	1ad3      	subs	r3, r2, r3
 8007b16:	005b      	lsls	r3, r3, #1
 8007b18:	697a      	ldr	r2, [r7, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	80fb      	strh	r3, [r7, #6]
 8007b20:	e027      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007b22:	88fa      	ldrh	r2, [r7, #6]
 8007b24:	8a7b      	ldrh	r3, [r7, #18]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	b29b      	uxth	r3, r3
 8007b2a:	f003 0301 	and.w	r3, r3, #1
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	88fa      	ldrh	r2, [r7, #6]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	80fb      	strh	r3, [r7, #6]
 8007b36:	e01c      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007b38:	88fb      	ldrh	r3, [r7, #6]
 8007b3a:	3b10      	subs	r3, #16
 8007b3c:	80fb      	strh	r3, [r7, #6]
 8007b3e:	e018      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007b40:	88fb      	ldrh	r3, [r7, #6]
 8007b42:	3b20      	subs	r3, #32
 8007b44:	80fb      	strh	r3, [r7, #6]
 8007b46:	e014      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007b48:	88fb      	ldrh	r3, [r7, #6]
 8007b4a:	3b30      	subs	r3, #48	; 0x30
 8007b4c:	80fb      	strh	r3, [r7, #6]
 8007b4e:	e010      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007b50:	88fb      	ldrh	r3, [r7, #6]
 8007b52:	3b1a      	subs	r3, #26
 8007b54:	80fb      	strh	r3, [r7, #6]
 8007b56:	e00c      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007b58:	88fb      	ldrh	r3, [r7, #6]
 8007b5a:	3308      	adds	r3, #8
 8007b5c:	80fb      	strh	r3, [r7, #6]
 8007b5e:	e008      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007b60:	88fb      	ldrh	r3, [r7, #6]
 8007b62:	3b50      	subs	r3, #80	; 0x50
 8007b64:	80fb      	strh	r3, [r7, #6]
 8007b66:	e004      	b.n	8007b72 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007b68:	88fb      	ldrh	r3, [r7, #6]
 8007b6a:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8007b6e:	80fb      	strh	r3, [r7, #6]
 8007b70:	bf00      	nop
			}
			break;
 8007b72:	e008      	b.n	8007b86 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007b74:	89fb      	ldrh	r3, [r7, #14]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d195      	bne.n	8007aa6 <ff_wtoupper+0x1a>
 8007b7a:	8a3b      	ldrh	r3, [r7, #16]
 8007b7c:	005b      	lsls	r3, r3, #1
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	4413      	add	r3, r2
 8007b82:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007b84:	e78f      	b.n	8007aa6 <ff_wtoupper+0x1a>
			break;
 8007b86:	bf00      	nop
	}

	return chr;
 8007b88:	88fb      	ldrh	r3, [r7, #6]
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	371c      	adds	r7, #28
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr
 8007b96:	bf00      	nop
 8007b98:	08008734 	.word	0x08008734
 8007b9c:	08008928 	.word	0x08008928

08007ba0 <__errno>:
 8007ba0:	4b01      	ldr	r3, [pc, #4]	; (8007ba8 <__errno+0x8>)
 8007ba2:	6818      	ldr	r0, [r3, #0]
 8007ba4:	4770      	bx	lr
 8007ba6:	bf00      	nop
 8007ba8:	20000034 	.word	0x20000034

08007bac <__libc_init_array>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	4d0d      	ldr	r5, [pc, #52]	; (8007be4 <__libc_init_array+0x38>)
 8007bb0:	4c0d      	ldr	r4, [pc, #52]	; (8007be8 <__libc_init_array+0x3c>)
 8007bb2:	1b64      	subs	r4, r4, r5
 8007bb4:	10a4      	asrs	r4, r4, #2
 8007bb6:	2600      	movs	r6, #0
 8007bb8:	42a6      	cmp	r6, r4
 8007bba:	d109      	bne.n	8007bd0 <__libc_init_array+0x24>
 8007bbc:	4d0b      	ldr	r5, [pc, #44]	; (8007bec <__libc_init_array+0x40>)
 8007bbe:	4c0c      	ldr	r4, [pc, #48]	; (8007bf0 <__libc_init_array+0x44>)
 8007bc0:	f000 fc4e 	bl	8008460 <_init>
 8007bc4:	1b64      	subs	r4, r4, r5
 8007bc6:	10a4      	asrs	r4, r4, #2
 8007bc8:	2600      	movs	r6, #0
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	d105      	bne.n	8007bda <__libc_init_array+0x2e>
 8007bce:	bd70      	pop	{r4, r5, r6, pc}
 8007bd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bd4:	4798      	blx	r3
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7ee      	b.n	8007bb8 <__libc_init_array+0xc>
 8007bda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bde:	4798      	blx	r3
 8007be0:	3601      	adds	r6, #1
 8007be2:	e7f2      	b.n	8007bca <__libc_init_array+0x1e>
 8007be4:	08008a20 	.word	0x08008a20
 8007be8:	08008a20 	.word	0x08008a20
 8007bec:	08008a20 	.word	0x08008a20
 8007bf0:	08008a24 	.word	0x08008a24

08007bf4 <memset>:
 8007bf4:	4402      	add	r2, r0
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d100      	bne.n	8007bfe <memset+0xa>
 8007bfc:	4770      	bx	lr
 8007bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8007c02:	e7f9      	b.n	8007bf8 <memset+0x4>

08007c04 <siprintf>:
 8007c04:	b40e      	push	{r1, r2, r3}
 8007c06:	b500      	push	{lr}
 8007c08:	b09c      	sub	sp, #112	; 0x70
 8007c0a:	ab1d      	add	r3, sp, #116	; 0x74
 8007c0c:	9002      	str	r0, [sp, #8]
 8007c0e:	9006      	str	r0, [sp, #24]
 8007c10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c14:	4809      	ldr	r0, [pc, #36]	; (8007c3c <siprintf+0x38>)
 8007c16:	9107      	str	r1, [sp, #28]
 8007c18:	9104      	str	r1, [sp, #16]
 8007c1a:	4909      	ldr	r1, [pc, #36]	; (8007c40 <siprintf+0x3c>)
 8007c1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c20:	9105      	str	r1, [sp, #20]
 8007c22:	6800      	ldr	r0, [r0, #0]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	a902      	add	r1, sp, #8
 8007c28:	f000 f868 	bl	8007cfc <_svfiprintf_r>
 8007c2c:	9b02      	ldr	r3, [sp, #8]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	701a      	strb	r2, [r3, #0]
 8007c32:	b01c      	add	sp, #112	; 0x70
 8007c34:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c38:	b003      	add	sp, #12
 8007c3a:	4770      	bx	lr
 8007c3c:	20000034 	.word	0x20000034
 8007c40:	ffff0208 	.word	0xffff0208

08007c44 <__ssputs_r>:
 8007c44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c48:	688e      	ldr	r6, [r1, #8]
 8007c4a:	429e      	cmp	r6, r3
 8007c4c:	4682      	mov	sl, r0
 8007c4e:	460c      	mov	r4, r1
 8007c50:	4690      	mov	r8, r2
 8007c52:	461f      	mov	r7, r3
 8007c54:	d838      	bhi.n	8007cc8 <__ssputs_r+0x84>
 8007c56:	898a      	ldrh	r2, [r1, #12]
 8007c58:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c5c:	d032      	beq.n	8007cc4 <__ssputs_r+0x80>
 8007c5e:	6825      	ldr	r5, [r4, #0]
 8007c60:	6909      	ldr	r1, [r1, #16]
 8007c62:	eba5 0901 	sub.w	r9, r5, r1
 8007c66:	6965      	ldr	r5, [r4, #20]
 8007c68:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c6c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c70:	3301      	adds	r3, #1
 8007c72:	444b      	add	r3, r9
 8007c74:	106d      	asrs	r5, r5, #1
 8007c76:	429d      	cmp	r5, r3
 8007c78:	bf38      	it	cc
 8007c7a:	461d      	movcc	r5, r3
 8007c7c:	0553      	lsls	r3, r2, #21
 8007c7e:	d531      	bpl.n	8007ce4 <__ssputs_r+0xa0>
 8007c80:	4629      	mov	r1, r5
 8007c82:	f000 fb47 	bl	8008314 <_malloc_r>
 8007c86:	4606      	mov	r6, r0
 8007c88:	b950      	cbnz	r0, 8007ca0 <__ssputs_r+0x5c>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	f8ca 3000 	str.w	r3, [sl]
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c96:	81a3      	strh	r3, [r4, #12]
 8007c98:	f04f 30ff 	mov.w	r0, #4294967295
 8007c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca0:	6921      	ldr	r1, [r4, #16]
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	f000 fabe 	bl	8008224 <memcpy>
 8007ca8:	89a3      	ldrh	r3, [r4, #12]
 8007caa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cb2:	81a3      	strh	r3, [r4, #12]
 8007cb4:	6126      	str	r6, [r4, #16]
 8007cb6:	6165      	str	r5, [r4, #20]
 8007cb8:	444e      	add	r6, r9
 8007cba:	eba5 0509 	sub.w	r5, r5, r9
 8007cbe:	6026      	str	r6, [r4, #0]
 8007cc0:	60a5      	str	r5, [r4, #8]
 8007cc2:	463e      	mov	r6, r7
 8007cc4:	42be      	cmp	r6, r7
 8007cc6:	d900      	bls.n	8007cca <__ssputs_r+0x86>
 8007cc8:	463e      	mov	r6, r7
 8007cca:	4632      	mov	r2, r6
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	4641      	mov	r1, r8
 8007cd0:	f000 fab6 	bl	8008240 <memmove>
 8007cd4:	68a3      	ldr	r3, [r4, #8]
 8007cd6:	6822      	ldr	r2, [r4, #0]
 8007cd8:	1b9b      	subs	r3, r3, r6
 8007cda:	4432      	add	r2, r6
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	6022      	str	r2, [r4, #0]
 8007ce0:	2000      	movs	r0, #0
 8007ce2:	e7db      	b.n	8007c9c <__ssputs_r+0x58>
 8007ce4:	462a      	mov	r2, r5
 8007ce6:	f000 fb6f 	bl	80083c8 <_realloc_r>
 8007cea:	4606      	mov	r6, r0
 8007cec:	2800      	cmp	r0, #0
 8007cee:	d1e1      	bne.n	8007cb4 <__ssputs_r+0x70>
 8007cf0:	6921      	ldr	r1, [r4, #16]
 8007cf2:	4650      	mov	r0, sl
 8007cf4:	f000 fabe 	bl	8008274 <_free_r>
 8007cf8:	e7c7      	b.n	8007c8a <__ssputs_r+0x46>
	...

08007cfc <_svfiprintf_r>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	4698      	mov	r8, r3
 8007d02:	898b      	ldrh	r3, [r1, #12]
 8007d04:	061b      	lsls	r3, r3, #24
 8007d06:	b09d      	sub	sp, #116	; 0x74
 8007d08:	4607      	mov	r7, r0
 8007d0a:	460d      	mov	r5, r1
 8007d0c:	4614      	mov	r4, r2
 8007d0e:	d50e      	bpl.n	8007d2e <_svfiprintf_r+0x32>
 8007d10:	690b      	ldr	r3, [r1, #16]
 8007d12:	b963      	cbnz	r3, 8007d2e <_svfiprintf_r+0x32>
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	f000 fafd 	bl	8008314 <_malloc_r>
 8007d1a:	6028      	str	r0, [r5, #0]
 8007d1c:	6128      	str	r0, [r5, #16]
 8007d1e:	b920      	cbnz	r0, 8007d2a <_svfiprintf_r+0x2e>
 8007d20:	230c      	movs	r3, #12
 8007d22:	603b      	str	r3, [r7, #0]
 8007d24:	f04f 30ff 	mov.w	r0, #4294967295
 8007d28:	e0d1      	b.n	8007ece <_svfiprintf_r+0x1d2>
 8007d2a:	2340      	movs	r3, #64	; 0x40
 8007d2c:	616b      	str	r3, [r5, #20]
 8007d2e:	2300      	movs	r3, #0
 8007d30:	9309      	str	r3, [sp, #36]	; 0x24
 8007d32:	2320      	movs	r3, #32
 8007d34:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d38:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d3c:	2330      	movs	r3, #48	; 0x30
 8007d3e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007ee8 <_svfiprintf_r+0x1ec>
 8007d42:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d46:	f04f 0901 	mov.w	r9, #1
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	469a      	mov	sl, r3
 8007d4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d52:	b10a      	cbz	r2, 8007d58 <_svfiprintf_r+0x5c>
 8007d54:	2a25      	cmp	r2, #37	; 0x25
 8007d56:	d1f9      	bne.n	8007d4c <_svfiprintf_r+0x50>
 8007d58:	ebba 0b04 	subs.w	fp, sl, r4
 8007d5c:	d00b      	beq.n	8007d76 <_svfiprintf_r+0x7a>
 8007d5e:	465b      	mov	r3, fp
 8007d60:	4622      	mov	r2, r4
 8007d62:	4629      	mov	r1, r5
 8007d64:	4638      	mov	r0, r7
 8007d66:	f7ff ff6d 	bl	8007c44 <__ssputs_r>
 8007d6a:	3001      	adds	r0, #1
 8007d6c:	f000 80aa 	beq.w	8007ec4 <_svfiprintf_r+0x1c8>
 8007d70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007d72:	445a      	add	r2, fp
 8007d74:	9209      	str	r2, [sp, #36]	; 0x24
 8007d76:	f89a 3000 	ldrb.w	r3, [sl]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f000 80a2 	beq.w	8007ec4 <_svfiprintf_r+0x1c8>
 8007d80:	2300      	movs	r3, #0
 8007d82:	f04f 32ff 	mov.w	r2, #4294967295
 8007d86:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d8a:	f10a 0a01 	add.w	sl, sl, #1
 8007d8e:	9304      	str	r3, [sp, #16]
 8007d90:	9307      	str	r3, [sp, #28]
 8007d92:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d96:	931a      	str	r3, [sp, #104]	; 0x68
 8007d98:	4654      	mov	r4, sl
 8007d9a:	2205      	movs	r2, #5
 8007d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007da0:	4851      	ldr	r0, [pc, #324]	; (8007ee8 <_svfiprintf_r+0x1ec>)
 8007da2:	f7f8 fa25 	bl	80001f0 <memchr>
 8007da6:	9a04      	ldr	r2, [sp, #16]
 8007da8:	b9d8      	cbnz	r0, 8007de2 <_svfiprintf_r+0xe6>
 8007daa:	06d0      	lsls	r0, r2, #27
 8007dac:	bf44      	itt	mi
 8007dae:	2320      	movmi	r3, #32
 8007db0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007db4:	0711      	lsls	r1, r2, #28
 8007db6:	bf44      	itt	mi
 8007db8:	232b      	movmi	r3, #43	; 0x2b
 8007dba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007dbe:	f89a 3000 	ldrb.w	r3, [sl]
 8007dc2:	2b2a      	cmp	r3, #42	; 0x2a
 8007dc4:	d015      	beq.n	8007df2 <_svfiprintf_r+0xf6>
 8007dc6:	9a07      	ldr	r2, [sp, #28]
 8007dc8:	4654      	mov	r4, sl
 8007dca:	2000      	movs	r0, #0
 8007dcc:	f04f 0c0a 	mov.w	ip, #10
 8007dd0:	4621      	mov	r1, r4
 8007dd2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd6:	3b30      	subs	r3, #48	; 0x30
 8007dd8:	2b09      	cmp	r3, #9
 8007dda:	d94e      	bls.n	8007e7a <_svfiprintf_r+0x17e>
 8007ddc:	b1b0      	cbz	r0, 8007e0c <_svfiprintf_r+0x110>
 8007dde:	9207      	str	r2, [sp, #28]
 8007de0:	e014      	b.n	8007e0c <_svfiprintf_r+0x110>
 8007de2:	eba0 0308 	sub.w	r3, r0, r8
 8007de6:	fa09 f303 	lsl.w	r3, r9, r3
 8007dea:	4313      	orrs	r3, r2
 8007dec:	9304      	str	r3, [sp, #16]
 8007dee:	46a2      	mov	sl, r4
 8007df0:	e7d2      	b.n	8007d98 <_svfiprintf_r+0x9c>
 8007df2:	9b03      	ldr	r3, [sp, #12]
 8007df4:	1d19      	adds	r1, r3, #4
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	9103      	str	r1, [sp, #12]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	bfbb      	ittet	lt
 8007dfe:	425b      	neglt	r3, r3
 8007e00:	f042 0202 	orrlt.w	r2, r2, #2
 8007e04:	9307      	strge	r3, [sp, #28]
 8007e06:	9307      	strlt	r3, [sp, #28]
 8007e08:	bfb8      	it	lt
 8007e0a:	9204      	strlt	r2, [sp, #16]
 8007e0c:	7823      	ldrb	r3, [r4, #0]
 8007e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e10:	d10c      	bne.n	8007e2c <_svfiprintf_r+0x130>
 8007e12:	7863      	ldrb	r3, [r4, #1]
 8007e14:	2b2a      	cmp	r3, #42	; 0x2a
 8007e16:	d135      	bne.n	8007e84 <_svfiprintf_r+0x188>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	9203      	str	r2, [sp, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfb8      	it	lt
 8007e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e28:	3402      	adds	r4, #2
 8007e2a:	9305      	str	r3, [sp, #20]
 8007e2c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ef8 <_svfiprintf_r+0x1fc>
 8007e30:	7821      	ldrb	r1, [r4, #0]
 8007e32:	2203      	movs	r2, #3
 8007e34:	4650      	mov	r0, sl
 8007e36:	f7f8 f9db 	bl	80001f0 <memchr>
 8007e3a:	b140      	cbz	r0, 8007e4e <_svfiprintf_r+0x152>
 8007e3c:	2340      	movs	r3, #64	; 0x40
 8007e3e:	eba0 000a 	sub.w	r0, r0, sl
 8007e42:	fa03 f000 	lsl.w	r0, r3, r0
 8007e46:	9b04      	ldr	r3, [sp, #16]
 8007e48:	4303      	orrs	r3, r0
 8007e4a:	3401      	adds	r4, #1
 8007e4c:	9304      	str	r3, [sp, #16]
 8007e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e52:	4826      	ldr	r0, [pc, #152]	; (8007eec <_svfiprintf_r+0x1f0>)
 8007e54:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e58:	2206      	movs	r2, #6
 8007e5a:	f7f8 f9c9 	bl	80001f0 <memchr>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d038      	beq.n	8007ed4 <_svfiprintf_r+0x1d8>
 8007e62:	4b23      	ldr	r3, [pc, #140]	; (8007ef0 <_svfiprintf_r+0x1f4>)
 8007e64:	bb1b      	cbnz	r3, 8007eae <_svfiprintf_r+0x1b2>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	3307      	adds	r3, #7
 8007e6a:	f023 0307 	bic.w	r3, r3, #7
 8007e6e:	3308      	adds	r3, #8
 8007e70:	9303      	str	r3, [sp, #12]
 8007e72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e74:	4433      	add	r3, r6
 8007e76:	9309      	str	r3, [sp, #36]	; 0x24
 8007e78:	e767      	b.n	8007d4a <_svfiprintf_r+0x4e>
 8007e7a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e7e:	460c      	mov	r4, r1
 8007e80:	2001      	movs	r0, #1
 8007e82:	e7a5      	b.n	8007dd0 <_svfiprintf_r+0xd4>
 8007e84:	2300      	movs	r3, #0
 8007e86:	3401      	adds	r4, #1
 8007e88:	9305      	str	r3, [sp, #20]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	f04f 0c0a 	mov.w	ip, #10
 8007e90:	4620      	mov	r0, r4
 8007e92:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e96:	3a30      	subs	r2, #48	; 0x30
 8007e98:	2a09      	cmp	r2, #9
 8007e9a:	d903      	bls.n	8007ea4 <_svfiprintf_r+0x1a8>
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d0c5      	beq.n	8007e2c <_svfiprintf_r+0x130>
 8007ea0:	9105      	str	r1, [sp, #20]
 8007ea2:	e7c3      	b.n	8007e2c <_svfiprintf_r+0x130>
 8007ea4:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ea8:	4604      	mov	r4, r0
 8007eaa:	2301      	movs	r3, #1
 8007eac:	e7f0      	b.n	8007e90 <_svfiprintf_r+0x194>
 8007eae:	ab03      	add	r3, sp, #12
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	462a      	mov	r2, r5
 8007eb4:	4b0f      	ldr	r3, [pc, #60]	; (8007ef4 <_svfiprintf_r+0x1f8>)
 8007eb6:	a904      	add	r1, sp, #16
 8007eb8:	4638      	mov	r0, r7
 8007eba:	f3af 8000 	nop.w
 8007ebe:	1c42      	adds	r2, r0, #1
 8007ec0:	4606      	mov	r6, r0
 8007ec2:	d1d6      	bne.n	8007e72 <_svfiprintf_r+0x176>
 8007ec4:	89ab      	ldrh	r3, [r5, #12]
 8007ec6:	065b      	lsls	r3, r3, #25
 8007ec8:	f53f af2c 	bmi.w	8007d24 <_svfiprintf_r+0x28>
 8007ecc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007ece:	b01d      	add	sp, #116	; 0x74
 8007ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed4:	ab03      	add	r3, sp, #12
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	462a      	mov	r2, r5
 8007eda:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <_svfiprintf_r+0x1f8>)
 8007edc:	a904      	add	r1, sp, #16
 8007ede:	4638      	mov	r0, r7
 8007ee0:	f000 f87a 	bl	8007fd8 <_printf_i>
 8007ee4:	e7eb      	b.n	8007ebe <_svfiprintf_r+0x1c2>
 8007ee6:	bf00      	nop
 8007ee8:	080089e4 	.word	0x080089e4
 8007eec:	080089ee 	.word	0x080089ee
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	08007c45 	.word	0x08007c45
 8007ef8:	080089ea 	.word	0x080089ea

08007efc <_printf_common>:
 8007efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f00:	4616      	mov	r6, r2
 8007f02:	4699      	mov	r9, r3
 8007f04:	688a      	ldr	r2, [r1, #8]
 8007f06:	690b      	ldr	r3, [r1, #16]
 8007f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	bfb8      	it	lt
 8007f10:	4613      	movlt	r3, r2
 8007f12:	6033      	str	r3, [r6, #0]
 8007f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f18:	4607      	mov	r7, r0
 8007f1a:	460c      	mov	r4, r1
 8007f1c:	b10a      	cbz	r2, 8007f22 <_printf_common+0x26>
 8007f1e:	3301      	adds	r3, #1
 8007f20:	6033      	str	r3, [r6, #0]
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	0699      	lsls	r1, r3, #26
 8007f26:	bf42      	ittt	mi
 8007f28:	6833      	ldrmi	r3, [r6, #0]
 8007f2a:	3302      	addmi	r3, #2
 8007f2c:	6033      	strmi	r3, [r6, #0]
 8007f2e:	6825      	ldr	r5, [r4, #0]
 8007f30:	f015 0506 	ands.w	r5, r5, #6
 8007f34:	d106      	bne.n	8007f44 <_printf_common+0x48>
 8007f36:	f104 0a19 	add.w	sl, r4, #25
 8007f3a:	68e3      	ldr	r3, [r4, #12]
 8007f3c:	6832      	ldr	r2, [r6, #0]
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	dc26      	bgt.n	8007f92 <_printf_common+0x96>
 8007f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007f48:	1e13      	subs	r3, r2, #0
 8007f4a:	6822      	ldr	r2, [r4, #0]
 8007f4c:	bf18      	it	ne
 8007f4e:	2301      	movne	r3, #1
 8007f50:	0692      	lsls	r2, r2, #26
 8007f52:	d42b      	bmi.n	8007fac <_printf_common+0xb0>
 8007f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f58:	4649      	mov	r1, r9
 8007f5a:	4638      	mov	r0, r7
 8007f5c:	47c0      	blx	r8
 8007f5e:	3001      	adds	r0, #1
 8007f60:	d01e      	beq.n	8007fa0 <_printf_common+0xa4>
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	68e5      	ldr	r5, [r4, #12]
 8007f66:	6832      	ldr	r2, [r6, #0]
 8007f68:	f003 0306 	and.w	r3, r3, #6
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	bf08      	it	eq
 8007f70:	1aad      	subeq	r5, r5, r2
 8007f72:	68a3      	ldr	r3, [r4, #8]
 8007f74:	6922      	ldr	r2, [r4, #16]
 8007f76:	bf0c      	ite	eq
 8007f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f7c:	2500      	movne	r5, #0
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	bfc4      	itt	gt
 8007f82:	1a9b      	subgt	r3, r3, r2
 8007f84:	18ed      	addgt	r5, r5, r3
 8007f86:	2600      	movs	r6, #0
 8007f88:	341a      	adds	r4, #26
 8007f8a:	42b5      	cmp	r5, r6
 8007f8c:	d11a      	bne.n	8007fc4 <_printf_common+0xc8>
 8007f8e:	2000      	movs	r0, #0
 8007f90:	e008      	b.n	8007fa4 <_printf_common+0xa8>
 8007f92:	2301      	movs	r3, #1
 8007f94:	4652      	mov	r2, sl
 8007f96:	4649      	mov	r1, r9
 8007f98:	4638      	mov	r0, r7
 8007f9a:	47c0      	blx	r8
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	d103      	bne.n	8007fa8 <_printf_common+0xac>
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa8:	3501      	adds	r5, #1
 8007faa:	e7c6      	b.n	8007f3a <_printf_common+0x3e>
 8007fac:	18e1      	adds	r1, r4, r3
 8007fae:	1c5a      	adds	r2, r3, #1
 8007fb0:	2030      	movs	r0, #48	; 0x30
 8007fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fb6:	4422      	add	r2, r4
 8007fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fc0:	3302      	adds	r3, #2
 8007fc2:	e7c7      	b.n	8007f54 <_printf_common+0x58>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4622      	mov	r2, r4
 8007fc8:	4649      	mov	r1, r9
 8007fca:	4638      	mov	r0, r7
 8007fcc:	47c0      	blx	r8
 8007fce:	3001      	adds	r0, #1
 8007fd0:	d0e6      	beq.n	8007fa0 <_printf_common+0xa4>
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	e7d9      	b.n	8007f8a <_printf_common+0x8e>
	...

08007fd8 <_printf_i>:
 8007fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007fdc:	460c      	mov	r4, r1
 8007fde:	4691      	mov	r9, r2
 8007fe0:	7e27      	ldrb	r7, [r4, #24]
 8007fe2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007fe4:	2f78      	cmp	r7, #120	; 0x78
 8007fe6:	4680      	mov	r8, r0
 8007fe8:	469a      	mov	sl, r3
 8007fea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fee:	d807      	bhi.n	8008000 <_printf_i+0x28>
 8007ff0:	2f62      	cmp	r7, #98	; 0x62
 8007ff2:	d80a      	bhi.n	800800a <_printf_i+0x32>
 8007ff4:	2f00      	cmp	r7, #0
 8007ff6:	f000 80d8 	beq.w	80081aa <_printf_i+0x1d2>
 8007ffa:	2f58      	cmp	r7, #88	; 0x58
 8007ffc:	f000 80a3 	beq.w	8008146 <_printf_i+0x16e>
 8008000:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008008:	e03a      	b.n	8008080 <_printf_i+0xa8>
 800800a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800800e:	2b15      	cmp	r3, #21
 8008010:	d8f6      	bhi.n	8008000 <_printf_i+0x28>
 8008012:	a001      	add	r0, pc, #4	; (adr r0, 8008018 <_printf_i+0x40>)
 8008014:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008018:	08008071 	.word	0x08008071
 800801c:	08008085 	.word	0x08008085
 8008020:	08008001 	.word	0x08008001
 8008024:	08008001 	.word	0x08008001
 8008028:	08008001 	.word	0x08008001
 800802c:	08008001 	.word	0x08008001
 8008030:	08008085 	.word	0x08008085
 8008034:	08008001 	.word	0x08008001
 8008038:	08008001 	.word	0x08008001
 800803c:	08008001 	.word	0x08008001
 8008040:	08008001 	.word	0x08008001
 8008044:	08008191 	.word	0x08008191
 8008048:	080080b5 	.word	0x080080b5
 800804c:	08008173 	.word	0x08008173
 8008050:	08008001 	.word	0x08008001
 8008054:	08008001 	.word	0x08008001
 8008058:	080081b3 	.word	0x080081b3
 800805c:	08008001 	.word	0x08008001
 8008060:	080080b5 	.word	0x080080b5
 8008064:	08008001 	.word	0x08008001
 8008068:	08008001 	.word	0x08008001
 800806c:	0800817b 	.word	0x0800817b
 8008070:	680b      	ldr	r3, [r1, #0]
 8008072:	1d1a      	adds	r2, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	600a      	str	r2, [r1, #0]
 8008078:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800807c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008080:	2301      	movs	r3, #1
 8008082:	e0a3      	b.n	80081cc <_printf_i+0x1f4>
 8008084:	6825      	ldr	r5, [r4, #0]
 8008086:	6808      	ldr	r0, [r1, #0]
 8008088:	062e      	lsls	r6, r5, #24
 800808a:	f100 0304 	add.w	r3, r0, #4
 800808e:	d50a      	bpl.n	80080a6 <_printf_i+0xce>
 8008090:	6805      	ldr	r5, [r0, #0]
 8008092:	600b      	str	r3, [r1, #0]
 8008094:	2d00      	cmp	r5, #0
 8008096:	da03      	bge.n	80080a0 <_printf_i+0xc8>
 8008098:	232d      	movs	r3, #45	; 0x2d
 800809a:	426d      	negs	r5, r5
 800809c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a0:	485e      	ldr	r0, [pc, #376]	; (800821c <_printf_i+0x244>)
 80080a2:	230a      	movs	r3, #10
 80080a4:	e019      	b.n	80080da <_printf_i+0x102>
 80080a6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80080aa:	6805      	ldr	r5, [r0, #0]
 80080ac:	600b      	str	r3, [r1, #0]
 80080ae:	bf18      	it	ne
 80080b0:	b22d      	sxthne	r5, r5
 80080b2:	e7ef      	b.n	8008094 <_printf_i+0xbc>
 80080b4:	680b      	ldr	r3, [r1, #0]
 80080b6:	6825      	ldr	r5, [r4, #0]
 80080b8:	1d18      	adds	r0, r3, #4
 80080ba:	6008      	str	r0, [r1, #0]
 80080bc:	0628      	lsls	r0, r5, #24
 80080be:	d501      	bpl.n	80080c4 <_printf_i+0xec>
 80080c0:	681d      	ldr	r5, [r3, #0]
 80080c2:	e002      	b.n	80080ca <_printf_i+0xf2>
 80080c4:	0669      	lsls	r1, r5, #25
 80080c6:	d5fb      	bpl.n	80080c0 <_printf_i+0xe8>
 80080c8:	881d      	ldrh	r5, [r3, #0]
 80080ca:	4854      	ldr	r0, [pc, #336]	; (800821c <_printf_i+0x244>)
 80080cc:	2f6f      	cmp	r7, #111	; 0x6f
 80080ce:	bf0c      	ite	eq
 80080d0:	2308      	moveq	r3, #8
 80080d2:	230a      	movne	r3, #10
 80080d4:	2100      	movs	r1, #0
 80080d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080da:	6866      	ldr	r6, [r4, #4]
 80080dc:	60a6      	str	r6, [r4, #8]
 80080de:	2e00      	cmp	r6, #0
 80080e0:	bfa2      	ittt	ge
 80080e2:	6821      	ldrge	r1, [r4, #0]
 80080e4:	f021 0104 	bicge.w	r1, r1, #4
 80080e8:	6021      	strge	r1, [r4, #0]
 80080ea:	b90d      	cbnz	r5, 80080f0 <_printf_i+0x118>
 80080ec:	2e00      	cmp	r6, #0
 80080ee:	d04d      	beq.n	800818c <_printf_i+0x1b4>
 80080f0:	4616      	mov	r6, r2
 80080f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80080f6:	fb03 5711 	mls	r7, r3, r1, r5
 80080fa:	5dc7      	ldrb	r7, [r0, r7]
 80080fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008100:	462f      	mov	r7, r5
 8008102:	42bb      	cmp	r3, r7
 8008104:	460d      	mov	r5, r1
 8008106:	d9f4      	bls.n	80080f2 <_printf_i+0x11a>
 8008108:	2b08      	cmp	r3, #8
 800810a:	d10b      	bne.n	8008124 <_printf_i+0x14c>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	07df      	lsls	r7, r3, #31
 8008110:	d508      	bpl.n	8008124 <_printf_i+0x14c>
 8008112:	6923      	ldr	r3, [r4, #16]
 8008114:	6861      	ldr	r1, [r4, #4]
 8008116:	4299      	cmp	r1, r3
 8008118:	bfde      	ittt	le
 800811a:	2330      	movle	r3, #48	; 0x30
 800811c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008120:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008124:	1b92      	subs	r2, r2, r6
 8008126:	6122      	str	r2, [r4, #16]
 8008128:	f8cd a000 	str.w	sl, [sp]
 800812c:	464b      	mov	r3, r9
 800812e:	aa03      	add	r2, sp, #12
 8008130:	4621      	mov	r1, r4
 8008132:	4640      	mov	r0, r8
 8008134:	f7ff fee2 	bl	8007efc <_printf_common>
 8008138:	3001      	adds	r0, #1
 800813a:	d14c      	bne.n	80081d6 <_printf_i+0x1fe>
 800813c:	f04f 30ff 	mov.w	r0, #4294967295
 8008140:	b004      	add	sp, #16
 8008142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008146:	4835      	ldr	r0, [pc, #212]	; (800821c <_printf_i+0x244>)
 8008148:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800814c:	6823      	ldr	r3, [r4, #0]
 800814e:	680e      	ldr	r6, [r1, #0]
 8008150:	061f      	lsls	r7, r3, #24
 8008152:	f856 5b04 	ldr.w	r5, [r6], #4
 8008156:	600e      	str	r6, [r1, #0]
 8008158:	d514      	bpl.n	8008184 <_printf_i+0x1ac>
 800815a:	07d9      	lsls	r1, r3, #31
 800815c:	bf44      	itt	mi
 800815e:	f043 0320 	orrmi.w	r3, r3, #32
 8008162:	6023      	strmi	r3, [r4, #0]
 8008164:	b91d      	cbnz	r5, 800816e <_printf_i+0x196>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	f023 0320 	bic.w	r3, r3, #32
 800816c:	6023      	str	r3, [r4, #0]
 800816e:	2310      	movs	r3, #16
 8008170:	e7b0      	b.n	80080d4 <_printf_i+0xfc>
 8008172:	6823      	ldr	r3, [r4, #0]
 8008174:	f043 0320 	orr.w	r3, r3, #32
 8008178:	6023      	str	r3, [r4, #0]
 800817a:	2378      	movs	r3, #120	; 0x78
 800817c:	4828      	ldr	r0, [pc, #160]	; (8008220 <_printf_i+0x248>)
 800817e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008182:	e7e3      	b.n	800814c <_printf_i+0x174>
 8008184:	065e      	lsls	r6, r3, #25
 8008186:	bf48      	it	mi
 8008188:	b2ad      	uxthmi	r5, r5
 800818a:	e7e6      	b.n	800815a <_printf_i+0x182>
 800818c:	4616      	mov	r6, r2
 800818e:	e7bb      	b.n	8008108 <_printf_i+0x130>
 8008190:	680b      	ldr	r3, [r1, #0]
 8008192:	6826      	ldr	r6, [r4, #0]
 8008194:	6960      	ldr	r0, [r4, #20]
 8008196:	1d1d      	adds	r5, r3, #4
 8008198:	600d      	str	r5, [r1, #0]
 800819a:	0635      	lsls	r5, r6, #24
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	d501      	bpl.n	80081a4 <_printf_i+0x1cc>
 80081a0:	6018      	str	r0, [r3, #0]
 80081a2:	e002      	b.n	80081aa <_printf_i+0x1d2>
 80081a4:	0671      	lsls	r1, r6, #25
 80081a6:	d5fb      	bpl.n	80081a0 <_printf_i+0x1c8>
 80081a8:	8018      	strh	r0, [r3, #0]
 80081aa:	2300      	movs	r3, #0
 80081ac:	6123      	str	r3, [r4, #16]
 80081ae:	4616      	mov	r6, r2
 80081b0:	e7ba      	b.n	8008128 <_printf_i+0x150>
 80081b2:	680b      	ldr	r3, [r1, #0]
 80081b4:	1d1a      	adds	r2, r3, #4
 80081b6:	600a      	str	r2, [r1, #0]
 80081b8:	681e      	ldr	r6, [r3, #0]
 80081ba:	6862      	ldr	r2, [r4, #4]
 80081bc:	2100      	movs	r1, #0
 80081be:	4630      	mov	r0, r6
 80081c0:	f7f8 f816 	bl	80001f0 <memchr>
 80081c4:	b108      	cbz	r0, 80081ca <_printf_i+0x1f2>
 80081c6:	1b80      	subs	r0, r0, r6
 80081c8:	6060      	str	r0, [r4, #4]
 80081ca:	6863      	ldr	r3, [r4, #4]
 80081cc:	6123      	str	r3, [r4, #16]
 80081ce:	2300      	movs	r3, #0
 80081d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081d4:	e7a8      	b.n	8008128 <_printf_i+0x150>
 80081d6:	6923      	ldr	r3, [r4, #16]
 80081d8:	4632      	mov	r2, r6
 80081da:	4649      	mov	r1, r9
 80081dc:	4640      	mov	r0, r8
 80081de:	47d0      	blx	sl
 80081e0:	3001      	adds	r0, #1
 80081e2:	d0ab      	beq.n	800813c <_printf_i+0x164>
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	079b      	lsls	r3, r3, #30
 80081e8:	d413      	bmi.n	8008212 <_printf_i+0x23a>
 80081ea:	68e0      	ldr	r0, [r4, #12]
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	4298      	cmp	r0, r3
 80081f0:	bfb8      	it	lt
 80081f2:	4618      	movlt	r0, r3
 80081f4:	e7a4      	b.n	8008140 <_printf_i+0x168>
 80081f6:	2301      	movs	r3, #1
 80081f8:	4632      	mov	r2, r6
 80081fa:	4649      	mov	r1, r9
 80081fc:	4640      	mov	r0, r8
 80081fe:	47d0      	blx	sl
 8008200:	3001      	adds	r0, #1
 8008202:	d09b      	beq.n	800813c <_printf_i+0x164>
 8008204:	3501      	adds	r5, #1
 8008206:	68e3      	ldr	r3, [r4, #12]
 8008208:	9903      	ldr	r1, [sp, #12]
 800820a:	1a5b      	subs	r3, r3, r1
 800820c:	42ab      	cmp	r3, r5
 800820e:	dcf2      	bgt.n	80081f6 <_printf_i+0x21e>
 8008210:	e7eb      	b.n	80081ea <_printf_i+0x212>
 8008212:	2500      	movs	r5, #0
 8008214:	f104 0619 	add.w	r6, r4, #25
 8008218:	e7f5      	b.n	8008206 <_printf_i+0x22e>
 800821a:	bf00      	nop
 800821c:	080089f5 	.word	0x080089f5
 8008220:	08008a06 	.word	0x08008a06

08008224 <memcpy>:
 8008224:	440a      	add	r2, r1
 8008226:	4291      	cmp	r1, r2
 8008228:	f100 33ff 	add.w	r3, r0, #4294967295
 800822c:	d100      	bne.n	8008230 <memcpy+0xc>
 800822e:	4770      	bx	lr
 8008230:	b510      	push	{r4, lr}
 8008232:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800823a:	4291      	cmp	r1, r2
 800823c:	d1f9      	bne.n	8008232 <memcpy+0xe>
 800823e:	bd10      	pop	{r4, pc}

08008240 <memmove>:
 8008240:	4288      	cmp	r0, r1
 8008242:	b510      	push	{r4, lr}
 8008244:	eb01 0402 	add.w	r4, r1, r2
 8008248:	d902      	bls.n	8008250 <memmove+0x10>
 800824a:	4284      	cmp	r4, r0
 800824c:	4623      	mov	r3, r4
 800824e:	d807      	bhi.n	8008260 <memmove+0x20>
 8008250:	1e43      	subs	r3, r0, #1
 8008252:	42a1      	cmp	r1, r4
 8008254:	d008      	beq.n	8008268 <memmove+0x28>
 8008256:	f811 2b01 	ldrb.w	r2, [r1], #1
 800825a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800825e:	e7f8      	b.n	8008252 <memmove+0x12>
 8008260:	4402      	add	r2, r0
 8008262:	4601      	mov	r1, r0
 8008264:	428a      	cmp	r2, r1
 8008266:	d100      	bne.n	800826a <memmove+0x2a>
 8008268:	bd10      	pop	{r4, pc}
 800826a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800826e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008272:	e7f7      	b.n	8008264 <memmove+0x24>

08008274 <_free_r>:
 8008274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008276:	2900      	cmp	r1, #0
 8008278:	d048      	beq.n	800830c <_free_r+0x98>
 800827a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800827e:	9001      	str	r0, [sp, #4]
 8008280:	2b00      	cmp	r3, #0
 8008282:	f1a1 0404 	sub.w	r4, r1, #4
 8008286:	bfb8      	it	lt
 8008288:	18e4      	addlt	r4, r4, r3
 800828a:	f000 f8d3 	bl	8008434 <__malloc_lock>
 800828e:	4a20      	ldr	r2, [pc, #128]	; (8008310 <_free_r+0x9c>)
 8008290:	9801      	ldr	r0, [sp, #4]
 8008292:	6813      	ldr	r3, [r2, #0]
 8008294:	4615      	mov	r5, r2
 8008296:	b933      	cbnz	r3, 80082a6 <_free_r+0x32>
 8008298:	6063      	str	r3, [r4, #4]
 800829a:	6014      	str	r4, [r2, #0]
 800829c:	b003      	add	sp, #12
 800829e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80082a2:	f000 b8cd 	b.w	8008440 <__malloc_unlock>
 80082a6:	42a3      	cmp	r3, r4
 80082a8:	d90b      	bls.n	80082c2 <_free_r+0x4e>
 80082aa:	6821      	ldr	r1, [r4, #0]
 80082ac:	1862      	adds	r2, r4, r1
 80082ae:	4293      	cmp	r3, r2
 80082b0:	bf04      	itt	eq
 80082b2:	681a      	ldreq	r2, [r3, #0]
 80082b4:	685b      	ldreq	r3, [r3, #4]
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	bf04      	itt	eq
 80082ba:	1852      	addeq	r2, r2, r1
 80082bc:	6022      	streq	r2, [r4, #0]
 80082be:	602c      	str	r4, [r5, #0]
 80082c0:	e7ec      	b.n	800829c <_free_r+0x28>
 80082c2:	461a      	mov	r2, r3
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	b10b      	cbz	r3, 80082cc <_free_r+0x58>
 80082c8:	42a3      	cmp	r3, r4
 80082ca:	d9fa      	bls.n	80082c2 <_free_r+0x4e>
 80082cc:	6811      	ldr	r1, [r2, #0]
 80082ce:	1855      	adds	r5, r2, r1
 80082d0:	42a5      	cmp	r5, r4
 80082d2:	d10b      	bne.n	80082ec <_free_r+0x78>
 80082d4:	6824      	ldr	r4, [r4, #0]
 80082d6:	4421      	add	r1, r4
 80082d8:	1854      	adds	r4, r2, r1
 80082da:	42a3      	cmp	r3, r4
 80082dc:	6011      	str	r1, [r2, #0]
 80082de:	d1dd      	bne.n	800829c <_free_r+0x28>
 80082e0:	681c      	ldr	r4, [r3, #0]
 80082e2:	685b      	ldr	r3, [r3, #4]
 80082e4:	6053      	str	r3, [r2, #4]
 80082e6:	4421      	add	r1, r4
 80082e8:	6011      	str	r1, [r2, #0]
 80082ea:	e7d7      	b.n	800829c <_free_r+0x28>
 80082ec:	d902      	bls.n	80082f4 <_free_r+0x80>
 80082ee:	230c      	movs	r3, #12
 80082f0:	6003      	str	r3, [r0, #0]
 80082f2:	e7d3      	b.n	800829c <_free_r+0x28>
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	1961      	adds	r1, r4, r5
 80082f8:	428b      	cmp	r3, r1
 80082fa:	bf04      	itt	eq
 80082fc:	6819      	ldreq	r1, [r3, #0]
 80082fe:	685b      	ldreq	r3, [r3, #4]
 8008300:	6063      	str	r3, [r4, #4]
 8008302:	bf04      	itt	eq
 8008304:	1949      	addeq	r1, r1, r5
 8008306:	6021      	streq	r1, [r4, #0]
 8008308:	6054      	str	r4, [r2, #4]
 800830a:	e7c7      	b.n	800829c <_free_r+0x28>
 800830c:	b003      	add	sp, #12
 800830e:	bd30      	pop	{r4, r5, pc}
 8008310:	20000300 	.word	0x20000300

08008314 <_malloc_r>:
 8008314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008316:	1ccd      	adds	r5, r1, #3
 8008318:	f025 0503 	bic.w	r5, r5, #3
 800831c:	3508      	adds	r5, #8
 800831e:	2d0c      	cmp	r5, #12
 8008320:	bf38      	it	cc
 8008322:	250c      	movcc	r5, #12
 8008324:	2d00      	cmp	r5, #0
 8008326:	4606      	mov	r6, r0
 8008328:	db01      	blt.n	800832e <_malloc_r+0x1a>
 800832a:	42a9      	cmp	r1, r5
 800832c:	d903      	bls.n	8008336 <_malloc_r+0x22>
 800832e:	230c      	movs	r3, #12
 8008330:	6033      	str	r3, [r6, #0]
 8008332:	2000      	movs	r0, #0
 8008334:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008336:	f000 f87d 	bl	8008434 <__malloc_lock>
 800833a:	4921      	ldr	r1, [pc, #132]	; (80083c0 <_malloc_r+0xac>)
 800833c:	680a      	ldr	r2, [r1, #0]
 800833e:	4614      	mov	r4, r2
 8008340:	b99c      	cbnz	r4, 800836a <_malloc_r+0x56>
 8008342:	4f20      	ldr	r7, [pc, #128]	; (80083c4 <_malloc_r+0xb0>)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	b923      	cbnz	r3, 8008352 <_malloc_r+0x3e>
 8008348:	4621      	mov	r1, r4
 800834a:	4630      	mov	r0, r6
 800834c:	f000 f862 	bl	8008414 <_sbrk_r>
 8008350:	6038      	str	r0, [r7, #0]
 8008352:	4629      	mov	r1, r5
 8008354:	4630      	mov	r0, r6
 8008356:	f000 f85d 	bl	8008414 <_sbrk_r>
 800835a:	1c43      	adds	r3, r0, #1
 800835c:	d123      	bne.n	80083a6 <_malloc_r+0x92>
 800835e:	230c      	movs	r3, #12
 8008360:	6033      	str	r3, [r6, #0]
 8008362:	4630      	mov	r0, r6
 8008364:	f000 f86c 	bl	8008440 <__malloc_unlock>
 8008368:	e7e3      	b.n	8008332 <_malloc_r+0x1e>
 800836a:	6823      	ldr	r3, [r4, #0]
 800836c:	1b5b      	subs	r3, r3, r5
 800836e:	d417      	bmi.n	80083a0 <_malloc_r+0x8c>
 8008370:	2b0b      	cmp	r3, #11
 8008372:	d903      	bls.n	800837c <_malloc_r+0x68>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	441c      	add	r4, r3
 8008378:	6025      	str	r5, [r4, #0]
 800837a:	e004      	b.n	8008386 <_malloc_r+0x72>
 800837c:	6863      	ldr	r3, [r4, #4]
 800837e:	42a2      	cmp	r2, r4
 8008380:	bf0c      	ite	eq
 8008382:	600b      	streq	r3, [r1, #0]
 8008384:	6053      	strne	r3, [r2, #4]
 8008386:	4630      	mov	r0, r6
 8008388:	f000 f85a 	bl	8008440 <__malloc_unlock>
 800838c:	f104 000b 	add.w	r0, r4, #11
 8008390:	1d23      	adds	r3, r4, #4
 8008392:	f020 0007 	bic.w	r0, r0, #7
 8008396:	1ac2      	subs	r2, r0, r3
 8008398:	d0cc      	beq.n	8008334 <_malloc_r+0x20>
 800839a:	1a1b      	subs	r3, r3, r0
 800839c:	50a3      	str	r3, [r4, r2]
 800839e:	e7c9      	b.n	8008334 <_malloc_r+0x20>
 80083a0:	4622      	mov	r2, r4
 80083a2:	6864      	ldr	r4, [r4, #4]
 80083a4:	e7cc      	b.n	8008340 <_malloc_r+0x2c>
 80083a6:	1cc4      	adds	r4, r0, #3
 80083a8:	f024 0403 	bic.w	r4, r4, #3
 80083ac:	42a0      	cmp	r0, r4
 80083ae:	d0e3      	beq.n	8008378 <_malloc_r+0x64>
 80083b0:	1a21      	subs	r1, r4, r0
 80083b2:	4630      	mov	r0, r6
 80083b4:	f000 f82e 	bl	8008414 <_sbrk_r>
 80083b8:	3001      	adds	r0, #1
 80083ba:	d1dd      	bne.n	8008378 <_malloc_r+0x64>
 80083bc:	e7cf      	b.n	800835e <_malloc_r+0x4a>
 80083be:	bf00      	nop
 80083c0:	20000300 	.word	0x20000300
 80083c4:	20000304 	.word	0x20000304

080083c8 <_realloc_r>:
 80083c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ca:	4607      	mov	r7, r0
 80083cc:	4614      	mov	r4, r2
 80083ce:	460e      	mov	r6, r1
 80083d0:	b921      	cbnz	r1, 80083dc <_realloc_r+0x14>
 80083d2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80083d6:	4611      	mov	r1, r2
 80083d8:	f7ff bf9c 	b.w	8008314 <_malloc_r>
 80083dc:	b922      	cbnz	r2, 80083e8 <_realloc_r+0x20>
 80083de:	f7ff ff49 	bl	8008274 <_free_r>
 80083e2:	4625      	mov	r5, r4
 80083e4:	4628      	mov	r0, r5
 80083e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083e8:	f000 f830 	bl	800844c <_malloc_usable_size_r>
 80083ec:	42a0      	cmp	r0, r4
 80083ee:	d20f      	bcs.n	8008410 <_realloc_r+0x48>
 80083f0:	4621      	mov	r1, r4
 80083f2:	4638      	mov	r0, r7
 80083f4:	f7ff ff8e 	bl	8008314 <_malloc_r>
 80083f8:	4605      	mov	r5, r0
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d0f2      	beq.n	80083e4 <_realloc_r+0x1c>
 80083fe:	4631      	mov	r1, r6
 8008400:	4622      	mov	r2, r4
 8008402:	f7ff ff0f 	bl	8008224 <memcpy>
 8008406:	4631      	mov	r1, r6
 8008408:	4638      	mov	r0, r7
 800840a:	f7ff ff33 	bl	8008274 <_free_r>
 800840e:	e7e9      	b.n	80083e4 <_realloc_r+0x1c>
 8008410:	4635      	mov	r5, r6
 8008412:	e7e7      	b.n	80083e4 <_realloc_r+0x1c>

08008414 <_sbrk_r>:
 8008414:	b538      	push	{r3, r4, r5, lr}
 8008416:	4d06      	ldr	r5, [pc, #24]	; (8008430 <_sbrk_r+0x1c>)
 8008418:	2300      	movs	r3, #0
 800841a:	4604      	mov	r4, r0
 800841c:	4608      	mov	r0, r1
 800841e:	602b      	str	r3, [r5, #0]
 8008420:	f7f9 fd46 	bl	8001eb0 <_sbrk>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_sbrk_r+0x1a>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_sbrk_r+0x1a>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	20004e00 	.word	0x20004e00

08008434 <__malloc_lock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_lock+0x8>)
 8008436:	f000 b811 	b.w	800845c <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20004e08 	.word	0x20004e08

08008440 <__malloc_unlock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_unlock+0x8>)
 8008442:	f000 b80c 	b.w	800845e <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20004e08 	.word	0x20004e08

0800844c <_malloc_usable_size_r>:
 800844c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008450:	1f18      	subs	r0, r3, #4
 8008452:	2b00      	cmp	r3, #0
 8008454:	bfbc      	itt	lt
 8008456:	580b      	ldrlt	r3, [r1, r0]
 8008458:	18c0      	addlt	r0, r0, r3
 800845a:	4770      	bx	lr

0800845c <__retarget_lock_acquire_recursive>:
 800845c:	4770      	bx	lr

0800845e <__retarget_lock_release_recursive>:
 800845e:	4770      	bx	lr

08008460 <_init>:
 8008460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008462:	bf00      	nop
 8008464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008466:	bc08      	pop	{r3}
 8008468:	469e      	mov	lr, r3
 800846a:	4770      	bx	lr

0800846c <_fini>:
 800846c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800846e:	bf00      	nop
 8008470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008472:	bc08      	pop	{r3}
 8008474:	469e      	mov	lr, r3
 8008476:	4770      	bx	lr
