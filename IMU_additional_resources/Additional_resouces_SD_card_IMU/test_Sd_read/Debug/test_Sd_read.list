
test_Sd_read.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009164  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000768  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009a6c  08009a6c  0002008c  2**0
                  CONTENTS
  4 .ARM          00000008  08009a6c  08009a6c  00019a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009a74  08009a74  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009a74  08009a74  00019a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009a78  08009a78  00019a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08009a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f724  2000008c  08009b08  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f7b0  08009b08  0002f7b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018555  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e90  00000000  00000000  00038611  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003b4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001070  00000000  00000000  0003c630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188a3  00000000  00000000  0003d6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016657  00000000  00000000  00055f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091f58  00000000  00000000  0006c59a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fe4f2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005308  00000000  00000000  000fe548  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000008c 	.word	0x2000008c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080092ec 	.word	0x080092ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000090 	.word	0x20000090
 80001dc:	080092ec 	.word	0x080092ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_dmul>:
 8000290:	b570      	push	{r4, r5, r6, lr}
 8000292:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000296:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800029a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800029e:	bf1d      	ittte	ne
 80002a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002a4:	ea94 0f0c 	teqne	r4, ip
 80002a8:	ea95 0f0c 	teqne	r5, ip
 80002ac:	f000 f8de 	bleq	800046c <__aeabi_dmul+0x1dc>
 80002b0:	442c      	add	r4, r5
 80002b2:	ea81 0603 	eor.w	r6, r1, r3
 80002b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002c2:	bf18      	it	ne
 80002c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002d0:	d038      	beq.n	8000344 <__aeabi_dmul+0xb4>
 80002d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002d6:	f04f 0500 	mov.w	r5, #0
 80002da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002e6:	f04f 0600 	mov.w	r6, #0
 80002ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ee:	f09c 0f00 	teq	ip, #0
 80002f2:	bf18      	it	ne
 80002f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000300:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000304:	d204      	bcs.n	8000310 <__aeabi_dmul+0x80>
 8000306:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800030a:	416d      	adcs	r5, r5
 800030c:	eb46 0606 	adc.w	r6, r6, r6
 8000310:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000314:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000318:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800031c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000320:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000324:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000328:	bf88      	it	hi
 800032a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800032e:	d81e      	bhi.n	800036e <__aeabi_dmul+0xde>
 8000330:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	bd70      	pop	{r4, r5, r6, pc}
 8000344:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000348:	ea46 0101 	orr.w	r1, r6, r1
 800034c:	ea40 0002 	orr.w	r0, r0, r2
 8000350:	ea81 0103 	eor.w	r1, r1, r3
 8000354:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000358:	bfc2      	ittt	gt
 800035a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800035e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000362:	bd70      	popgt	{r4, r5, r6, pc}
 8000364:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000368:	f04f 0e00 	mov.w	lr, #0
 800036c:	3c01      	subs	r4, #1
 800036e:	f300 80ab 	bgt.w	80004c8 <__aeabi_dmul+0x238>
 8000372:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000376:	bfde      	ittt	le
 8000378:	2000      	movle	r0, #0
 800037a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800037e:	bd70      	pople	{r4, r5, r6, pc}
 8000380:	f1c4 0400 	rsb	r4, r4, #0
 8000384:	3c20      	subs	r4, #32
 8000386:	da35      	bge.n	80003f4 <__aeabi_dmul+0x164>
 8000388:	340c      	adds	r4, #12
 800038a:	dc1b      	bgt.n	80003c4 <__aeabi_dmul+0x134>
 800038c:	f104 0414 	add.w	r4, r4, #20
 8000390:	f1c4 0520 	rsb	r5, r4, #32
 8000394:	fa00 f305 	lsl.w	r3, r0, r5
 8000398:	fa20 f004 	lsr.w	r0, r0, r4
 800039c:	fa01 f205 	lsl.w	r2, r1, r5
 80003a0:	ea40 0002 	orr.w	r0, r0, r2
 80003a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003b0:	fa21 f604 	lsr.w	r6, r1, r4
 80003b4:	eb42 0106 	adc.w	r1, r2, r6
 80003b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003bc:	bf08      	it	eq
 80003be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003c2:	bd70      	pop	{r4, r5, r6, pc}
 80003c4:	f1c4 040c 	rsb	r4, r4, #12
 80003c8:	f1c4 0520 	rsb	r5, r4, #32
 80003cc:	fa00 f304 	lsl.w	r3, r0, r4
 80003d0:	fa20 f005 	lsr.w	r0, r0, r5
 80003d4:	fa01 f204 	lsl.w	r2, r1, r4
 80003d8:	ea40 0002 	orr.w	r0, r0, r2
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e4:	f141 0100 	adc.w	r1, r1, #0
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 0520 	rsb	r5, r4, #32
 80003f8:	fa00 f205 	lsl.w	r2, r0, r5
 80003fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000400:	fa20 f304 	lsr.w	r3, r0, r4
 8000404:	fa01 f205 	lsl.w	r2, r1, r5
 8000408:	ea43 0302 	orr.w	r3, r3, r2
 800040c:	fa21 f004 	lsr.w	r0, r1, r4
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	fa21 f204 	lsr.w	r2, r1, r4
 8000418:	ea20 0002 	bic.w	r0, r0, r2
 800041c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000420:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000424:	bf08      	it	eq
 8000426:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800042a:	bd70      	pop	{r4, r5, r6, pc}
 800042c:	f094 0f00 	teq	r4, #0
 8000430:	d10f      	bne.n	8000452 <__aeabi_dmul+0x1c2>
 8000432:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000436:	0040      	lsls	r0, r0, #1
 8000438:	eb41 0101 	adc.w	r1, r1, r1
 800043c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3c01      	subeq	r4, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1a6>
 8000446:	ea41 0106 	orr.w	r1, r1, r6
 800044a:	f095 0f00 	teq	r5, #0
 800044e:	bf18      	it	ne
 8000450:	4770      	bxne	lr
 8000452:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000456:	0052      	lsls	r2, r2, #1
 8000458:	eb43 0303 	adc.w	r3, r3, r3
 800045c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3d01      	subeq	r5, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1c6>
 8000466:	ea43 0306 	orr.w	r3, r3, r6
 800046a:	4770      	bx	lr
 800046c:	ea94 0f0c 	teq	r4, ip
 8000470:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000474:	bf18      	it	ne
 8000476:	ea95 0f0c 	teqne	r5, ip
 800047a:	d00c      	beq.n	8000496 <__aeabi_dmul+0x206>
 800047c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000480:	bf18      	it	ne
 8000482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000486:	d1d1      	bne.n	800042c <__aeabi_dmul+0x19c>
 8000488:	ea81 0103 	eor.w	r1, r1, r3
 800048c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000490:	f04f 0000 	mov.w	r0, #0
 8000494:	bd70      	pop	{r4, r5, r6, pc}
 8000496:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800049a:	bf06      	itte	eq
 800049c:	4610      	moveq	r0, r2
 800049e:	4619      	moveq	r1, r3
 80004a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a4:	d019      	beq.n	80004da <__aeabi_dmul+0x24a>
 80004a6:	ea94 0f0c 	teq	r4, ip
 80004aa:	d102      	bne.n	80004b2 <__aeabi_dmul+0x222>
 80004ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004b0:	d113      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004b2:	ea95 0f0c 	teq	r5, ip
 80004b6:	d105      	bne.n	80004c4 <__aeabi_dmul+0x234>
 80004b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004bc:	bf1c      	itt	ne
 80004be:	4610      	movne	r0, r2
 80004c0:	4619      	movne	r1, r3
 80004c2:	d10a      	bne.n	80004da <__aeabi_dmul+0x24a>
 80004c4:	ea81 0103 	eor.w	r1, r1, r3
 80004c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd70      	pop	{r4, r5, r6, pc}
 80004da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004e2:	bd70      	pop	{r4, r5, r6, pc}

080004e4 <__aeabi_drsub>:
 80004e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e002      	b.n	80004f0 <__adddf3>
 80004ea:	bf00      	nop

080004ec <__aeabi_dsub>:
 80004ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f0 <__adddf3>:
 80004f0:	b530      	push	{r4, r5, lr}
 80004f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fa:	ea94 0f05 	teq	r4, r5
 80004fe:	bf08      	it	eq
 8000500:	ea90 0f02 	teqeq	r0, r2
 8000504:	bf1f      	itttt	ne
 8000506:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800050e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000516:	f000 80e2 	beq.w	80006de <__adddf3+0x1ee>
 800051a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800051e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000522:	bfb8      	it	lt
 8000524:	426d      	neglt	r5, r5
 8000526:	dd0c      	ble.n	8000542 <__adddf3+0x52>
 8000528:	442c      	add	r4, r5
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	ea82 0000 	eor.w	r0, r2, r0
 8000536:	ea83 0101 	eor.w	r1, r3, r1
 800053a:	ea80 0202 	eor.w	r2, r0, r2
 800053e:	ea81 0303 	eor.w	r3, r1, r3
 8000542:	2d36      	cmp	r5, #54	; 0x36
 8000544:	bf88      	it	hi
 8000546:	bd30      	pophi	{r4, r5, pc}
 8000548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800054c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000558:	d002      	beq.n	8000560 <__adddf3+0x70>
 800055a:	4240      	negs	r0, r0
 800055c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000564:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800056c:	d002      	beq.n	8000574 <__adddf3+0x84>
 800056e:	4252      	negs	r2, r2
 8000570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000574:	ea94 0f05 	teq	r4, r5
 8000578:	f000 80a7 	beq.w	80006ca <__adddf3+0x1da>
 800057c:	f1a4 0401 	sub.w	r4, r4, #1
 8000580:	f1d5 0e20 	rsbs	lr, r5, #32
 8000584:	db0d      	blt.n	80005a2 <__adddf3+0xb2>
 8000586:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058a:	fa22 f205 	lsr.w	r2, r2, r5
 800058e:	1880      	adds	r0, r0, r2
 8000590:	f141 0100 	adc.w	r1, r1, #0
 8000594:	fa03 f20e 	lsl.w	r2, r3, lr
 8000598:	1880      	adds	r0, r0, r2
 800059a:	fa43 f305 	asr.w	r3, r3, r5
 800059e:	4159      	adcs	r1, r3
 80005a0:	e00e      	b.n	80005c0 <__adddf3+0xd0>
 80005a2:	f1a5 0520 	sub.w	r5, r5, #32
 80005a6:	f10e 0e20 	add.w	lr, lr, #32
 80005aa:	2a01      	cmp	r2, #1
 80005ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b0:	bf28      	it	cs
 80005b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005b6:	fa43 f305 	asr.w	r3, r3, r5
 80005ba:	18c0      	adds	r0, r0, r3
 80005bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	d507      	bpl.n	80005d6 <__adddf3+0xe6>
 80005c6:	f04f 0e00 	mov.w	lr, #0
 80005ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005da:	d31b      	bcc.n	8000614 <__adddf3+0x124>
 80005dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e0:	d30c      	bcc.n	80005fc <__adddf3+0x10c>
 80005e2:	0849      	lsrs	r1, r1, #1
 80005e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005ec:	f104 0401 	add.w	r4, r4, #1
 80005f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005f8:	f080 809a 	bcs.w	8000730 <__adddf3+0x240>
 80005fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000600:	bf08      	it	eq
 8000602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000606:	f150 0000 	adcs.w	r0, r0, #0
 800060a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060e:	ea41 0105 	orr.w	r1, r1, r5
 8000612:	bd30      	pop	{r4, r5, pc}
 8000614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000618:	4140      	adcs	r0, r0
 800061a:	eb41 0101 	adc.w	r1, r1, r1
 800061e:	3c01      	subs	r4, #1
 8000620:	bf28      	it	cs
 8000622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000626:	d2e9      	bcs.n	80005fc <__adddf3+0x10c>
 8000628:	f091 0f00 	teq	r1, #0
 800062c:	bf04      	itt	eq
 800062e:	4601      	moveq	r1, r0
 8000630:	2000      	moveq	r0, #0
 8000632:	fab1 f381 	clz	r3, r1
 8000636:	bf08      	it	eq
 8000638:	3320      	addeq	r3, #32
 800063a:	f1a3 030b 	sub.w	r3, r3, #11
 800063e:	f1b3 0220 	subs.w	r2, r3, #32
 8000642:	da0c      	bge.n	800065e <__adddf3+0x16e>
 8000644:	320c      	adds	r2, #12
 8000646:	dd08      	ble.n	800065a <__adddf3+0x16a>
 8000648:	f102 0c14 	add.w	ip, r2, #20
 800064c:	f1c2 020c 	rsb	r2, r2, #12
 8000650:	fa01 f00c 	lsl.w	r0, r1, ip
 8000654:	fa21 f102 	lsr.w	r1, r1, r2
 8000658:	e00c      	b.n	8000674 <__adddf3+0x184>
 800065a:	f102 0214 	add.w	r2, r2, #20
 800065e:	bfd8      	it	le
 8000660:	f1c2 0c20 	rsble	ip, r2, #32
 8000664:	fa01 f102 	lsl.w	r1, r1, r2
 8000668:	fa20 fc0c 	lsr.w	ip, r0, ip
 800066c:	bfdc      	itt	le
 800066e:	ea41 010c 	orrle.w	r1, r1, ip
 8000672:	4090      	lslle	r0, r2
 8000674:	1ae4      	subs	r4, r4, r3
 8000676:	bfa2      	ittt	ge
 8000678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800067c:	4329      	orrge	r1, r5
 800067e:	bd30      	popge	{r4, r5, pc}
 8000680:	ea6f 0404 	mvn.w	r4, r4
 8000684:	3c1f      	subs	r4, #31
 8000686:	da1c      	bge.n	80006c2 <__adddf3+0x1d2>
 8000688:	340c      	adds	r4, #12
 800068a:	dc0e      	bgt.n	80006aa <__adddf3+0x1ba>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0220 	rsb	r2, r4, #32
 8000694:	fa20 f004 	lsr.w	r0, r0, r4
 8000698:	fa01 f302 	lsl.w	r3, r1, r2
 800069c:	ea40 0003 	orr.w	r0, r0, r3
 80006a0:	fa21 f304 	lsr.w	r3, r1, r4
 80006a4:	ea45 0103 	orr.w	r1, r5, r3
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f1c4 040c 	rsb	r4, r4, #12
 80006ae:	f1c4 0220 	rsb	r2, r4, #32
 80006b2:	fa20 f002 	lsr.w	r0, r0, r2
 80006b6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ba:	ea40 0003 	orr.w	r0, r0, r3
 80006be:	4629      	mov	r1, r5
 80006c0:	bd30      	pop	{r4, r5, pc}
 80006c2:	fa21 f004 	lsr.w	r0, r1, r4
 80006c6:	4629      	mov	r1, r5
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f094 0f00 	teq	r4, #0
 80006ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d2:	bf06      	itte	eq
 80006d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006d8:	3401      	addeq	r4, #1
 80006da:	3d01      	subne	r5, #1
 80006dc:	e74e      	b.n	800057c <__adddf3+0x8c>
 80006de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e2:	bf18      	it	ne
 80006e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006e8:	d029      	beq.n	800073e <__adddf3+0x24e>
 80006ea:	ea94 0f05 	teq	r4, r5
 80006ee:	bf08      	it	eq
 80006f0:	ea90 0f02 	teqeq	r0, r2
 80006f4:	d005      	beq.n	8000702 <__adddf3+0x212>
 80006f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fa:	bf04      	itt	eq
 80006fc:	4619      	moveq	r1, r3
 80006fe:	4610      	moveq	r0, r2
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	ea91 0f03 	teq	r1, r3
 8000706:	bf1e      	ittt	ne
 8000708:	2100      	movne	r1, #0
 800070a:	2000      	movne	r0, #0
 800070c:	bd30      	popne	{r4, r5, pc}
 800070e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000712:	d105      	bne.n	8000720 <__adddf3+0x230>
 8000714:	0040      	lsls	r0, r0, #1
 8000716:	4149      	adcs	r1, r1
 8000718:	bf28      	it	cs
 800071a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800071e:	bd30      	pop	{r4, r5, pc}
 8000720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000724:	bf3c      	itt	cc
 8000726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072a:	bd30      	popcc	{r4, r5, pc}
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd30      	pop	{r4, r5, pc}
 800073e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000742:	bf1a      	itte	ne
 8000744:	4619      	movne	r1, r3
 8000746:	4610      	movne	r0, r2
 8000748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800074c:	bf1c      	itt	ne
 800074e:	460b      	movne	r3, r1
 8000750:	4602      	movne	r2, r0
 8000752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000756:	bf06      	itte	eq
 8000758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800075c:	ea91 0f03 	teqeq	r1, r3
 8000760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000764:	bd30      	pop	{r4, r5, pc}
 8000766:	bf00      	nop

08000768 <__aeabi_ui2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f04f 0500 	mov.w	r5, #0
 8000780:	f04f 0100 	mov.w	r1, #0
 8000784:	e750      	b.n	8000628 <__adddf3+0x138>
 8000786:	bf00      	nop

08000788 <__aeabi_i2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a0:	bf48      	it	mi
 80007a2:	4240      	negmi	r0, r0
 80007a4:	f04f 0100 	mov.w	r1, #0
 80007a8:	e73e      	b.n	8000628 <__adddf3+0x138>
 80007aa:	bf00      	nop

080007ac <__aeabi_f2d>:
 80007ac:	0042      	lsls	r2, r0, #1
 80007ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ba:	bf1f      	itttt	ne
 80007bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007c8:	4770      	bxne	lr
 80007ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ce:	bf08      	it	eq
 80007d0:	4770      	bxeq	lr
 80007d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007d6:	bf04      	itt	eq
 80007d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007dc:	4770      	bxeq	lr
 80007de:	b530      	push	{r4, r5, lr}
 80007e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	e71c      	b.n	8000628 <__adddf3+0x138>
 80007ee:	bf00      	nop

080007f0 <__aeabi_ul2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f04f 0500 	mov.w	r5, #0
 80007fe:	e00a      	b.n	8000816 <__aeabi_l2d+0x16>

08000800 <__aeabi_l2d>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	b530      	push	{r4, r5, lr}
 800080a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800080e:	d502      	bpl.n	8000816 <__aeabi_l2d+0x16>
 8000810:	4240      	negs	r0, r0
 8000812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000816:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800081e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000822:	f43f aed8 	beq.w	80005d6 <__adddf3+0xe6>
 8000826:	f04f 0203 	mov.w	r2, #3
 800082a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800082e:	bf18      	it	ne
 8000830:	3203      	addne	r2, #3
 8000832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000836:	bf18      	it	ne
 8000838:	3203      	addne	r2, #3
 800083a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800083e:	f1c2 0320 	rsb	r3, r2, #32
 8000842:	fa00 fc03 	lsl.w	ip, r0, r3
 8000846:	fa20 f002 	lsr.w	r0, r0, r2
 800084a:	fa01 fe03 	lsl.w	lr, r1, r3
 800084e:	ea40 000e 	orr.w	r0, r0, lr
 8000852:	fa21 f102 	lsr.w	r1, r1, r2
 8000856:	4414      	add	r4, r2
 8000858:	e6bd      	b.n	80005d6 <__adddf3+0xe6>
 800085a:	bf00      	nop

0800085c <__aeabi_d2uiz>:
 800085c:	004a      	lsls	r2, r1, #1
 800085e:	d211      	bcs.n	8000884 <__aeabi_d2uiz+0x28>
 8000860:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000864:	d211      	bcs.n	800088a <__aeabi_d2uiz+0x2e>
 8000866:	d50d      	bpl.n	8000884 <__aeabi_d2uiz+0x28>
 8000868:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800086c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000870:	d40e      	bmi.n	8000890 <__aeabi_d2uiz+0x34>
 8000872:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000876:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800087a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800087e:	fa23 f002 	lsr.w	r0, r3, r2
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800088e:	d102      	bne.n	8000896 <__aeabi_d2uiz+0x3a>
 8000890:	f04f 30ff 	mov.w	r0, #4294967295
 8000894:	4770      	bx	lr
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	4770      	bx	lr

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b96e 	b.w	8000b90 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	4604      	mov	r4, r0
 80008d4:	468c      	mov	ip, r1
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	f040 8083 	bne.w	80009e2 <__udivmoddi4+0x116>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d947      	bls.n	8000972 <__udivmoddi4+0xa6>
 80008e2:	fab2 f282 	clz	r2, r2
 80008e6:	b142      	cbz	r2, 80008fa <__udivmoddi4+0x2e>
 80008e8:	f1c2 0020 	rsb	r0, r2, #32
 80008ec:	fa24 f000 	lsr.w	r0, r4, r0
 80008f0:	4091      	lsls	r1, r2
 80008f2:	4097      	lsls	r7, r2
 80008f4:	ea40 0c01 	orr.w	ip, r0, r1
 80008f8:	4094      	lsls	r4, r2
 80008fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008fe:	0c23      	lsrs	r3, r4, #16
 8000900:	fbbc f6f8 	udiv	r6, ip, r8
 8000904:	fa1f fe87 	uxth.w	lr, r7
 8000908:	fb08 c116 	mls	r1, r8, r6, ip
 800090c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000910:	fb06 f10e 	mul.w	r1, r6, lr
 8000914:	4299      	cmp	r1, r3
 8000916:	d909      	bls.n	800092c <__udivmoddi4+0x60>
 8000918:	18fb      	adds	r3, r7, r3
 800091a:	f106 30ff 	add.w	r0, r6, #4294967295
 800091e:	f080 8119 	bcs.w	8000b54 <__udivmoddi4+0x288>
 8000922:	4299      	cmp	r1, r3
 8000924:	f240 8116 	bls.w	8000b54 <__udivmoddi4+0x288>
 8000928:	3e02      	subs	r6, #2
 800092a:	443b      	add	r3, r7
 800092c:	1a5b      	subs	r3, r3, r1
 800092e:	b2a4      	uxth	r4, r4
 8000930:	fbb3 f0f8 	udiv	r0, r3, r8
 8000934:	fb08 3310 	mls	r3, r8, r0, r3
 8000938:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800093c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000940:	45a6      	cmp	lr, r4
 8000942:	d909      	bls.n	8000958 <__udivmoddi4+0x8c>
 8000944:	193c      	adds	r4, r7, r4
 8000946:	f100 33ff 	add.w	r3, r0, #4294967295
 800094a:	f080 8105 	bcs.w	8000b58 <__udivmoddi4+0x28c>
 800094e:	45a6      	cmp	lr, r4
 8000950:	f240 8102 	bls.w	8000b58 <__udivmoddi4+0x28c>
 8000954:	3802      	subs	r0, #2
 8000956:	443c      	add	r4, r7
 8000958:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800095c:	eba4 040e 	sub.w	r4, r4, lr
 8000960:	2600      	movs	r6, #0
 8000962:	b11d      	cbz	r5, 800096c <__udivmoddi4+0xa0>
 8000964:	40d4      	lsrs	r4, r2
 8000966:	2300      	movs	r3, #0
 8000968:	e9c5 4300 	strd	r4, r3, [r5]
 800096c:	4631      	mov	r1, r6
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	b902      	cbnz	r2, 8000976 <__udivmoddi4+0xaa>
 8000974:	deff      	udf	#255	; 0xff
 8000976:	fab2 f282 	clz	r2, r2
 800097a:	2a00      	cmp	r2, #0
 800097c:	d150      	bne.n	8000a20 <__udivmoddi4+0x154>
 800097e:	1bcb      	subs	r3, r1, r7
 8000980:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000984:	fa1f f887 	uxth.w	r8, r7
 8000988:	2601      	movs	r6, #1
 800098a:	fbb3 fcfe 	udiv	ip, r3, lr
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	fb0e 331c 	mls	r3, lr, ip, r3
 8000994:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000998:	fb08 f30c 	mul.w	r3, r8, ip
 800099c:	428b      	cmp	r3, r1
 800099e:	d907      	bls.n	80009b0 <__udivmoddi4+0xe4>
 80009a0:	1879      	adds	r1, r7, r1
 80009a2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80009a6:	d202      	bcs.n	80009ae <__udivmoddi4+0xe2>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	f200 80e9 	bhi.w	8000b80 <__udivmoddi4+0x2b4>
 80009ae:	4684      	mov	ip, r0
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	b2a3      	uxth	r3, r4
 80009b4:	fbb1 f0fe 	udiv	r0, r1, lr
 80009b8:	fb0e 1110 	mls	r1, lr, r0, r1
 80009bc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80009c0:	fb08 f800 	mul.w	r8, r8, r0
 80009c4:	45a0      	cmp	r8, r4
 80009c6:	d907      	bls.n	80009d8 <__udivmoddi4+0x10c>
 80009c8:	193c      	adds	r4, r7, r4
 80009ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x10a>
 80009d0:	45a0      	cmp	r8, r4
 80009d2:	f200 80d9 	bhi.w	8000b88 <__udivmoddi4+0x2bc>
 80009d6:	4618      	mov	r0, r3
 80009d8:	eba4 0408 	sub.w	r4, r4, r8
 80009dc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009e0:	e7bf      	b.n	8000962 <__udivmoddi4+0x96>
 80009e2:	428b      	cmp	r3, r1
 80009e4:	d909      	bls.n	80009fa <__udivmoddi4+0x12e>
 80009e6:	2d00      	cmp	r5, #0
 80009e8:	f000 80b1 	beq.w	8000b4e <__udivmoddi4+0x282>
 80009ec:	2600      	movs	r6, #0
 80009ee:	e9c5 0100 	strd	r0, r1, [r5]
 80009f2:	4630      	mov	r0, r6
 80009f4:	4631      	mov	r1, r6
 80009f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009fa:	fab3 f683 	clz	r6, r3
 80009fe:	2e00      	cmp	r6, #0
 8000a00:	d14a      	bne.n	8000a98 <__udivmoddi4+0x1cc>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	d302      	bcc.n	8000a0c <__udivmoddi4+0x140>
 8000a06:	4282      	cmp	r2, r0
 8000a08:	f200 80b8 	bhi.w	8000b7c <__udivmoddi4+0x2b0>
 8000a0c:	1a84      	subs	r4, r0, r2
 8000a0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a12:	2001      	movs	r0, #1
 8000a14:	468c      	mov	ip, r1
 8000a16:	2d00      	cmp	r5, #0
 8000a18:	d0a8      	beq.n	800096c <__udivmoddi4+0xa0>
 8000a1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a1e:	e7a5      	b.n	800096c <__udivmoddi4+0xa0>
 8000a20:	f1c2 0320 	rsb	r3, r2, #32
 8000a24:	fa20 f603 	lsr.w	r6, r0, r3
 8000a28:	4097      	lsls	r7, r2
 8000a2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000a2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a32:	40d9      	lsrs	r1, r3
 8000a34:	4330      	orrs	r0, r6
 8000a36:	0c03      	lsrs	r3, r0, #16
 8000a38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000a3c:	fa1f f887 	uxth.w	r8, r7
 8000a40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a48:	fb06 f108 	mul.w	r1, r6, r8
 8000a4c:	4299      	cmp	r1, r3
 8000a4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a52:	d909      	bls.n	8000a68 <__udivmoddi4+0x19c>
 8000a54:	18fb      	adds	r3, r7, r3
 8000a56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a5a:	f080 808d 	bcs.w	8000b78 <__udivmoddi4+0x2ac>
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	f240 808a 	bls.w	8000b78 <__udivmoddi4+0x2ac>
 8000a64:	3e02      	subs	r6, #2
 8000a66:	443b      	add	r3, r7
 8000a68:	1a5b      	subs	r3, r3, r1
 8000a6a:	b281      	uxth	r1, r0
 8000a6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a78:	fb00 f308 	mul.w	r3, r0, r8
 8000a7c:	428b      	cmp	r3, r1
 8000a7e:	d907      	bls.n	8000a90 <__udivmoddi4+0x1c4>
 8000a80:	1879      	adds	r1, r7, r1
 8000a82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a86:	d273      	bcs.n	8000b70 <__udivmoddi4+0x2a4>
 8000a88:	428b      	cmp	r3, r1
 8000a8a:	d971      	bls.n	8000b70 <__udivmoddi4+0x2a4>
 8000a8c:	3802      	subs	r0, #2
 8000a8e:	4439      	add	r1, r7
 8000a90:	1acb      	subs	r3, r1, r3
 8000a92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a96:	e778      	b.n	800098a <__udivmoddi4+0xbe>
 8000a98:	f1c6 0c20 	rsb	ip, r6, #32
 8000a9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000aa0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000aa4:	431c      	orrs	r4, r3
 8000aa6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000aaa:	fa01 f306 	lsl.w	r3, r1, r6
 8000aae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000ab2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ab6:	431f      	orrs	r7, r3
 8000ab8:	0c3b      	lsrs	r3, r7, #16
 8000aba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000abe:	fa1f f884 	uxth.w	r8, r4
 8000ac2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ac6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000aca:	fb09 fa08 	mul.w	sl, r9, r8
 8000ace:	458a      	cmp	sl, r1
 8000ad0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ad4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ad8:	d908      	bls.n	8000aec <__udivmoddi4+0x220>
 8000ada:	1861      	adds	r1, r4, r1
 8000adc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ae0:	d248      	bcs.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae2:	458a      	cmp	sl, r1
 8000ae4:	d946      	bls.n	8000b74 <__udivmoddi4+0x2a8>
 8000ae6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aea:	4421      	add	r1, r4
 8000aec:	eba1 010a 	sub.w	r1, r1, sl
 8000af0:	b2bf      	uxth	r7, r7
 8000af2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000af6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000afa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000afe:	fb00 f808 	mul.w	r8, r0, r8
 8000b02:	45b8      	cmp	r8, r7
 8000b04:	d907      	bls.n	8000b16 <__udivmoddi4+0x24a>
 8000b06:	19e7      	adds	r7, r4, r7
 8000b08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b0c:	d22e      	bcs.n	8000b6c <__udivmoddi4+0x2a0>
 8000b0e:	45b8      	cmp	r8, r7
 8000b10:	d92c      	bls.n	8000b6c <__udivmoddi4+0x2a0>
 8000b12:	3802      	subs	r0, #2
 8000b14:	4427      	add	r7, r4
 8000b16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b1a:	eba7 0708 	sub.w	r7, r7, r8
 8000b1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000b22:	454f      	cmp	r7, r9
 8000b24:	46c6      	mov	lr, r8
 8000b26:	4649      	mov	r1, r9
 8000b28:	d31a      	bcc.n	8000b60 <__udivmoddi4+0x294>
 8000b2a:	d017      	beq.n	8000b5c <__udivmoddi4+0x290>
 8000b2c:	b15d      	cbz	r5, 8000b46 <__udivmoddi4+0x27a>
 8000b2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000b32:	eb67 0701 	sbc.w	r7, r7, r1
 8000b36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000b3a:	40f2      	lsrs	r2, r6
 8000b3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000b40:	40f7      	lsrs	r7, r6
 8000b42:	e9c5 2700 	strd	r2, r7, [r5]
 8000b46:	2600      	movs	r6, #0
 8000b48:	4631      	mov	r1, r6
 8000b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4e:	462e      	mov	r6, r5
 8000b50:	4628      	mov	r0, r5
 8000b52:	e70b      	b.n	800096c <__udivmoddi4+0xa0>
 8000b54:	4606      	mov	r6, r0
 8000b56:	e6e9      	b.n	800092c <__udivmoddi4+0x60>
 8000b58:	4618      	mov	r0, r3
 8000b5a:	e6fd      	b.n	8000958 <__udivmoddi4+0x8c>
 8000b5c:	4543      	cmp	r3, r8
 8000b5e:	d2e5      	bcs.n	8000b2c <__udivmoddi4+0x260>
 8000b60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b64:	eb69 0104 	sbc.w	r1, r9, r4
 8000b68:	3801      	subs	r0, #1
 8000b6a:	e7df      	b.n	8000b2c <__udivmoddi4+0x260>
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e7d2      	b.n	8000b16 <__udivmoddi4+0x24a>
 8000b70:	4660      	mov	r0, ip
 8000b72:	e78d      	b.n	8000a90 <__udivmoddi4+0x1c4>
 8000b74:	4681      	mov	r9, r0
 8000b76:	e7b9      	b.n	8000aec <__udivmoddi4+0x220>
 8000b78:	4666      	mov	r6, ip
 8000b7a:	e775      	b.n	8000a68 <__udivmoddi4+0x19c>
 8000b7c:	4630      	mov	r0, r6
 8000b7e:	e74a      	b.n	8000a16 <__udivmoddi4+0x14a>
 8000b80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b84:	4439      	add	r1, r7
 8000b86:	e713      	b.n	80009b0 <__udivmoddi4+0xe4>
 8000b88:	3802      	subs	r0, #2
 8000b8a:	443c      	add	r4, r7
 8000b8c:	e724      	b.n	80009d8 <__udivmoddi4+0x10c>
 8000b8e:	bf00      	nop

08000b90 <__aeabi_idiv0>:
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <SELECT>:



/* SPI Chip Select */
static void SELECT(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	2101      	movs	r1, #1
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <SELECT+0x14>)
 8000b9e:	f001 feab 	bl	80028f8 <HAL_GPIO_WritePin>
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40020400 	.word	0x40020400

08000bac <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	2101      	movs	r1, #1
 8000bb4:	4802      	ldr	r0, [pc, #8]	; (8000bc0 <DESELECT+0x14>)
 8000bb6:	f001 fe9f 	bl	80028f8 <HAL_GPIO_WritePin>
}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	40020400 	.word	0x40020400

08000bc4 <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000bce:	bf00      	nop
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <SPI_TxByte+0x30>)
 8000bd2:	f002 fe86 	bl	80038e2 <HAL_SPI_GetState>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d1f9      	bne.n	8000bd0 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000bdc:	1df9      	adds	r1, r7, #7
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <SPI_TxByte+0x30>)
 8000be6:	f002 fb9e 	bl	8003326 <HAL_SPI_Transmit>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	20000308 	.word	0x20000308

08000bf8 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000bfe:	23ff      	movs	r3, #255	; 0xff
 8000c00:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000c06:	bf00      	nop
 8000c08:	4809      	ldr	r0, [pc, #36]	; (8000c30 <SPI_RxByte+0x38>)
 8000c0a:	f002 fe6a 	bl	80038e2 <HAL_SPI_GetState>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d1f9      	bne.n	8000c08 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000c14:	1dba      	adds	r2, r7, #6
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1c:	9300      	str	r3, [sp, #0]
 8000c1e:	2301      	movs	r3, #1
 8000c20:	4803      	ldr	r0, [pc, #12]	; (8000c30 <SPI_RxByte+0x38>)
 8000c22:	f002 fcbc 	bl	800359e <HAL_SPI_TransmitReceive>

  return data;
 8000c26:	79bb      	ldrb	r3, [r7, #6]
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000308 	.word	0x20000308

08000c34 <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c3c:	f7ff ffdc 	bl	8000bf8 <SPI_RxByte>
 8000c40:	4603      	mov	r3, r0
 8000c42:	461a      	mov	r2, r3
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	701a      	strb	r2, [r3, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SD_ReadyWait+0x34>)
 8000c58:	2232      	movs	r2, #50	; 0x32
 8000c5a:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8000c5c:	f7ff ffcc 	bl	8000bf8 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8000c60:	f7ff ffca 	bl	8000bf8 <SPI_RxByte>
 8000c64:	4603      	mov	r3, r0
 8000c66:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2bff      	cmp	r3, #255	; 0xff
 8000c6c:	d004      	beq.n	8000c78 <SD_ReadyWait+0x28>
 8000c6e:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <SD_ReadyWait+0x34>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b2db      	uxtb	r3, r3
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f3      	bne.n	8000c60 <SD_ReadyWait+0x10>

  return res;
 8000c78:	79fb      	ldrb	r3, [r7, #7]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2001d728 	.word	0x2001d728

08000c88 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000c8e:	f641 73ff 	movw	r3, #8191	; 0x1fff
 8000c92:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 8000c94:	f7ff ff8a 	bl	8000bac <DESELECT>

  for(int i = 0; i < 10; i++)
 8000c98:	2300      	movs	r3, #0
 8000c9a:	613b      	str	r3, [r7, #16]
 8000c9c:	e005      	b.n	8000caa <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000c9e:	20ff      	movs	r0, #255	; 0xff
 8000ca0:	f7ff ff90 	bl	8000bc4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	613b      	str	r3, [r7, #16]
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	2b09      	cmp	r3, #9
 8000cae:	ddf6      	ble.n	8000c9e <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8000cb0:	f7ff ff70 	bl	8000b94 <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 8000cb4:	2340      	movs	r3, #64	; 0x40
 8000cb6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000cc8:	2395      	movs	r3, #149	; 0x95
 8000cca:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8000ccc:	2300      	movs	r3, #0
 8000cce:	60fb      	str	r3, [r7, #12]
 8000cd0:	e009      	b.n	8000ce6 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f7ff ff72 	bl	8000bc4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	ddf2      	ble.n	8000cd2 <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 8000cec:	e002      	b.n	8000cf4 <SD_PowerOn+0x6c>
  {
    Count--;
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3b01      	subs	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000cf4:	f7ff ff80 	bl	8000bf8 <SPI_RxByte>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d002      	beq.n	8000d04 <SD_PowerOn+0x7c>
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1f4      	bne.n	8000cee <SD_PowerOn+0x66>
  }

  DESELECT();
 8000d04:	f7ff ff52 	bl	8000bac <DESELECT>
  SPI_TxByte(0XFF);
 8000d08:	20ff      	movs	r0, #255	; 0xff
 8000d0a:	f7ff ff5b 	bl	8000bc4 <SPI_TxByte>

  PowerFlag = 1;
 8000d0e:	4b03      	ldr	r3, [pc, #12]	; (8000d1c <SD_PowerOn+0x94>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	701a      	strb	r2, [r3, #0]
}
 8000d14:	bf00      	nop
 8000d16:	3718      	adds	r7, #24
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200000a9 	.word	0x200000a9

08000d20 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <SD_PowerOff+0x14>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
}
 8000d2a:	bf00      	nop
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	200000a9 	.word	0x200000a9

08000d38 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000d3c:	4b03      	ldr	r3, [pc, #12]	; (8000d4c <SD_CheckPower+0x14>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	200000a9 	.word	0x200000a9

08000d50 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8000d5a:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <SD_RxDataBlock+0x68>)
 8000d5c:	220a      	movs	r2, #10
 8000d5e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8000d60:	f7ff ff4a 	bl	8000bf8 <SPI_RxByte>
 8000d64:	4603      	mov	r3, r0
 8000d66:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000d68:	7bfb      	ldrb	r3, [r7, #15]
 8000d6a:	2bff      	cmp	r3, #255	; 0xff
 8000d6c:	d104      	bne.n	8000d78 <SD_RxDataBlock+0x28>
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <SD_RxDataBlock+0x68>)
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d1f3      	bne.n	8000d60 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000d78:	7bfb      	ldrb	r3, [r7, #15]
 8000d7a:	2bfe      	cmp	r3, #254	; 0xfe
 8000d7c:	d001      	beq.n	8000d82 <SD_RxDataBlock+0x32>
    return FALSE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	e016      	b.n	8000db0 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	1c5a      	adds	r2, r3, #1
 8000d86:	607a      	str	r2, [r7, #4]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff ff53 	bl	8000c34 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	607a      	str	r2, [r7, #4]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f7ff ff4d 	bl	8000c34 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	3b02      	subs	r3, #2
 8000d9e:	603b      	str	r3, [r7, #0]
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d1ed      	bne.n	8000d82 <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 8000da6:	f7ff ff27 	bl	8000bf8 <SPI_RxByte>
  SPI_RxByte();
 8000daa:	f7ff ff25 	bl	8000bf8 <SPI_RxByte>

  return TRUE;
 8000dae:	2301      	movs	r3, #1
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3710      	adds	r7, #16
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2001d729 	.word	0x2001d729

08000dbc <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000dcc:	f7ff ff40 	bl	8000c50 <SD_ReadyWait>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2bff      	cmp	r3, #255	; 0xff
 8000dd4:	d001      	beq.n	8000dda <SD_TxDataBlock+0x1e>
    return FALSE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	e040      	b.n	8000e5c <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8000dda:	78fb      	ldrb	r3, [r7, #3]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fef1 	bl	8000bc4 <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 8000de2:	78fb      	ldrb	r3, [r7, #3]
 8000de4:	2bfd      	cmp	r3, #253	; 0xfd
 8000de6:	d031      	beq.n	8000e4c <SD_TxDataBlock+0x90>
  {
    wc = 0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fee5 	bl	8000bc4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff fede 	bl	8000bc4 <SPI_TxByte>
    } while (--wc);
 8000e08:	7bbb      	ldrb	r3, [r7, #14]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	73bb      	strb	r3, [r7, #14]
 8000e0e:	7bbb      	ldrb	r3, [r7, #14]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d1eb      	bne.n	8000dec <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 8000e14:	f7ff fef0 	bl	8000bf8 <SPI_RxByte>
    SPI_RxByte();
 8000e18:	f7ff feee 	bl	8000bf8 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 8000e1c:	e00b      	b.n	8000e36 <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 8000e1e:	f7ff feeb 	bl	8000bf8 <SPI_RxByte>
 8000e22:	4603      	mov	r3, r0
 8000e24:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 8000e26:	7bfb      	ldrb	r3, [r7, #15]
 8000e28:	f003 031f 	and.w	r3, r3, #31
 8000e2c:	2b05      	cmp	r3, #5
 8000e2e:	d006      	beq.n	8000e3e <SD_TxDataBlock+0x82>
        break;

      i++;
 8000e30:	7b7b      	ldrb	r3, [r7, #13]
 8000e32:	3301      	adds	r3, #1
 8000e34:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 8000e36:	7b7b      	ldrb	r3, [r7, #13]
 8000e38:	2b40      	cmp	r3, #64	; 0x40
 8000e3a:	d9f0      	bls.n	8000e1e <SD_TxDataBlock+0x62>
 8000e3c:	e000      	b.n	8000e40 <SD_TxDataBlock+0x84>
        break;
 8000e3e:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000e40:	bf00      	nop
 8000e42:	f7ff fed9 	bl	8000bf8 <SPI_RxByte>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d0fa      	beq.n	8000e42 <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8000e4c:	7bfb      	ldrb	r3, [r7, #15]
 8000e4e:	f003 031f 	and.w	r3, r3, #31
 8000e52:	2b05      	cmp	r3, #5
 8000e54:	d101      	bne.n	8000e5a <SD_TxDataBlock+0x9e>
    return TRUE;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e000      	b.n	8000e5c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000e5a:	2300      	movs	r3, #0
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3710      	adds	r7, #16
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b084      	sub	sp, #16
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	6039      	str	r1, [r7, #0]
 8000e6e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e70:	f7ff feee 	bl	8000c50 <SD_ReadyWait>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2bff      	cmp	r3, #255	; 0xff
 8000e78:	d001      	beq.n	8000e7e <SD_SendCmd+0x1a>
    return 0xFF;
 8000e7a:	23ff      	movs	r3, #255	; 0xff
 8000e7c:	e040      	b.n	8000f00 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe9f 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	0e1b      	lsrs	r3, r3, #24
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff fe99 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000e92:	683b      	ldr	r3, [r7, #0]
 8000e94:	0c1b      	lsrs	r3, r3, #16
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff fe93 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	0a1b      	lsrs	r3, r3, #8
 8000ea2:	b2db      	uxtb	r3, r3
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fe8d 	bl	8000bc4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fe88 	bl	8000bc4 <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	2b40      	cmp	r3, #64	; 0x40
 8000ebc:	d101      	bne.n	8000ec2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000ebe:	2395      	movs	r3, #149	; 0x95
 8000ec0:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	2b48      	cmp	r3, #72	; 0x48
 8000ec6:	d101      	bne.n	8000ecc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000ec8:	2387      	movs	r3, #135	; 0x87
 8000eca:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff fe78 	bl	8000bc4 <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	2b4c      	cmp	r3, #76	; 0x4c
 8000ed8:	d101      	bne.n	8000ede <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000eda:	f7ff fe8d 	bl	8000bf8 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8000ede:	230a      	movs	r3, #10
 8000ee0:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000ee2:	f7ff fe89 	bl	8000bf8 <SPI_RxByte>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000eea:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	da05      	bge.n	8000efe <SD_SendCmd+0x9a>
 8000ef2:	7bbb      	ldrb	r3, [r7, #14]
 8000ef4:	3b01      	subs	r3, #1
 8000ef6:	73bb      	strb	r3, [r7, #14]
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d1f1      	bne.n	8000ee2 <SD_SendCmd+0x7e>

  return res;
 8000efe:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3710      	adds	r7, #16
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}

08000f08 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f08:	b590      	push	{r4, r7, lr}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	e0d5      	b.n	80010c8 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f1c:	4b6c      	ldr	r3, [pc, #432]	; (80010d0 <SD_disk_initialize+0x1c8>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d003      	beq.n	8000f32 <SD_disk_initialize+0x2a>
    return Stat;
 8000f2a:	4b69      	ldr	r3, [pc, #420]	; (80010d0 <SD_disk_initialize+0x1c8>)
 8000f2c:	781b      	ldrb	r3, [r3, #0]
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	e0ca      	b.n	80010c8 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8000f32:	f7ff fea9 	bl	8000c88 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8000f36:	f7ff fe2d 	bl	8000b94 <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f3e:	2100      	movs	r1, #0
 8000f40:	2040      	movs	r0, #64	; 0x40
 8000f42:	f7ff ff8f 	bl	8000e64 <SD_SendCmd>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	f040 80a5 	bne.w	8001098 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000f4e:	4b61      	ldr	r3, [pc, #388]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000f50:	2264      	movs	r2, #100	; 0x64
 8000f52:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f54:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8000f58:	2048      	movs	r0, #72	; 0x48
 8000f5a:	f7ff ff83 	bl	8000e64 <SD_SendCmd>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	d158      	bne.n	8001016 <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000f64:	2300      	movs	r3, #0
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e00c      	b.n	8000f84 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000f6a:	7bfc      	ldrb	r4, [r7, #15]
 8000f6c:	f7ff fe44 	bl	8000bf8 <SPI_RxByte>
 8000f70:	4603      	mov	r3, r0
 8000f72:	461a      	mov	r2, r3
 8000f74:	f107 0310 	add.w	r3, r7, #16
 8000f78:	4423      	add	r3, r4
 8000f7a:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	3301      	adds	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	7bfb      	ldrb	r3, [r7, #15]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d9ef      	bls.n	8000f6a <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000f8a:	7abb      	ldrb	r3, [r7, #10]
 8000f8c:	2b01      	cmp	r3, #1
 8000f8e:	f040 8083 	bne.w	8001098 <SD_disk_initialize+0x190>
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	2baa      	cmp	r3, #170	; 0xaa
 8000f96:	d17f      	bne.n	8001098 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	2077      	movs	r0, #119	; 0x77
 8000f9c:	f7ff ff62 	bl	8000e64 <SD_SendCmd>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d807      	bhi.n	8000fb6 <SD_disk_initialize+0xae>
 8000fa6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8000faa:	2069      	movs	r0, #105	; 0x69
 8000fac:	f7ff ff5a 	bl	8000e64 <SD_SendCmd>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8000fb6:	4b47      	ldr	r3, [pc, #284]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d1eb      	bne.n	8000f98 <SD_disk_initialize+0x90>
 8000fc0:	e000      	b.n	8000fc4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8000fc2:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <SD_disk_initialize+0x1cc>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d064      	beq.n	8001098 <SD_disk_initialize+0x190>
 8000fce:	2100      	movs	r1, #0
 8000fd0:	207a      	movs	r0, #122	; 0x7a
 8000fd2:	f7ff ff47 	bl	8000e64 <SD_SendCmd>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d15d      	bne.n	8001098 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
 8000fe0:	e00c      	b.n	8000ffc <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8000fe2:	7bfc      	ldrb	r4, [r7, #15]
 8000fe4:	f7ff fe08 	bl	8000bf8 <SPI_RxByte>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	461a      	mov	r2, r3
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	4423      	add	r3, r4
 8000ff2:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d9ef      	bls.n	8000fe2 <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001002:	7a3b      	ldrb	r3, [r7, #8]
 8001004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <SD_disk_initialize+0x108>
 800100c:	2306      	movs	r3, #6
 800100e:	e000      	b.n	8001012 <SD_disk_initialize+0x10a>
 8001010:	2302      	movs	r3, #2
 8001012:	73bb      	strb	r3, [r7, #14]
 8001014:	e040      	b.n	8001098 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001016:	2100      	movs	r1, #0
 8001018:	2077      	movs	r0, #119	; 0x77
 800101a:	f7ff ff23 	bl	8000e64 <SD_SendCmd>
 800101e:	4603      	mov	r3, r0
 8001020:	2b01      	cmp	r3, #1
 8001022:	d808      	bhi.n	8001036 <SD_disk_initialize+0x12e>
 8001024:	2100      	movs	r1, #0
 8001026:	2069      	movs	r0, #105	; 0x69
 8001028:	f7ff ff1c 	bl	8000e64 <SD_SendCmd>
 800102c:	4603      	mov	r3, r0
 800102e:	2b01      	cmp	r3, #1
 8001030:	d801      	bhi.n	8001036 <SD_disk_initialize+0x12e>
 8001032:	2302      	movs	r3, #2
 8001034:	e000      	b.n	8001038 <SD_disk_initialize+0x130>
 8001036:	2301      	movs	r3, #1
 8001038:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 800103a:	7bbb      	ldrb	r3, [r7, #14]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10e      	bne.n	800105e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001040:	2100      	movs	r1, #0
 8001042:	2077      	movs	r0, #119	; 0x77
 8001044:	f7ff ff0e 	bl	8000e64 <SD_SendCmd>
 8001048:	4603      	mov	r3, r0
 800104a:	2b01      	cmp	r3, #1
 800104c:	d80e      	bhi.n	800106c <SD_disk_initialize+0x164>
 800104e:	2100      	movs	r1, #0
 8001050:	2069      	movs	r0, #105	; 0x69
 8001052:	f7ff ff07 	bl	8000e64 <SD_SendCmd>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d107      	bne.n	800106c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800105c:	e00d      	b.n	800107a <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800105e:	2100      	movs	r1, #0
 8001060:	2041      	movs	r0, #65	; 0x41
 8001062:	f7ff feff 	bl	8000e64 <SD_SendCmd>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d005      	beq.n	8001078 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800106c:	4b19      	ldr	r3, [pc, #100]	; (80010d4 <SD_disk_initialize+0x1cc>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	b2db      	uxtb	r3, r3
 8001072:	2b00      	cmp	r3, #0
 8001074:	d1e1      	bne.n	800103a <SD_disk_initialize+0x132>
 8001076:	e000      	b.n	800107a <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001078:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 800107a:	4b16      	ldr	r3, [pc, #88]	; (80010d4 <SD_disk_initialize+0x1cc>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b00      	cmp	r3, #0
 8001082:	d007      	beq.n	8001094 <SD_disk_initialize+0x18c>
 8001084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001088:	2050      	movs	r0, #80	; 0x50
 800108a:	f7ff feeb 	bl	8000e64 <SD_SendCmd>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001098:	4a0f      	ldr	r2, [pc, #60]	; (80010d8 <SD_disk_initialize+0x1d0>)
 800109a:	7bbb      	ldrb	r3, [r7, #14]
 800109c:	7013      	strb	r3, [r2, #0]

  DESELECT();
 800109e:	f7ff fd85 	bl	8000bac <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80010a2:	f7ff fda9 	bl	8000bf8 <SPI_RxByte>

  if (type)
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d008      	beq.n	80010be <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f023 0301 	bic.w	r3, r3, #1
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	e001      	b.n	80010c2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010be:	f7ff fe2f 	bl	8000d20 <SD_PowerOff>
  }

  return Stat;
 80010c2:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <SD_disk_initialize+0x1c8>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd90      	pop	{r4, r7, pc}
 80010d0:	20000000 	.word	0x20000000
 80010d4:	2001d729 	.word	0x2001d729
 80010d8:	200000a8 	.word	0x200000a8

080010dc <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if (drv)
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <SD_disk_status+0x14>
    return STA_NOINIT;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e002      	b.n	80010f6 <SD_disk_status+0x1a>

  return Stat;
 80010f0:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SD_disk_status+0x28>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	b2db      	uxtb	r3, r3
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	370c      	adds	r7, #12
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000000 	.word	0x20000000

08001108 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	60b9      	str	r1, [r7, #8]
 8001110:	607a      	str	r2, [r7, #4]
 8001112:	603b      	str	r3, [r7, #0]
 8001114:	4603      	mov	r3, r0
 8001116:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d102      	bne.n	8001124 <SD_disk_read+0x1c>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d101      	bne.n	8001128 <SD_disk_read+0x20>
    return RES_PARERR;
 8001124:	2304      	movs	r3, #4
 8001126:	e051      	b.n	80011cc <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001128:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <SD_disk_read+0xcc>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	b2db      	uxtb	r3, r3
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001136:	2303      	movs	r3, #3
 8001138:	e048      	b.n	80011cc <SD_disk_read+0xc4>

  if (!(CardType & 4))
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <SD_disk_read+0xd0>)
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	2b00      	cmp	r3, #0
 8001144:	d102      	bne.n	800114c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	025b      	lsls	r3, r3, #9
 800114a:	607b      	str	r3, [r7, #4]

  SELECT();
 800114c:	f7ff fd22 	bl	8000b94 <SELECT>

  if (count == 1)
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	2b01      	cmp	r3, #1
 8001154:	d111      	bne.n	800117a <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	2051      	movs	r0, #81	; 0x51
 800115a:	f7ff fe83 	bl	8000e64 <SD_SendCmd>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d129      	bne.n	80011b8 <SD_disk_read+0xb0>
 8001164:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001168:	68b8      	ldr	r0, [r7, #8]
 800116a:	f7ff fdf1 	bl	8000d50 <SD_RxDataBlock>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d021      	beq.n	80011b8 <SD_disk_read+0xb0>
      count = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	e01e      	b.n	80011b8 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 800117a:	6879      	ldr	r1, [r7, #4]
 800117c:	2052      	movs	r0, #82	; 0x52
 800117e:	f7ff fe71 	bl	8000e64 <SD_SendCmd>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d117      	bne.n	80011b8 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001188:	f44f 7100 	mov.w	r1, #512	; 0x200
 800118c:	68b8      	ldr	r0, [r7, #8]
 800118e:	f7ff fddf 	bl	8000d50 <SD_RxDataBlock>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00a      	beq.n	80011ae <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800119e:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1ed      	bne.n	8001188 <SD_disk_read+0x80>
 80011ac:	e000      	b.n	80011b0 <SD_disk_read+0xa8>
          break;
 80011ae:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 80011b0:	2100      	movs	r1, #0
 80011b2:	204c      	movs	r0, #76	; 0x4c
 80011b4:	f7ff fe56 	bl	8000e64 <SD_SendCmd>
    }
  }

  DESELECT();
 80011b8:	f7ff fcf8 	bl	8000bac <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 80011bc:	f7ff fd1c 	bl	8000bf8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	bf14      	ite	ne
 80011c6:	2301      	movne	r3, #1
 80011c8:	2300      	moveq	r3, #0
 80011ca:	b2db      	uxtb	r3, r3
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	20000000 	.word	0x20000000
 80011d8:	200000a8 	.word	0x200000a8

080011dc <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	603b      	str	r3, [r7, #0]
 80011e8:	4603      	mov	r3, r0
 80011ea:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d102      	bne.n	80011f8 <SD_disk_write+0x1c>
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <SD_disk_write+0x20>
    return RES_PARERR;
 80011f8:	2304      	movs	r3, #4
 80011fa:	e06b      	b.n	80012d4 <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 80011fc:	4b37      	ldr	r3, [pc, #220]	; (80012dc <SD_disk_write+0x100>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b2db      	uxtb	r3, r3
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <SD_disk_write+0x32>
    return RES_NOTRDY;
 800120a:	2303      	movs	r3, #3
 800120c:	e062      	b.n	80012d4 <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 800120e:	4b33      	ldr	r3, [pc, #204]	; (80012dc <SD_disk_write+0x100>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0304 	and.w	r3, r3, #4
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <SD_disk_write+0x44>
    return RES_WRPRT;
 800121c:	2302      	movs	r3, #2
 800121e:	e059      	b.n	80012d4 <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001220:	4b2f      	ldr	r3, [pc, #188]	; (80012e0 <SD_disk_write+0x104>)
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	2b00      	cmp	r3, #0
 800122a:	d102      	bne.n	8001232 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	025b      	lsls	r3, r3, #9
 8001230:	607b      	str	r3, [r7, #4]

  SELECT();
 8001232:	f7ff fcaf 	bl	8000b94 <SELECT>

  if (count == 1)
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d110      	bne.n	800125e <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 800123c:	6879      	ldr	r1, [r7, #4]
 800123e:	2058      	movs	r0, #88	; 0x58
 8001240:	f7ff fe10 	bl	8000e64 <SD_SendCmd>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d13a      	bne.n	80012c0 <SD_disk_write+0xe4>
 800124a:	21fe      	movs	r1, #254	; 0xfe
 800124c:	68b8      	ldr	r0, [r7, #8]
 800124e:	f7ff fdb5 	bl	8000dbc <SD_TxDataBlock>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d033      	beq.n	80012c0 <SD_disk_write+0xe4>
      count = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	603b      	str	r3, [r7, #0]
 800125c:	e030      	b.n	80012c0 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 800125e:	4b20      	ldr	r3, [pc, #128]	; (80012e0 <SD_disk_write+0x104>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d007      	beq.n	800127a <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800126a:	2100      	movs	r1, #0
 800126c:	2077      	movs	r0, #119	; 0x77
 800126e:	f7ff fdf9 	bl	8000e64 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	2057      	movs	r0, #87	; 0x57
 8001276:	f7ff fdf5 	bl	8000e64 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2059      	movs	r0, #89	; 0x59
 800127e:	f7ff fdf1 	bl	8000e64 <SD_SendCmd>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d11b      	bne.n	80012c0 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001288:	21fc      	movs	r1, #252	; 0xfc
 800128a:	68b8      	ldr	r0, [r7, #8]
 800128c:	f7ff fd96 	bl	8000dbc <SD_TxDataBlock>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00a      	beq.n	80012ac <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800129c:	60bb      	str	r3, [r7, #8]
      } while (--count);
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	3b01      	subs	r3, #1
 80012a2:	603b      	str	r3, [r7, #0]
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1ee      	bne.n	8001288 <SD_disk_write+0xac>
 80012aa:	e000      	b.n	80012ae <SD_disk_write+0xd2>
          break;
 80012ac:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 80012ae:	21fd      	movs	r1, #253	; 0xfd
 80012b0:	2000      	movs	r0, #0
 80012b2:	f7ff fd83 	bl	8000dbc <SD_TxDataBlock>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <SD_disk_write+0xe4>
      {
        count = 1;
 80012bc:	2301      	movs	r3, #1
 80012be:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 80012c0:	f7ff fc74 	bl	8000bac <DESELECT>
  SPI_RxByte();
 80012c4:	f7ff fc98 	bl	8000bf8 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	bf14      	ite	ne
 80012ce:	2301      	movne	r3, #1
 80012d0:	2300      	moveq	r3, #0
 80012d2:	b2db      	uxtb	r3, r3
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3710      	adds	r7, #16
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000000 	.word	0x20000000
 80012e0:	200000a8 	.word	0x200000a8

080012e4 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b08b      	sub	sp, #44	; 0x2c
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	603a      	str	r2, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	460b      	mov	r3, r1
 80012f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 80012fe:	2304      	movs	r3, #4
 8001300:	e11b      	b.n	800153a <SD_disk_ioctl+0x256>

  res = RES_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if (ctrl == CTRL_POWER)
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b05      	cmp	r3, #5
 800130c:	d129      	bne.n	8001362 <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d017      	beq.n	8001346 <SD_disk_ioctl+0x62>
 8001316:	2b02      	cmp	r3, #2
 8001318:	dc1f      	bgt.n	800135a <SD_disk_ioctl+0x76>
 800131a:	2b00      	cmp	r3, #0
 800131c:	d002      	beq.n	8001324 <SD_disk_ioctl+0x40>
 800131e:	2b01      	cmp	r3, #1
 8001320:	d00b      	beq.n	800133a <SD_disk_ioctl+0x56>
 8001322:	e01a      	b.n	800135a <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001324:	f7ff fd08 	bl	8000d38 <SD_CheckPower>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 800132e:	f7ff fcf7 	bl	8000d20 <SD_PowerOff>
      res = RES_OK;
 8001332:	2300      	movs	r3, #0
 8001334:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001338:	e0fd      	b.n	8001536 <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 800133a:	f7ff fca5 	bl	8000c88 <SD_PowerOn>
      res = RES_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001344:	e0f7      	b.n	8001536 <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001346:	6a3b      	ldr	r3, [r7, #32]
 8001348:	1c5c      	adds	r4, r3, #1
 800134a:	f7ff fcf5 	bl	8000d38 <SD_CheckPower>
 800134e:	4603      	mov	r3, r0
 8001350:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001352:	2300      	movs	r3, #0
 8001354:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001358:	e0ed      	b.n	8001536 <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 800135a:	2304      	movs	r3, #4
 800135c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001360:	e0e9      	b.n	8001536 <SD_disk_ioctl+0x252>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001362:	4b78      	ldr	r3, [pc, #480]	; (8001544 <SD_disk_ioctl+0x260>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	b2db      	uxtb	r3, r3
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001370:	2303      	movs	r3, #3
 8001372:	e0e2      	b.n	800153a <SD_disk_ioctl+0x256>

    SELECT();
 8001374:	f7ff fc0e 	bl	8000b94 <SELECT>

    switch (ctrl)
 8001378:	79bb      	ldrb	r3, [r7, #6]
 800137a:	2b0d      	cmp	r3, #13
 800137c:	f200 80cc 	bhi.w	8001518 <SD_disk_ioctl+0x234>
 8001380:	a201      	add	r2, pc, #4	; (adr r2, 8001388 <SD_disk_ioctl+0xa4>)
 8001382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001386:	bf00      	nop
 8001388:	08001483 	.word	0x08001483
 800138c:	080013c1 	.word	0x080013c1
 8001390:	08001473 	.word	0x08001473
 8001394:	08001519 	.word	0x08001519
 8001398:	08001519 	.word	0x08001519
 800139c:	08001519 	.word	0x08001519
 80013a0:	08001519 	.word	0x08001519
 80013a4:	08001519 	.word	0x08001519
 80013a8:	08001519 	.word	0x08001519
 80013ac:	08001519 	.word	0x08001519
 80013b0:	08001519 	.word	0x08001519
 80013b4:	08001495 	.word	0x08001495
 80013b8:	080014b9 	.word	0x080014b9
 80013bc:	080014dd 	.word	0x080014dd
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c0:	2100      	movs	r1, #0
 80013c2:	2049      	movs	r0, #73	; 0x49
 80013c4:	f7ff fd4e 	bl	8000e64 <SD_SendCmd>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f040 80a8 	bne.w	8001520 <SD_disk_ioctl+0x23c>
 80013d0:	f107 030c 	add.w	r3, r7, #12
 80013d4:	2110      	movs	r1, #16
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fcba 	bl	8000d50 <SD_RxDataBlock>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	f000 809e 	beq.w	8001520 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1)
 80013e4:	7b3b      	ldrb	r3, [r7, #12]
 80013e6:	099b      	lsrs	r3, r3, #6
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d10e      	bne.n	800140c <SD_disk_ioctl+0x128>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013ee:	7d7b      	ldrb	r3, [r7, #21]
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	7d3b      	ldrb	r3, [r7, #20]
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	021b      	lsls	r3, r3, #8
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4413      	add	r3, r2
 80013fc:	b29b      	uxth	r3, r3
 80013fe:	3301      	adds	r3, #1
 8001400:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001402:	8bfb      	ldrh	r3, [r7, #30]
 8001404:	029a      	lsls	r2, r3, #10
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	e02e      	b.n	800146a <SD_disk_ioctl+0x186>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800140c:	7c7b      	ldrb	r3, [r7, #17]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	b2da      	uxtb	r2, r3
 8001414:	7dbb      	ldrb	r3, [r7, #22]
 8001416:	09db      	lsrs	r3, r3, #7
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4413      	add	r3, r2
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7d7b      	ldrb	r3, [r7, #21]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	b2db      	uxtb	r3, r3
 8001424:	f003 0306 	and.w	r3, r3, #6
 8001428:	b2db      	uxtb	r3, r3
 800142a:	4413      	add	r3, r2
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3302      	adds	r3, #2
 8001430:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001434:	7d3b      	ldrb	r3, [r7, #20]
 8001436:	099b      	lsrs	r3, r3, #6
 8001438:	b2db      	uxtb	r3, r3
 800143a:	b29a      	uxth	r2, r3
 800143c:	7cfb      	ldrb	r3, [r7, #19]
 800143e:	b29b      	uxth	r3, r3
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	b29b      	uxth	r3, r3
 8001444:	4413      	add	r3, r2
 8001446:	b29a      	uxth	r2, r3
 8001448:	7cbb      	ldrb	r3, [r7, #18]
 800144a:	029b      	lsls	r3, r3, #10
 800144c:	b29b      	uxth	r3, r3
 800144e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001452:	b29b      	uxth	r3, r3
 8001454:	4413      	add	r3, r2
 8001456:	b29b      	uxth	r3, r3
 8001458:	3301      	adds	r3, #1
 800145a:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 800145c:	8bfa      	ldrh	r2, [r7, #30]
 800145e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001462:	3b09      	subs	r3, #9
 8001464:	409a      	lsls	r2, r3
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8001470:	e056      	b.n	8001520 <SD_disk_ioctl+0x23c>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001478:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001480:	e055      	b.n	800152e <SD_disk_ioctl+0x24a>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8001482:	f7ff fbe5 	bl	8000c50 <SD_ReadyWait>
 8001486:	4603      	mov	r3, r0
 8001488:	2bff      	cmp	r3, #255	; 0xff
 800148a:	d14b      	bne.n	8001524 <SD_disk_ioctl+0x240>
        res = RES_OK;
 800148c:	2300      	movs	r3, #0
 800148e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8001492:	e047      	b.n	8001524 <SD_disk_ioctl+0x240>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8001494:	2100      	movs	r1, #0
 8001496:	2049      	movs	r0, #73	; 0x49
 8001498:	f7ff fce4 	bl	8000e64 <SD_SendCmd>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d142      	bne.n	8001528 <SD_disk_ioctl+0x244>
 80014a2:	2110      	movs	r1, #16
 80014a4:	6a38      	ldr	r0, [r7, #32]
 80014a6:	f7ff fc53 	bl	8000d50 <SD_RxDataBlock>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03b      	beq.n	8001528 <SD_disk_ioctl+0x244>
        res = RES_OK;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014b6:	e037      	b.n	8001528 <SD_disk_ioctl+0x244>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014b8:	2100      	movs	r1, #0
 80014ba:	204a      	movs	r0, #74	; 0x4a
 80014bc:	f7ff fcd2 	bl	8000e64 <SD_SendCmd>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d132      	bne.n	800152c <SD_disk_ioctl+0x248>
 80014c6:	2110      	movs	r1, #16
 80014c8:	6a38      	ldr	r0, [r7, #32]
 80014ca:	f7ff fc41 	bl	8000d50 <SD_RxDataBlock>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d02b      	beq.n	800152c <SD_disk_ioctl+0x248>
        res = RES_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80014da:	e027      	b.n	800152c <SD_disk_ioctl+0x248>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014dc:	2100      	movs	r1, #0
 80014de:	207a      	movs	r0, #122	; 0x7a
 80014e0:	f7ff fcc0 	bl	8000e64 <SD_SendCmd>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d116      	bne.n	8001518 <SD_disk_ioctl+0x234>
      {
        for (n = 0; n < 4; n++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80014f0:	e00b      	b.n	800150a <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80014f2:	6a3c      	ldr	r4, [r7, #32]
 80014f4:	1c63      	adds	r3, r4, #1
 80014f6:	623b      	str	r3, [r7, #32]
 80014f8:	f7ff fb7e 	bl	8000bf8 <SPI_RxByte>
 80014fc:	4603      	mov	r3, r0
 80014fe:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001500:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001504:	3301      	adds	r3, #1
 8001506:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800150a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800150e:	2b03      	cmp	r3, #3
 8001510:	d9ef      	bls.n	80014f2 <SD_disk_ioctl+0x20e>
        }

        res = RES_OK;
 8001512:	2300      	movs	r3, #0
 8001514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }

    default:
      res = RES_PARERR;
 8001518:	2304      	movs	r3, #4
 800151a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800151e:	e006      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001520:	bf00      	nop
 8001522:	e004      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001524:	bf00      	nop
 8001526:	e002      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 8001528:	bf00      	nop
 800152a:	e000      	b.n	800152e <SD_disk_ioctl+0x24a>
      break;
 800152c:	bf00      	nop
    }

    DESELECT();
 800152e:	f7ff fb3d 	bl	8000bac <DESELECT>
    SPI_RxByte();
 8001532:	f7ff fb61 	bl	8000bf8 <SPI_RxByte>
  }

  return res;
 8001536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800153a:	4618      	mov	r0, r3
 800153c:	372c      	adds	r7, #44	; 0x2c
 800153e:	46bd      	mov	sp, r7
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	bf00      	nop
 8001544:	20000000 	.word	0x20000000

08001548 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char*string)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8001550:	6878      	ldr	r0, [r7, #4]
 8001552:	f7fe fe45 	bl	80001e0 <strlen>
 8001556:	4603      	mov	r3, r0
 8001558:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2, (uint8_t*) string, len, 2000);
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	b29a      	uxth	r2, r3
 800155e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <send_uart+0x2c>)
 8001566:	f002 fec4 	bl	80042f2 <HAL_UART_Transmit>
}
 800156a:	bf00      	nop
 800156c:	3710      	adds	r7, #16
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2001c6b0 	.word	0x2001c6b0

08001578 <bufsize>:

int bufsize (char*buf)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	int i=0;
 8001580:	2300      	movs	r3, #0
 8001582:	60fb      	str	r3, [r7, #12]
	while(*buf++ !='\0') i++;
 8001584:	e002      	b.n	800158c <bufsize+0x14>
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	3301      	adds	r3, #1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	607a      	str	r2, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d1f6      	bne.n	8001586 <bufsize+0xe>
	return i;
 8001598:	68fb      	ldr	r3, [r7, #12]
}
 800159a:	4618      	mov	r0, r3
 800159c:	3714      	adds	r7, #20
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr

080015a6 <bufclear>:

void bufclear (char *buffer_uart)
{
 80015a6:	b480      	push	{r7}
 80015a8:	b085      	sub	sp, #20
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	6078      	str	r0, [r7, #4]
	for (int i=0; i<sizeof(buffer_uart); i++)
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	e007      	b.n	80015c4 <bufclear+0x1e>
	{
		buffer_uart[i]='\0';
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	4413      	add	r3, r2
 80015ba:	2200      	movs	r2, #0
 80015bc:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<sizeof(buffer_uart); i++)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	3301      	adds	r3, #1
 80015c2:	60fb      	str	r3, [r7, #12]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	2b03      	cmp	r3, #3
 80015c8:	d9f4      	bls.n	80015b4 <bufclear+0xe>
	}
}
 80015ca:	bf00      	nop
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr

080015d8 <open_append>:

FRESULT open_append(FIL* fp, /* [OUT] File object to create */
const char* path /* [IN]  File name to be opened */
) {
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]

	/* Opens an existing file. If not exist, creates a new file. */
	fresult = f_open(fp, path, FA_WRITE | FA_OPEN_ALWAYS | FA_WRITE);
 80015e2:	2212      	movs	r2, #18
 80015e4:	6839      	ldr	r1, [r7, #0]
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f005 fbee 	bl	8006dc8 <f_open>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b0e      	ldr	r3, [pc, #56]	; (800162c <open_append+0x54>)
 80015f2:	701a      	strb	r2, [r3, #0]
	if (fresult == 0) {
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <open_append+0x54>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d110      	bne.n	800161e <open_append+0x46>
		/* Seek to end of the file to append data */
		fresult = f_lseek(fp, f_size(fp));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	68db      	ldr	r3, [r3, #12]
 8001600:	4619      	mov	r1, r3
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f006 f947 	bl	8007896 <f_lseek>
 8001608:	4603      	mov	r3, r0
 800160a:	461a      	mov	r2, r3
 800160c:	4b07      	ldr	r3, [pc, #28]	; (800162c <open_append+0x54>)
 800160e:	701a      	strb	r2, [r3, #0]
		if (fresult != 0)
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <open_append+0x54>)
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d002      	beq.n	800161e <open_append+0x46>
			f_close(fp);
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f006 f912 	bl	8007842 <f_close>
	}
	return fresult;
 800161e:	4b03      	ldr	r3, [pc, #12]	; (800162c <open_append+0x54>)
 8001620:	781b      	ldrb	r3, [r3, #0]
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	2001c6ac 	.word	0x2001c6ac

08001630 <open_append_read>:
FRESULT open_append_read(FIL* fp, /* [OUT] File object to create */
		unsigned int read_point, /*starting point for each read*/
const char* path /* [IN]  File name to be opened */
) {
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]

	/* Opens an existing file for read. */
	fresult = f_open(fp, path, FA_READ);
 800163c:	2201      	movs	r2, #1
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f005 fbc1 	bl	8006dc8 <f_open>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	4b12      	ldr	r3, [pc, #72]	; (8001694 <open_append_read+0x64>)
 800164c:	701a      	strb	r2, [r3, #0]
	if (fresult == 0) {
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <open_append_read+0x64>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d117      	bne.n	8001686 <open_append_read+0x56>
		/* Seek to end of the file to append data */
		if(read_point<f_size(&fil))
 8001656:	4b10      	ldr	r3, [pc, #64]	; (8001698 <open_append_read+0x68>)
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	68ba      	ldr	r2, [r7, #8]
 800165c:	429a      	cmp	r2, r3
 800165e:	d208      	bcs.n	8001672 <open_append_read+0x42>
		{
			fresult = f_lseek(fp, read_point);
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f006 f917 	bl	8007896 <f_lseek>
 8001668:	4603      	mov	r3, r0
 800166a:	461a      	mov	r2, r3
 800166c:	4b09      	ldr	r3, [pc, #36]	; (8001694 <open_append_read+0x64>)
 800166e:	701a      	strb	r2, [r3, #0]
 8001670:	e002      	b.n	8001678 <open_append_read+0x48>
		}
		else
		{
			fresult=1;
 8001672:	4b08      	ldr	r3, [pc, #32]	; (8001694 <open_append_read+0x64>)
 8001674:	2201      	movs	r2, #1
 8001676:	701a      	strb	r2, [r3, #0]
		}
		if (fresult != 0)
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <open_append_read+0x64>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d002      	beq.n	8001686 <open_append_read+0x56>
			f_close(fp);
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f006 f8de 	bl	8007842 <f_close>
	}
	return fresult;
 8001686:	4b03      	ldr	r3, [pc, #12]	; (8001694 <open_append_read+0x64>)
 8001688:	781b      	ldrb	r3, [r3, #0]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2001c6ac 	.word	0x2001c6ac
 8001698:	2001c6f8 	.word	0x2001c6f8

0800169c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b08a      	sub	sp, #40	; 0x28
 80016a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016a2:	f000 fdfd 	bl	80022a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016a6:	f000 fa6d 	bl	8001b84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016aa:	f000 fb81 	bl	8001db0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80016ae:	f000 fb55 	bl	8001d5c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80016b2:	f000 facf 	bl	8001c54 <MX_SPI2_Init>
  MX_FATFS_Init();
 80016b6:	f003 f8e5 	bl	8004884 <MX_FATFS_Init>
  MX_TIM3_Init();
 80016ba:	f000 fb01 	bl	8001cc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  /* Mount SD card*/
    fresult = f_mount(&fs, "/", 1);
 80016be:	2201      	movs	r2, #1
 80016c0:	4995      	ldr	r1, [pc, #596]	; (8001918 <main+0x27c>)
 80016c2:	4896      	ldr	r0, [pc, #600]	; (800191c <main+0x280>)
 80016c4:	f005 fb3a 	bl	8006d3c <f_mount>
 80016c8:	4603      	mov	r3, r0
 80016ca:	461a      	mov	r2, r3
 80016cc:	4b94      	ldr	r3, [pc, #592]	; (8001920 <main+0x284>)
 80016ce:	701a      	strb	r2, [r3, #0]
    if (fresult != FR_OK) send_uart ("ERROR!!! in mounting SD CARD...\n\n");
 80016d0:	4b93      	ldr	r3, [pc, #588]	; (8001920 <main+0x284>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <main+0x44>
 80016d8:	4892      	ldr	r0, [pc, #584]	; (8001924 <main+0x288>)
 80016da:	f7ff ff35 	bl	8001548 <send_uart>
 80016de:	e002      	b.n	80016e6 <main+0x4a>
    else send_uart("SD CARD mounted successfully...\n\n");
 80016e0:	4891      	ldr	r0, [pc, #580]	; (8001928 <main+0x28c>)
 80016e2:	f7ff ff31 	bl	8001548 <send_uart>

	/* Check free space */
	f_getfree("", &fre_clust, &pfs);
 80016e6:	4a91      	ldr	r2, [pc, #580]	; (800192c <main+0x290>)
 80016e8:	4991      	ldr	r1, [pc, #580]	; (8001930 <main+0x294>)
 80016ea:	4892      	ldr	r0, [pc, #584]	; (8001934 <main+0x298>)
 80016ec:	f006 faf7 	bl	8007cde <f_getfree>

	total = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80016f0:	4b8e      	ldr	r3, [pc, #568]	; (800192c <main+0x290>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	3b02      	subs	r3, #2
 80016f8:	4a8c      	ldr	r2, [pc, #560]	; (800192c <main+0x290>)
 80016fa:	6812      	ldr	r2, [r2, #0]
 80016fc:	8952      	ldrh	r2, [r2, #10]
 80016fe:	fb02 f303 	mul.w	r3, r2, r3
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f830 	bl	8000768 <__aeabi_ui2d>
 8001708:	f04f 0200 	mov.w	r2, #0
 800170c:	4b8a      	ldr	r3, [pc, #552]	; (8001938 <main+0x29c>)
 800170e:	f7fe fdbf 	bl	8000290 <__aeabi_dmul>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4610      	mov	r0, r2
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff f89f 	bl	800085c <__aeabi_d2uiz>
 800171e:	4603      	mov	r3, r0
 8001720:	4a86      	ldr	r2, [pc, #536]	; (800193c <main+0x2a0>)
 8001722:	6013      	str	r3, [r2, #0]
	sprintf (buffer_uart, "SD card total size:\t%lu\n", total);
 8001724:	4b85      	ldr	r3, [pc, #532]	; (800193c <main+0x2a0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	461a      	mov	r2, r3
 800172a:	4985      	ldr	r1, [pc, #532]	; (8001940 <main+0x2a4>)
 800172c:	4885      	ldr	r0, [pc, #532]	; (8001944 <main+0x2a8>)
 800172e:	f006 fcdf 	bl	80080f0 <siprintf>
	send_uart(buffer_uart);
 8001732:	4884      	ldr	r0, [pc, #528]	; (8001944 <main+0x2a8>)
 8001734:	f7ff ff08 	bl	8001548 <send_uart>
	bufclear(buffer_uart);
 8001738:	4882      	ldr	r0, [pc, #520]	; (8001944 <main+0x2a8>)
 800173a:	f7ff ff34 	bl	80015a6 <bufclear>


	free_space = (uint32_t)(fre_clust * pfs->csize * 0.5);
 800173e:	4b7b      	ldr	r3, [pc, #492]	; (800192c <main+0x290>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	895b      	ldrh	r3, [r3, #10]
 8001744:	461a      	mov	r2, r3
 8001746:	4b7a      	ldr	r3, [pc, #488]	; (8001930 <main+0x294>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	fb03 f302 	mul.w	r3, r3, r2
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f80a 	bl	8000768 <__aeabi_ui2d>
 8001754:	f04f 0200 	mov.w	r2, #0
 8001758:	4b77      	ldr	r3, [pc, #476]	; (8001938 <main+0x29c>)
 800175a:	f7fe fd99 	bl	8000290 <__aeabi_dmul>
 800175e:	4602      	mov	r2, r0
 8001760:	460b      	mov	r3, r1
 8001762:	4610      	mov	r0, r2
 8001764:	4619      	mov	r1, r3
 8001766:	f7ff f879 	bl	800085c <__aeabi_d2uiz>
 800176a:	4603      	mov	r3, r0
 800176c:	4a76      	ldr	r2, [pc, #472]	; (8001948 <main+0x2ac>)
 800176e:	6013      	str	r3, [r2, #0]
	sprintf (buffer_uart, "SD card free space:\t%lu\n", free_space);
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <main+0x2ac>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	461a      	mov	r2, r3
 8001776:	4975      	ldr	r1, [pc, #468]	; (800194c <main+0x2b0>)
 8001778:	4872      	ldr	r0, [pc, #456]	; (8001944 <main+0x2a8>)
 800177a:	f006 fcb9 	bl	80080f0 <siprintf>
	send_uart(buffer_uart);
 800177e:	4871      	ldr	r0, [pc, #452]	; (8001944 <main+0x2a8>)
 8001780:	f7ff fee2 	bl	8001548 <send_uart>
	bufclear(buffer_uart);
 8001784:	486f      	ldr	r0, [pc, #444]	; (8001944 <main+0x2a8>)
 8001786:	f7ff ff0e 	bl	80015a6 <bufclear>

	read_int_total=0;
 800178a:	4b71      	ldr	r3, [pc, #452]	; (8001950 <main+0x2b4>)
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
	Timer_flag=1;
 8001790:	4b70      	ldr	r3, [pc, #448]	; (8001954 <main+0x2b8>)
 8001792:	2201      	movs	r2, #1
 8001794:	601a      	str	r2, [r3, #0]
  while (1)
  {

	  //test sd read

	  if (Timer_flag)
 8001796:	4b6f      	ldr	r3, [pc, #444]	; (8001954 <main+0x2b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d0fb      	beq.n	8001796 <main+0xfa>
	  {
		   Timer_flag=0;
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <main+0x2b8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
		 // fresult=f_open(&fil, "data_8k.txt", FA_READ);
		  fresult= open_append_read(&fil,read_point,"data_8k.txt");
 80017a4:	4b6c      	ldr	r3, [pc, #432]	; (8001958 <main+0x2bc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a6c      	ldr	r2, [pc, #432]	; (800195c <main+0x2c0>)
 80017aa:	4619      	mov	r1, r3
 80017ac:	486c      	ldr	r0, [pc, #432]	; (8001960 <main+0x2c4>)
 80017ae:	f7ff ff3f 	bl	8001630 <open_append_read>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	4b5a      	ldr	r3, [pc, #360]	; (8001920 <main+0x284>)
 80017b8:	701a      	strb	r2, [r3, #0]
		  if(fresult == FR_OK)
 80017ba:	4b59      	ldr	r3, [pc, #356]	; (8001920 <main+0x284>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f040 80a0 	bne.w	8001904 <main+0x268>
		  {
			  int i = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
			  f_read(&fil, rd_buffer, read_char_size,&br);
 80017c8:	4b66      	ldr	r3, [pc, #408]	; (8001964 <main+0x2c8>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b66      	ldr	r3, [pc, #408]	; (8001968 <main+0x2cc>)
 80017ce:	4967      	ldr	r1, [pc, #412]	; (800196c <main+0x2d0>)
 80017d0:	4863      	ldr	r0, [pc, #396]	; (8001960 <main+0x2c4>)
 80017d2:	f005 fcc5 	bl	8007160 <f_read>


			  for (i = 0; i < br; i++)
 80017d6:	2300      	movs	r3, #0
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
 80017da:	e00d      	b.n	80017f8 <main+0x15c>
			  {
			      if (rd_buffer[i] == '\n')
 80017dc:	4a63      	ldr	r2, [pc, #396]	; (800196c <main+0x2d0>)
 80017de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e0:	4413      	add	r3, r2
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b0a      	cmp	r3, #10
 80017e6:	d104      	bne.n	80017f2 <main+0x156>
			    	  rd_buffer[i] = ',';
 80017e8:	4a60      	ldr	r2, [pc, #384]	; (800196c <main+0x2d0>)
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	4413      	add	r3, r2
 80017ee:	222c      	movs	r2, #44	; 0x2c
 80017f0:	701a      	strb	r2, [r3, #0]
			  for (i = 0; i < br; i++)
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	3301      	adds	r3, #1
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
 80017f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fa:	4b5b      	ldr	r3, [pc, #364]	; (8001968 <main+0x2cc>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d3ec      	bcc.n	80017dc <main+0x140>
			  }
              if ((rd_buffer[i-1]!='\r') && (rd_buffer[i-1]!=',' )) //If a integer has not completely been read
 8001802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001804:	3b01      	subs	r3, #1
 8001806:	4a59      	ldr	r2, [pc, #356]	; (800196c <main+0x2d0>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	2b0d      	cmp	r3, #13
 800180c:	d042      	beq.n	8001894 <main+0x1f8>
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3b01      	subs	r3, #1
 8001812:	4a56      	ldr	r2, [pc, #344]	; (800196c <main+0x2d0>)
 8001814:	5cd3      	ldrb	r3, [r2, r3]
 8001816:	2b2c      	cmp	r3, #44	; 0x2c
 8001818:	d03c      	beq.n	8001894 <main+0x1f8>
              {
            	  int i_pad=0;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
            	  f_read(&fil, &(rd_buffer[i]), 10,&br);
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	4a52      	ldr	r2, [pc, #328]	; (800196c <main+0x2d0>)
 8001822:	1899      	adds	r1, r3, r2
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <main+0x2cc>)
 8001826:	220a      	movs	r2, #10
 8001828:	484d      	ldr	r0, [pc, #308]	; (8001960 <main+0x2c4>)
 800182a:	f005 fc99 	bl	8007160 <f_read>
              	  for (i_pad=i;i_pad < read_char_size+br; i_pad++)
 800182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001830:	623b      	str	r3, [r7, #32]
 8001832:	e022      	b.n	800187a <main+0x1de>
             	 {
					  if (rd_buffer[i_pad] == '\n')
 8001834:	4a4d      	ldr	r2, [pc, #308]	; (800196c <main+0x2d0>)
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	4413      	add	r3, r2
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b0a      	cmp	r3, #10
 800183e:	d119      	bne.n	8001874 <main+0x1d8>
					  {
						  rd_buffer[i_pad] = ',';
 8001840:	4a4a      	ldr	r2, [pc, #296]	; (800196c <main+0x2d0>)
 8001842:	6a3b      	ldr	r3, [r7, #32]
 8001844:	4413      	add	r3, r2
 8001846:	222c      	movs	r2, #44	; 0x2c
 8001848:	701a      	strb	r2, [r3, #0]
						  for(int i_clear=i_pad+1;i_clear < read_char_size+br;i_clear++)
 800184a:	6a3b      	ldr	r3, [r7, #32]
 800184c:	3301      	adds	r3, #1
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e007      	b.n	8001862 <main+0x1c6>
							{
							  rd_buffer[i_clear] = ',';
 8001852:	4a46      	ldr	r2, [pc, #280]	; (800196c <main+0x2d0>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	4413      	add	r3, r2
 8001858:	222c      	movs	r2, #44	; 0x2c
 800185a:	701a      	strb	r2, [r3, #0]
						  for(int i_clear=i_pad+1;i_clear < read_char_size+br;i_clear++)
 800185c:	69fb      	ldr	r3, [r7, #28]
 800185e:	3301      	adds	r3, #1
 8001860:	61fb      	str	r3, [r7, #28]
 8001862:	4b40      	ldr	r3, [pc, #256]	; (8001964 <main+0x2c8>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b40      	ldr	r3, [pc, #256]	; (8001968 <main+0x2cc>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	441a      	add	r2, r3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	429a      	cmp	r2, r3
 8001870:	d8ef      	bhi.n	8001852 <main+0x1b6>
							}
						  break;
 8001872:	e00a      	b.n	800188a <main+0x1ee>
              	  for (i_pad=i;i_pad < read_char_size+br; i_pad++)
 8001874:	6a3b      	ldr	r3, [r7, #32]
 8001876:	3301      	adds	r3, #1
 8001878:	623b      	str	r3, [r7, #32]
 800187a:	4b3a      	ldr	r3, [pc, #232]	; (8001964 <main+0x2c8>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	4b3a      	ldr	r3, [pc, #232]	; (8001968 <main+0x2cc>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	441a      	add	r2, r3
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	429a      	cmp	r2, r3
 8001888:	d8d4      	bhi.n	8001834 <main+0x198>
					  }

             	 }
              	  br=i_pad-1;  //update br after padding
 800188a:	6a3b      	ldr	r3, [r7, #32]
 800188c:	3b01      	subs	r3, #1
 800188e:	461a      	mov	r2, r3
 8001890:	4b35      	ldr	r3, [pc, #212]	; (8001968 <main+0x2cc>)
 8001892:	601a      	str	r2, [r3, #0]
              }

			  char* tok = rd_buffer ;
 8001894:	4b35      	ldr	r3, [pc, #212]	; (800196c <main+0x2d0>)
 8001896:	61bb      	str	r3, [r7, #24]

				  do
				  {
					  if (*tok == ',')
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b2c      	cmp	r3, #44	; 0x2c
 800189e:	d10a      	bne.n	80018b6 <main+0x21a>
					  {
						  tok = strchr( tok, ',' ) + 1 ;
 80018a0:	212c      	movs	r1, #44	; 0x2c
 80018a2:	69b8      	ldr	r0, [r7, #24]
 80018a4:	f006 fc72 	bl	800818c <strchr>
 80018a8:	4603      	mov	r3, r0
 80018aa:	3301      	adds	r3, #1
 80018ac:	61bb      	str	r3, [r7, #24]
						  converted=0;
 80018ae:	4b30      	ldr	r3, [pc, #192]	; (8001970 <main+0x2d4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	e018      	b.n	80018e8 <main+0x24c>
					  }
					  else
					  {
					  converted = sscanf( tok, "%d", &rd_buffer_int[i_int] ) ;
 80018b6:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <main+0x2d8>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4a2e      	ldr	r2, [pc, #184]	; (8001978 <main+0x2dc>)
 80018be:	4413      	add	r3, r2
 80018c0:	461a      	mov	r2, r3
 80018c2:	492e      	ldr	r1, [pc, #184]	; (800197c <main+0x2e0>)
 80018c4:	69b8      	ldr	r0, [r7, #24]
 80018c6:	f006 fc33 	bl	8008130 <siscanf>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a28      	ldr	r2, [pc, #160]	; (8001970 <main+0x2d4>)
 80018ce:	6013      	str	r3, [r2, #0]
					  i_int++;
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <main+0x2d8>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3301      	adds	r3, #1
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <main+0x2d8>)
 80018d8:	6013      	str	r3, [r2, #0]
					  tok = strchr( tok, ',' ) + 1 ;
 80018da:	212c      	movs	r1, #44	; 0x2c
 80018dc:	69b8      	ldr	r0, [r7, #24]
 80018de:	f006 fc55 	bl	800818c <strchr>
 80018e2:	4603      	mov	r3, r0
 80018e4:	3301      	adds	r3, #1
 80018e6:	61bb      	str	r3, [r7, #24]
					  }

				  } while( tok != NULL  && converted != -1);
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d004      	beq.n	80018f8 <main+0x25c>
 80018ee:	4b20      	ldr	r3, [pc, #128]	; (8001970 <main+0x2d4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018f6:	d1cf      	bne.n	8001898 <main+0x1fc>


		   f_close(&fil);
 80018f8:	4819      	ldr	r0, [pc, #100]	; (8001960 <main+0x2c4>)
 80018fa:	f005 ffa2 	bl	8007842 <f_close>
//		  			   }
//		   	   	   read_int_total=read_int_total+act_int_num[i_sd_read];
//		   		  i_sd_read++;
/////////////////////////////////////////////////////////////////////////////////////////////////////

		   bufclear(rd_buffer);
 80018fe:	481b      	ldr	r0, [pc, #108]	; (800196c <main+0x2d0>)
 8001900:	f7ff fe51 	bl	80015a6 <bufclear>

	  }
		 // else
		  //{
			  		//HAL_TIM_Base_Stop_IT(&htim3);
			  send_uart("SD CARD has been read successfully.\n The first 8k data in rd_buffer_int can be used for processing\n");
 8001904:	481e      	ldr	r0, [pc, #120]	; (8001980 <main+0x2e4>)
 8001906:	f7ff fe1f 	bl	8001548 <send_uart>
			  HAL_Delay(100);
 800190a:	2064      	movs	r0, #100	; 0x64
 800190c:	f000 fd3a 	bl	8002384 <HAL_Delay>
		  //}

			  //test sd write
              int buffer_data[5];
		  	  for (int i=0; i<7500; i++){
 8001910:	2300      	movs	r3, #0
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e0f9      	b.n	8001b0a <main+0x46e>
 8001916:	bf00      	nop
 8001918:	08009304 	.word	0x08009304
 800191c:	20000478 	.word	0x20000478
 8001920:	2001c6ac 	.word	0x2001c6ac
 8001924:	08009308 	.word	0x08009308
 8001928:	0800932c 	.word	0x0800932c
 800192c:	2001c6a8 	.word	0x2001c6a8
 8001930:	20000304 	.word	0x20000304
 8001934:	08009350 	.word	0x08009350
 8001938:	3fe00000 	.word	0x3fe00000
 800193c:	2001c6f4 	.word	0x2001c6f4
 8001940:	08009354 	.word	0x08009354
 8001944:	20010730 	.word	0x20010730
 8001948:	200014fc 	.word	0x200014fc
 800194c:	08009370 	.word	0x08009370
 8001950:	200000bc 	.word	0x200000bc
 8001954:	200000ac 	.word	0x200000ac
 8001958:	200000b8 	.word	0x200000b8
 800195c:	0800938c 	.word	0x0800938c
 8001960:	2001c6f8 	.word	0x2001c6f8
 8001964:	20000004 	.word	0x20000004
 8001968:	200014b0 	.word	0x200014b0
 800196c:	20010794 	.word	0x20010794
 8001970:	200000b4 	.word	0x200000b4
 8001974:	200000b0 	.word	0x200000b0
 8001978:	20001500 	.word	0x20001500
 800197c:	08009398 	.word	0x08009398
 8001980:	0800939c 	.word	0x0800939c




		  		  buffer_data[0]=abs(rd_buffer_int[i])/1000; // get the thousandth value
 8001984:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <main+0x4c0>)
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800198c:	2b00      	cmp	r3, #0
 800198e:	bfb8      	it	lt
 8001990:	425b      	neglt	r3, r3
 8001992:	b29b      	uxth	r3, r3
 8001994:	4a72      	ldr	r2, [pc, #456]	; (8001b60 <main+0x4c4>)
 8001996:	fb82 1203 	smull	r1, r2, r2, r3
 800199a:	1192      	asrs	r2, r2, #6
 800199c:	17db      	asrs	r3, r3, #31
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	603b      	str	r3, [r7, #0]
		  		  buffer_data[1]=(abs(rd_buffer_int[i])-1000*buffer_data[0])/100; // get the hundredth value
 80019a2:	4a6e      	ldr	r2, [pc, #440]	; (8001b5c <main+0x4c0>)
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	bfb8      	it	lt
 80019ae:	425b      	neglt	r3, r3
 80019b0:	b29b      	uxth	r3, r3
 80019b2:	4619      	mov	r1, r3
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	4a6b      	ldr	r2, [pc, #428]	; (8001b64 <main+0x4c8>)
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	440b      	add	r3, r1
 80019be:	4a6a      	ldr	r2, [pc, #424]	; (8001b68 <main+0x4cc>)
 80019c0:	fb82 1203 	smull	r1, r2, r2, r3
 80019c4:	1152      	asrs	r2, r2, #5
 80019c6:	17db      	asrs	r3, r3, #31
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	607b      	str	r3, [r7, #4]
		  		  buffer_data[2]=(abs(rd_buffer_int[i])-1000*buffer_data[0]-100*buffer_data[1])/10; // get the tenth value
 80019cc:	4a63      	ldr	r2, [pc, #396]	; (8001b5c <main+0x4c0>)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	bfb8      	it	lt
 80019d8:	425b      	neglt	r3, r3
 80019da:	b29b      	uxth	r3, r3
 80019dc:	4619      	mov	r1, r3
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	4a60      	ldr	r2, [pc, #384]	; (8001b64 <main+0x4c8>)
 80019e2:	fb02 f303 	mul.w	r3, r2, r3
 80019e6:	18ca      	adds	r2, r1, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f06f 0163 	mvn.w	r1, #99	; 0x63
 80019ee:	fb01 f303 	mul.w	r3, r1, r3
 80019f2:	4413      	add	r3, r2
 80019f4:	4a5d      	ldr	r2, [pc, #372]	; (8001b6c <main+0x4d0>)
 80019f6:	fb82 1203 	smull	r1, r2, r2, r3
 80019fa:	1092      	asrs	r2, r2, #2
 80019fc:	17db      	asrs	r3, r3, #31
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	60bb      	str	r3, [r7, #8]
		  		  buffer_data[3]=(abs(rd_buffer_int[i])-1000*buffer_data[0]-100*buffer_data[1]-10*buffer_data[2]); // get the oneth value
 8001a02:	4a56      	ldr	r2, [pc, #344]	; (8001b5c <main+0x4c0>)
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bfb8      	it	lt
 8001a0e:	425b      	neglt	r3, r3
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4619      	mov	r1, r3
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	4a53      	ldr	r2, [pc, #332]	; (8001b64 <main+0x4c8>)
 8001a18:	fb02 f303 	mul.w	r3, r2, r3
 8001a1c:	18ca      	adds	r2, r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f06f 0163 	mvn.w	r1, #99	; 0x63
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	441a      	add	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f06f 0109 	mvn.w	r1, #9
 8001a30:	fb01 f303 	mul.w	r3, r1, r3
 8001a34:	4413      	add	r3, r2
 8001a36:	60fb      	str	r3, [r7, #12]


		  		 if(rd_buffer_int[i]<0)
 8001a38:	4a48      	ldr	r2, [pc, #288]	; (8001b5c <main+0x4c0>)
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	da09      	bge.n	8001a58 <main+0x3bc>

				 {
		  			buffer[6*i]='-';
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	461a      	mov	r2, r3
 8001a50:	4b47      	ldr	r3, [pc, #284]	; (8001b70 <main+0x4d4>)
 8001a52:	212d      	movs	r1, #45	; 0x2d
 8001a54:	5499      	strb	r1, [r3, r2]
 8001a56:	e008      	b.n	8001a6a <main+0x3ce>
				 }
				 else
				 {
					 buffer[6*i]='0';
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	461a      	mov	r2, r3
 8001a64:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <main+0x4d4>)
 8001a66:	2130      	movs	r1, #48	; 0x30
 8001a68:	5499      	strb	r1, [r3, r2]
				 }

		  		buffer[6*i]= buffer[6*i]; // according to ASCII code, decode to the corresponding displayable  number
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4613      	mov	r3, r2
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	4413      	add	r3, r2
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	4619      	mov	r1, r3
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4613      	mov	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	005b      	lsls	r3, r3, #1
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <main+0x4d4>)
 8001a84:	5c59      	ldrb	r1, [r3, r1]
 8001a86:	4b3a      	ldr	r3, [pc, #232]	; (8001b70 <main+0x4d4>)
 8001a88:	5499      	strb	r1, [r3, r2]
		  		buffer[6*i+1]= (buffer_data[0])+0x30;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	b2d9      	uxtb	r1, r3
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	3301      	adds	r3, #1
 8001a9a:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001a9e:	b2d1      	uxtb	r1, r2
 8001aa0:	4a33      	ldr	r2, [pc, #204]	; (8001b70 <main+0x4d4>)
 8001aa2:	54d1      	strb	r1, [r2, r3]
		  		buffer[6*i+2]= buffer_data[1]+0x30;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	b2d9      	uxtb	r1, r3
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	3302      	adds	r3, #2
 8001ab4:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001ab8:	b2d1      	uxtb	r1, r2
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <main+0x4d4>)
 8001abc:	54d1      	strb	r1, [r2, r3]
		  		buffer[6*i+3]= buffer_data[2]+0x30;
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	b2d9      	uxtb	r1, r3
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	4413      	add	r3, r2
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	3303      	adds	r3, #3
 8001ace:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001ad2:	b2d1      	uxtb	r1, r2
 8001ad4:	4a26      	ldr	r2, [pc, #152]	; (8001b70 <main+0x4d4>)
 8001ad6:	54d1      	strb	r1, [r2, r3]
		  		buffer[6*i+4]= buffer_data[3]+0x30;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	b2d9      	uxtb	r1, r3
 8001adc:	697a      	ldr	r2, [r7, #20]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	f101 0230 	add.w	r2, r1, #48	; 0x30
 8001aec:	b2d1      	uxtb	r1, r2
 8001aee:	4a20      	ldr	r2, [pc, #128]	; (8001b70 <main+0x4d4>)
 8001af0:	54d1      	strb	r1, [r2, r3]
		  		buffer[6*i+5]=0x0a; //change line
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	4613      	mov	r3, r2
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	4413      	add	r3, r2
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	3305      	adds	r3, #5
 8001afe:	4a1c      	ldr	r2, [pc, #112]	; (8001b70 <main+0x4d4>)
 8001b00:	210a      	movs	r1, #10
 8001b02:	54d1      	strb	r1, [r2, r3]
		  	  for (int i=0; i<7500; i++){
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3301      	adds	r3, #1
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f641 524b 	movw	r2, #7499	; 0x1d4b
 8001b10:	4293      	cmp	r3, r2
 8001b12:	f77f af37 	ble.w	8001984 <main+0x2e8>

		  	  }

		  	  // save the whole buffer to SD card
		  	 fresult= open_append(&fil,"SDcard_save.txt");
 8001b16:	4917      	ldr	r1, [pc, #92]	; (8001b74 <main+0x4d8>)
 8001b18:	4817      	ldr	r0, [pc, #92]	; (8001b78 <main+0x4dc>)
 8001b1a:	f7ff fd5d 	bl	80015d8 <open_append>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	461a      	mov	r2, r3
 8001b22:	4b16      	ldr	r3, [pc, #88]	; (8001b7c <main+0x4e0>)
 8001b24:	701a      	strb	r2, [r3, #0]
		  				 if(fresult == FR_OK)
 8001b26:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <main+0x4e0>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f47f ae33 	bne.w	8001796 <main+0xfa>
		  				 {
		  					 fresult = f_write(&fil,buffer, bufsize(buffer),&bw);
 8001b30:	480f      	ldr	r0, [pc, #60]	; (8001b70 <main+0x4d4>)
 8001b32:	f7ff fd21 	bl	8001578 <bufsize>
 8001b36:	4603      	mov	r3, r0
 8001b38:	461a      	mov	r2, r3
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <main+0x4e4>)
 8001b3c:	490c      	ldr	r1, [pc, #48]	; (8001b70 <main+0x4d4>)
 8001b3e:	480e      	ldr	r0, [pc, #56]	; (8001b78 <main+0x4dc>)
 8001b40:	f005 fc6d 	bl	800741e <f_write>
 8001b44:	4603      	mov	r3, r0
 8001b46:	461a      	mov	r2, r3
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <main+0x4e0>)
 8001b4a:	701a      	strb	r2, [r3, #0]
		  					 fresult = f_close(&fil);
 8001b4c:	480a      	ldr	r0, [pc, #40]	; (8001b78 <main+0x4dc>)
 8001b4e:	f005 fe78 	bl	8007842 <f_close>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <main+0x4e0>)
 8001b58:	701a      	strb	r2, [r3, #0]
	  if (Timer_flag)
 8001b5a:	e61c      	b.n	8001796 <main+0xfa>
 8001b5c:	20001500 	.word	0x20001500
 8001b60:	10624dd3 	.word	0x10624dd3
 8001b64:	fffffc18 	.word	0xfffffc18
 8001b68:	51eb851f 	.word	0x51eb851f
 8001b6c:	66666667 	.word	0x66666667
 8001b70:	20005768 	.word	0x20005768
 8001b74:	08009400 	.word	0x08009400
 8001b78:	2001c6f8 	.word	0x2001c6f8
 8001b7c:	2001c6ac 	.word	0x2001c6ac
 8001b80:	2001c6a4 	.word	0x2001c6a4

08001b84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b094      	sub	sp, #80	; 0x50
 8001b88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b8a:	f107 0320 	add.w	r3, r7, #32
 8001b8e:	2230      	movs	r2, #48	; 0x30
 8001b90:	2100      	movs	r1, #0
 8001b92:	4618      	mov	r0, r3
 8001b94:	f006 faa4 	bl	80080e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b98:	f107 030c 	add.w	r3, r7, #12
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	605a      	str	r2, [r3, #4]
 8001ba2:	609a      	str	r2, [r3, #8]
 8001ba4:	60da      	str	r2, [r3, #12]
 8001ba6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb6:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <SystemClock_Config+0xc8>)
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	4b21      	ldr	r3, [pc, #132]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a20      	ldr	r2, [pc, #128]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <SystemClock_Config+0xcc>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be0:	2302      	movs	r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be8:	2310      	movs	r3, #16
 8001bea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bec:	2302      	movs	r3, #2
 8001bee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001bf8:	2354      	movs	r3, #84	; 0x54
 8001bfa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001c00:	2304      	movs	r3, #4
 8001c02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c04:	f107 0320 	add.w	r3, r7, #32
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f000 fe8f 	bl	800292c <HAL_RCC_OscConfig>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c14:	f000 f960 	bl	8001ed8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c18:	230f      	movs	r3, #15
 8001c1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2102      	movs	r1, #2
 8001c34:	4618      	mov	r0, r3
 8001c36:	f001 f8f1 	bl	8002e1c <HAL_RCC_ClockConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c40:	f000 f94a 	bl	8001ed8 <Error_Handler>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3750      	adds	r7, #80	; 0x50
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001c58:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c5a:	4a18      	ldr	r2, [pc, #96]	; (8001cbc <MX_SPI2_Init+0x68>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c66:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c72:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c78:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c84:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c86:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001ca0:	220a      	movs	r2, #10
 8001ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_SPI2_Init+0x64>)
 8001ca6:	f001 fab5 	bl	8003214 <HAL_SPI_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cb0:	f000 f912 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000308 	.word	0x20000308
 8001cbc:	40003800 	.word	0x40003800

08001cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc6:	f107 0308 	add.w	r3, r7, #8
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
 8001cce:	605a      	str	r2, [r3, #4]
 8001cd0:	609a      	str	r2, [r3, #8]
 8001cd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd4:	463b      	mov	r3, r7
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001cde:	4a1e      	ldr	r2, [pc, #120]	; (8001d58 <MX_TIM3_Init+0x98>)
 8001ce0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41999;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001ce4:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001ce8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001cf2:	2263      	movs	r2, #99	; 0x63
 8001cf4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf6:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfc:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001d04:	f001 fec6 	bl	8003a94 <HAL_TIM_Base_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d0e:	f000 f8e3 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d16:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d18:	f107 0308 	add.w	r3, r7, #8
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	480d      	ldr	r0, [pc, #52]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001d20:	f002 f80f 	bl	8003d42 <HAL_TIM_ConfigClockSource>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d2a:	f000 f8d5 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d36:	463b      	mov	r3, r7
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4806      	ldr	r0, [pc, #24]	; (8001d54 <MX_TIM3_Init+0x94>)
 8001d3c:	f002 fa0a 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d46:	f000 f8c7 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d4a:	bf00      	nop
 8001d4c:	3718      	adds	r7, #24
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200014b4 	.word	0x200014b4
 8001d58:	40000400 	.word	0x40000400

08001d5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d60:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d62:	4a12      	ldr	r2, [pc, #72]	; (8001dac <MX_USART2_UART_Init+0x50>)
 8001d64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d80:	4b09      	ldr	r3, [pc, #36]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d82:	220c      	movs	r2, #12
 8001d84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d8c:	4b06      	ldr	r3, [pc, #24]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d92:	4805      	ldr	r0, [pc, #20]	; (8001da8 <MX_USART2_UART_Init+0x4c>)
 8001d94:	f002 fa60 	bl	8004258 <HAL_UART_Init>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d001      	beq.n	8001da2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d9e:	f000 f89b 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	2001c6b0 	.word	0x2001c6b0
 8001dac:	40004400 	.word	0x40004400

08001db0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db6:	f107 0314 	add.w	r3, r7, #20
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	4b37      	ldr	r3, [pc, #220]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a36      	ldr	r2, [pc, #216]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b34      	ldr	r3, [pc, #208]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	613b      	str	r3, [r7, #16]
 8001de0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a2f      	ldr	r2, [pc, #188]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001dec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b2d      	ldr	r3, [pc, #180]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
 8001e02:	4b29      	ldr	r3, [pc, #164]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a28      	ldr	r2, [pc, #160]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e08:	f043 0301 	orr.w	r3, r3, #1
 8001e0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e0e:	4b26      	ldr	r3, [pc, #152]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	60bb      	str	r3, [r7, #8]
 8001e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b22      	ldr	r3, [pc, #136]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a21      	ldr	r2, [pc, #132]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e24:	f043 0302 	orr.w	r3, r3, #2
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ea8 <MX_GPIO_Init+0xf8>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e36:	2200      	movs	r2, #0
 8001e38:	2120      	movs	r1, #32
 8001e3a:	481c      	ldr	r0, [pc, #112]	; (8001eac <MX_GPIO_Init+0xfc>)
 8001e3c:	f000 fd5c 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_RESET);
 8001e40:	2200      	movs	r2, #0
 8001e42:	2101      	movs	r1, #1
 8001e44:	481a      	ldr	r0, [pc, #104]	; (8001eb0 <MX_GPIO_Init+0x100>)
 8001e46:	f000 fd57 	bl	80028f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e5a:	f107 0314 	add.w	r3, r7, #20
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <MX_GPIO_Init+0x104>)
 8001e62:	f000 fbc5 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001e66:	2320      	movs	r3, #32
 8001e68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e72:	2300      	movs	r3, #0
 8001e74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001e76:	f107 0314 	add.w	r3, r7, #20
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	480b      	ldr	r0, [pc, #44]	; (8001eac <MX_GPIO_Init+0xfc>)
 8001e7e:	f000 fbb7 	bl	80025f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8001e82:	2301      	movs	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e86:	2301      	movs	r3, #1
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <MX_GPIO_Init+0x100>)
 8001e9a:	f000 fba9 	bl	80025f0 <HAL_GPIO_Init>

}
 8001e9e:	bf00      	nop
 8001ea0:	3728      	adds	r7, #40	; 0x28
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800

08001eb8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
	Timer_flag=1;
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	200000ac 	.word	0x200000ac

08001ed8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <Error_Handler+0x8>
	...

08001ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	; (8001f30 <HAL_MspInit+0x4c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	; 0x44
 8001efa:	4b0d      	ldr	r3, [pc, #52]	; (8001f30 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0e:	4a08      	ldr	r2, [pc, #32]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	; 0x40
 8001f16:	4b06      	ldr	r3, [pc, #24]	; (8001f30 <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f22:	2007      	movs	r0, #7
 8001f24:	f000 fb22 	bl	800256c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f28:	bf00      	nop
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40023800 	.word	0x40023800

08001f34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b08a      	sub	sp, #40	; 0x28
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3c:	f107 0314 	add.w	r3, r7, #20
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
 8001f44:	605a      	str	r2, [r3, #4]
 8001f46:	609a      	str	r2, [r3, #8]
 8001f48:	60da      	str	r2, [r3, #12]
 8001f4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a28      	ldr	r2, [pc, #160]	; (8001ff4 <HAL_SPI_MspInit+0xc0>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d14a      	bne.n	8001fec <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	4b27      	ldr	r3, [pc, #156]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	4a26      	ldr	r2, [pc, #152]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f64:	6413      	str	r3, [r2, #64]	; 0x40
 8001f66:	4b24      	ldr	r3, [pc, #144]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	4b20      	ldr	r3, [pc, #128]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a1f      	ldr	r2, [pc, #124]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b1d      	ldr	r3, [pc, #116]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0304 	and.w	r3, r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f8e:	2300      	movs	r3, #0
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	4b19      	ldr	r3, [pc, #100]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	4a18      	ldr	r2, [pc, #96]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001f98:	f043 0302 	orr.w	r3, r3, #2
 8001f9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f9e:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_SPI_MspInit+0xc4>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001faa:	230c      	movs	r3, #12
 8001fac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fae:	2302      	movs	r3, #2
 8001fb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fba:	2305      	movs	r3, #5
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fbe:	f107 0314 	add.w	r3, r7, #20
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	480d      	ldr	r0, [pc, #52]	; (8001ffc <HAL_SPI_MspInit+0xc8>)
 8001fc6:	f000 fb13 	bl	80025f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fdc:	2305      	movs	r3, #5
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4806      	ldr	r0, [pc, #24]	; (8002000 <HAL_SPI_MspInit+0xcc>)
 8001fe8:	f000 fb02 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001fec:	bf00      	nop
 8001fee:	3728      	adds	r7, #40	; 0x28
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40003800 	.word	0x40003800
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020800 	.word	0x40020800
 8002000:	40020400 	.word	0x40020400

08002004 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0e      	ldr	r2, [pc, #56]	; (800204c <HAL_TIM_Base_MspInit+0x48>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d115      	bne.n	8002042 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_TIM_Base_MspInit+0x4c>)
 800201c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <HAL_TIM_Base_MspInit+0x4c>)
 8002020:	f043 0302 	orr.w	r3, r3, #2
 8002024:	6413      	str	r3, [r2, #64]	; 0x40
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_TIM_Base_MspInit+0x4c>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	60fb      	str	r3, [r7, #12]
 8002030:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002032:	2200      	movs	r2, #0
 8002034:	2100      	movs	r1, #0
 8002036:	201d      	movs	r0, #29
 8002038:	f000 faa3 	bl	8002582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800203c:	201d      	movs	r0, #29
 800203e:	f000 fabc 	bl	80025ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40000400 	.word	0x40000400
 8002050:	40023800 	.word	0x40023800

08002054 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]
 800206a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a19      	ldr	r2, [pc, #100]	; (80020d8 <HAL_UART_MspInit+0x84>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d12b      	bne.n	80020ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
 800207a:	4b18      	ldr	r3, [pc, #96]	; (80020dc <HAL_UART_MspInit+0x88>)
 800207c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207e:	4a17      	ldr	r2, [pc, #92]	; (80020dc <HAL_UART_MspInit+0x88>)
 8002080:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002084:	6413      	str	r3, [r2, #64]	; 0x40
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <HAL_UART_MspInit+0x88>)
 8002088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208e:	613b      	str	r3, [r7, #16]
 8002090:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002092:	2300      	movs	r3, #0
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	4b11      	ldr	r3, [pc, #68]	; (80020dc <HAL_UART_MspInit+0x88>)
 8002098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209a:	4a10      	ldr	r2, [pc, #64]	; (80020dc <HAL_UART_MspInit+0x88>)
 800209c:	f043 0301 	orr.w	r3, r3, #1
 80020a0:	6313      	str	r3, [r2, #48]	; 0x30
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_UART_MspInit+0x88>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	f003 0301 	and.w	r3, r3, #1
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80020ae:	230c      	movs	r3, #12
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020be:	2307      	movs	r3, #7
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	4805      	ldr	r0, [pc, #20]	; (80020e0 <HAL_UART_MspInit+0x8c>)
 80020ca:	f000 fa91 	bl	80025f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40004400 	.word	0x40004400
 80020dc:	40023800 	.word	0x40023800
 80020e0:	40020000 	.word	0x40020000

080020e4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80020e8:	4b0e      	ldr	r3, [pc, #56]	; (8002124 <SDTimer_Handler+0x40>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <SDTimer_Handler+0x1c>
    Timer1--;
 80020f2:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <SDTimer_Handler+0x40>)
 80020f4:	781b      	ldrb	r3, [r3, #0]
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	3b01      	subs	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <SDTimer_Handler+0x40>)
 80020fe:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8002100:	4b09      	ldr	r3, [pc, #36]	; (8002128 <SDTimer_Handler+0x44>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d006      	beq.n	8002118 <SDTimer_Handler+0x34>
    Timer2--;
 800210a:	4b07      	ldr	r3, [pc, #28]	; (8002128 <SDTimer_Handler+0x44>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	b2db      	uxtb	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b2da      	uxtb	r2, r3
 8002114:	4b04      	ldr	r3, [pc, #16]	; (8002128 <SDTimer_Handler+0x44>)
 8002116:	701a      	strb	r2, [r3, #0]
}
 8002118:	bf00      	nop
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	2001d729 	.word	0x2001d729
 8002128:	2001d728 	.word	0x2001d728

0800212c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002130:	e7fe      	b.n	8002130 <NMI_Handler+0x4>

08002132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002132:	b480      	push	{r7}
 8002134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002136:	e7fe      	b.n	8002136 <HardFault_Handler+0x4>

08002138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800213c:	e7fe      	b.n	800213c <MemManage_Handler+0x4>

0800213e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800213e:	b480      	push	{r7}
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002142:	e7fe      	b.n	8002142 <BusFault_Handler+0x4>

08002144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002148:	e7fe      	b.n	8002148 <UsageFault_Handler+0x4>

0800214a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800214a:	b480      	push	{r7}
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800215c:	bf00      	nop
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr

08002166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002166:	b480      	push	{r7}
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800216a:	bf00      	nop
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	 FatFsCnt++;
 8002178:	4b0a      	ldr	r3, [pc, #40]	; (80021a4 <SysTick_Handler+0x30>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b2db      	uxtb	r3, r3
 800217e:	3301      	adds	r3, #1
 8002180:	b2da      	uxtb	r2, r3
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <SysTick_Handler+0x30>)
 8002184:	701a      	strb	r2, [r3, #0]
			  if(FatFsCnt >= 10)
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <SysTick_Handler+0x30>)
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	2b09      	cmp	r3, #9
 800218e:	d904      	bls.n	800219a <SysTick_Handler+0x26>
			  {
			    FatFsCnt = 0;
 8002190:	4b04      	ldr	r3, [pc, #16]	; (80021a4 <SysTick_Handler+0x30>)
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
			    SDTimer_Handler();
 8002196:	f7ff ffa5 	bl	80020e4 <SDTimer_Handler>
			  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800219a:	f000 f8d3 	bl	8002344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200000c0 	.word	0x200000c0

080021a8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80021ac:	4802      	ldr	r0, [pc, #8]	; (80021b8 <TIM3_IRQHandler+0x10>)
 80021ae:	f001 fcc0 	bl	8003b32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80021b2:	bf00      	nop
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200014b4 	.word	0x200014b4

080021bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <_sbrk+0x5c>)
 80021c6:	4b15      	ldr	r3, [pc, #84]	; (800221c <_sbrk+0x60>)
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021d0:	4b13      	ldr	r3, [pc, #76]	; (8002220 <_sbrk+0x64>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d102      	bne.n	80021de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d8:	4b11      	ldr	r3, [pc, #68]	; (8002220 <_sbrk+0x64>)
 80021da:	4a12      	ldr	r2, [pc, #72]	; (8002224 <_sbrk+0x68>)
 80021dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <_sbrk+0x64>)
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4413      	add	r3, r2
 80021e6:	693a      	ldr	r2, [r7, #16]
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d207      	bcs.n	80021fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021ec:	f005 ff4e 	bl	800808c <__errno>
 80021f0:	4603      	mov	r3, r0
 80021f2:	220c      	movs	r2, #12
 80021f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	e009      	b.n	8002210 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021fc:	4b08      	ldr	r3, [pc, #32]	; (8002220 <_sbrk+0x64>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002202:	4b07      	ldr	r3, [pc, #28]	; (8002220 <_sbrk+0x64>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4413      	add	r3, r2
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <_sbrk+0x64>)
 800220c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220e:	68fb      	ldr	r3, [r7, #12]
}
 8002210:	4618      	mov	r0, r3
 8002212:	3718      	adds	r7, #24
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	20020000 	.word	0x20020000
 800221c:	00000400 	.word	0x00000400
 8002220:	200000c4 	.word	0x200000c4
 8002224:	2001f7b0 	.word	0x2001f7b0

08002228 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800222c:	4b06      	ldr	r3, [pc, #24]	; (8002248 <SystemInit+0x20>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	4a05      	ldr	r2, [pc, #20]	; (8002248 <SystemInit+0x20>)
 8002234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	e000ed00 	.word	0xe000ed00

0800224c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800224c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002284 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002250:	480d      	ldr	r0, [pc, #52]	; (8002288 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002252:	490e      	ldr	r1, [pc, #56]	; (800228c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002258:	e002      	b.n	8002260 <LoopCopyDataInit>

0800225a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800225a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800225c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800225e:	3304      	adds	r3, #4

08002260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002264:	d3f9      	bcc.n	800225a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002266:	4a0b      	ldr	r2, [pc, #44]	; (8002294 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002268:	4c0b      	ldr	r4, [pc, #44]	; (8002298 <LoopFillZerobss+0x26>)
  movs r3, #0
 800226a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800226c:	e001      	b.n	8002272 <LoopFillZerobss>

0800226e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800226e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002270:	3204      	adds	r2, #4

08002272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002274:	d3fb      	bcc.n	800226e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002276:	f7ff ffd7 	bl	8002228 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800227a:	f005 ff0d 	bl	8008098 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227e:	f7ff fa0d 	bl	800169c <main>
  bx  lr    
 8002282:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002284:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800228c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8002290:	08009a7c 	.word	0x08009a7c
  ldr r2, =_sbss
 8002294:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8002298:	2001f7b0 	.word	0x2001f7b0

0800229c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800229c:	e7fe      	b.n	800229c <ADC_IRQHandler>
	...

080022a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80022a4:	4b0e      	ldr	r3, [pc, #56]	; (80022e0 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a0d      	ldr	r2, [pc, #52]	; (80022e0 <HAL_Init+0x40>)
 80022aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_Init+0x40>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a0a      	ldr	r2, [pc, #40]	; (80022e0 <HAL_Init+0x40>)
 80022b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022bc:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_Init+0x40>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a07      	ldr	r2, [pc, #28]	; (80022e0 <HAL_Init+0x40>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022c8:	2003      	movs	r0, #3
 80022ca:	f000 f94f 	bl	800256c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022ce:	2000      	movs	r0, #0
 80022d0:	f000 f808 	bl	80022e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022d4:	f7ff fe06 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023c00 	.word	0x40023c00

080022e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022ec:	4b12      	ldr	r3, [pc, #72]	; (8002338 <HAL_InitTick+0x54>)
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <HAL_InitTick+0x58>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80022fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002302:	4618      	mov	r0, r3
 8002304:	f000 f967 	bl	80025d6 <HAL_SYSTICK_Config>
 8002308:	4603      	mov	r3, r0
 800230a:	2b00      	cmp	r3, #0
 800230c:	d001      	beq.n	8002312 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e00e      	b.n	8002330 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d80a      	bhi.n	800232e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f000 f92f 	bl	8002582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002324:	4a06      	ldr	r2, [pc, #24]	; (8002340 <HAL_InitTick+0x5c>)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	e000      	b.n	8002330 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	20000008 	.word	0x20000008
 800233c:	20000010 	.word	0x20000010
 8002340:	2000000c 	.word	0x2000000c

08002344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_IncTick+0x20>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	461a      	mov	r2, r3
 800234e:	4b06      	ldr	r3, [pc, #24]	; (8002368 <HAL_IncTick+0x24>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4413      	add	r3, r2
 8002354:	4a04      	ldr	r2, [pc, #16]	; (8002368 <HAL_IncTick+0x24>)
 8002356:	6013      	str	r3, [r2, #0]
}
 8002358:	bf00      	nop
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	20000010 	.word	0x20000010
 8002368:	2001d72c 	.word	0x2001d72c

0800236c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return uwTick;
 8002370:	4b03      	ldr	r3, [pc, #12]	; (8002380 <HAL_GetTick+0x14>)
 8002372:	681b      	ldr	r3, [r3, #0]
}
 8002374:	4618      	mov	r0, r3
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	2001d72c 	.word	0x2001d72c

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff ffee 	bl	800236c <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffde 	bl	800236c <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000010 	.word	0x20000010

080023cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023dc:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e8:	4013      	ands	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023f0:	68bb      	ldr	r3, [r7, #8]
 80023f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023fe:	4a04      	ldr	r2, [pc, #16]	; (8002410 <__NVIC_SetPriorityGrouping+0x44>)
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	60d3      	str	r3, [r2, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	e000ed00 	.word	0xe000ed00

08002414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002418:	4b04      	ldr	r3, [pc, #16]	; (800242c <__NVIC_GetPriorityGrouping+0x18>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	0a1b      	lsrs	r3, r3, #8
 800241e:	f003 0307 	and.w	r3, r3, #7
}
 8002422:	4618      	mov	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	e000ed00 	.word	0xe000ed00

08002430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	4603      	mov	r3, r0
 8002438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800243a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243e:	2b00      	cmp	r3, #0
 8002440:	db0b      	blt.n	800245a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002442:	79fb      	ldrb	r3, [r7, #7]
 8002444:	f003 021f 	and.w	r2, r3, #31
 8002448:	4907      	ldr	r1, [pc, #28]	; (8002468 <__NVIC_EnableIRQ+0x38>)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2001      	movs	r0, #1
 8002452:	fa00 f202 	lsl.w	r2, r0, r2
 8002456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	e000e100 	.word	0xe000e100

0800246c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	6039      	str	r1, [r7, #0]
 8002476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247c:	2b00      	cmp	r3, #0
 800247e:	db0a      	blt.n	8002496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	b2da      	uxtb	r2, r3
 8002484:	490c      	ldr	r1, [pc, #48]	; (80024b8 <__NVIC_SetPriority+0x4c>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	0112      	lsls	r2, r2, #4
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	440b      	add	r3, r1
 8002490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002494:	e00a      	b.n	80024ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	4908      	ldr	r1, [pc, #32]	; (80024bc <__NVIC_SetPriority+0x50>)
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	f003 030f 	and.w	r3, r3, #15
 80024a2:	3b04      	subs	r3, #4
 80024a4:	0112      	lsls	r2, r2, #4
 80024a6:	b2d2      	uxtb	r2, r2
 80024a8:	440b      	add	r3, r1
 80024aa:	761a      	strb	r2, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000e100 	.word	0xe000e100
 80024bc:	e000ed00 	.word	0xe000ed00

080024c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	f003 0307 	and.w	r3, r3, #7
 80024d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	f1c3 0307 	rsb	r3, r3, #7
 80024da:	2b04      	cmp	r3, #4
 80024dc:	bf28      	it	cs
 80024de:	2304      	movcs	r3, #4
 80024e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3304      	adds	r3, #4
 80024e6:	2b06      	cmp	r3, #6
 80024e8:	d902      	bls.n	80024f0 <NVIC_EncodePriority+0x30>
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	3b03      	subs	r3, #3
 80024ee:	e000      	b.n	80024f2 <NVIC_EncodePriority+0x32>
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f4:	f04f 32ff 	mov.w	r2, #4294967295
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43da      	mvns	r2, r3
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	401a      	ands	r2, r3
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002508:	f04f 31ff 	mov.w	r1, #4294967295
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	43d9      	mvns	r1, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002518:	4313      	orrs	r3, r2
         );
}
 800251a:	4618      	mov	r0, r3
 800251c:	3724      	adds	r7, #36	; 0x24
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr
	...

08002528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	3b01      	subs	r3, #1
 8002534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002538:	d301      	bcc.n	800253e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800253a:	2301      	movs	r3, #1
 800253c:	e00f      	b.n	800255e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800253e:	4a0a      	ldr	r2, [pc, #40]	; (8002568 <SysTick_Config+0x40>)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002546:	210f      	movs	r1, #15
 8002548:	f04f 30ff 	mov.w	r0, #4294967295
 800254c:	f7ff ff8e 	bl	800246c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <SysTick_Config+0x40>)
 8002552:	2200      	movs	r2, #0
 8002554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002556:	4b04      	ldr	r3, [pc, #16]	; (8002568 <SysTick_Config+0x40>)
 8002558:	2207      	movs	r2, #7
 800255a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800255c:	2300      	movs	r3, #0
}
 800255e:	4618      	mov	r0, r3
 8002560:	3708      	adds	r7, #8
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
 8002566:	bf00      	nop
 8002568:	e000e010 	.word	0xe000e010

0800256c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b082      	sub	sp, #8
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7ff ff29 	bl	80023cc <__NVIC_SetPriorityGrouping>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	4603      	mov	r3, r0
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002594:	f7ff ff3e 	bl	8002414 <__NVIC_GetPriorityGrouping>
 8002598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	68b9      	ldr	r1, [r7, #8]
 800259e:	6978      	ldr	r0, [r7, #20]
 80025a0:	f7ff ff8e 	bl	80024c0 <NVIC_EncodePriority>
 80025a4:	4602      	mov	r2, r0
 80025a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025aa:	4611      	mov	r1, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff5d 	bl	800246c <__NVIC_SetPriority>
}
 80025b2:	bf00      	nop
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b082      	sub	sp, #8
 80025be:	af00      	add	r7, sp, #0
 80025c0:	4603      	mov	r3, r0
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ff31 	bl	8002430 <__NVIC_EnableIRQ>
}
 80025ce:	bf00      	nop
 80025d0:	3708      	adds	r7, #8
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}

080025d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025d6:	b580      	push	{r7, lr}
 80025d8:	b082      	sub	sp, #8
 80025da:	af00      	add	r7, sp, #0
 80025dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f7ff ffa2 	bl	8002528 <SysTick_Config>
 80025e4:	4603      	mov	r3, r0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025fe:	2300      	movs	r3, #0
 8002600:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002606:	2300      	movs	r3, #0
 8002608:	61fb      	str	r3, [r7, #28]
 800260a:	e159      	b.n	80028c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800260c:	2201      	movs	r2, #1
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	697a      	ldr	r2, [r7, #20]
 800261c:	4013      	ands	r3, r2
 800261e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002620:	693a      	ldr	r2, [r7, #16]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	429a      	cmp	r2, r3
 8002626:	f040 8148 	bne.w	80028ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b01      	cmp	r3, #1
 8002634:	d005      	beq.n	8002642 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263e:	2b02      	cmp	r3, #2
 8002640:	d130      	bne.n	80026a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	005b      	lsls	r3, r3, #1
 800264c:	2203      	movs	r2, #3
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43db      	mvns	r3, r3
 8002654:	69ba      	ldr	r2, [r7, #24]
 8002656:	4013      	ands	r3, r2
 8002658:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68da      	ldr	r2, [r3, #12]
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	fa02 f303 	lsl.w	r3, r2, r3
 8002666:	69ba      	ldr	r2, [r7, #24]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	43db      	mvns	r3, r3
 8002682:	69ba      	ldr	r2, [r7, #24]
 8002684:	4013      	ands	r3, r2
 8002686:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	091b      	lsrs	r3, r3, #4
 800268e:	f003 0201 	and.w	r2, r3, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	4313      	orrs	r3, r2
 800269c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	69ba      	ldr	r2, [r7, #24]
 80026a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b03      	cmp	r3, #3
 80026ae:	d017      	beq.n	80026e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	2203      	movs	r2, #3
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43db      	mvns	r3, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4013      	ands	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	005b      	lsls	r3, r3, #1
 80026d0:	fa02 f303 	lsl.w	r3, r2, r3
 80026d4:	69ba      	ldr	r2, [r7, #24]
 80026d6:	4313      	orrs	r3, r2
 80026d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	2b02      	cmp	r3, #2
 80026ea:	d123      	bne.n	8002734 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	08da      	lsrs	r2, r3, #3
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	3208      	adds	r2, #8
 80026f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	220f      	movs	r2, #15
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	691a      	ldr	r2, [r3, #16]
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	f003 0307 	and.w	r3, r3, #7
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	4313      	orrs	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	08da      	lsrs	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	3208      	adds	r2, #8
 800272e:	69b9      	ldr	r1, [r7, #24]
 8002730:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	2203      	movs	r2, #3
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	43db      	mvns	r3, r3
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4013      	ands	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	4313      	orrs	r3, r2
 8002760:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	69ba      	ldr	r2, [r7, #24]
 8002766:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002770:	2b00      	cmp	r3, #0
 8002772:	f000 80a2 	beq.w	80028ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b57      	ldr	r3, [pc, #348]	; (80028d8 <HAL_GPIO_Init+0x2e8>)
 800277c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800277e:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_GPIO_Init+0x2e8>)
 8002780:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002784:	6453      	str	r3, [r2, #68]	; 0x44
 8002786:	4b54      	ldr	r3, [pc, #336]	; (80028d8 <HAL_GPIO_Init+0x2e8>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002792:	4a52      	ldr	r2, [pc, #328]	; (80028dc <HAL_GPIO_Init+0x2ec>)
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	089b      	lsrs	r3, r3, #2
 8002798:	3302      	adds	r3, #2
 800279a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0303 	and.w	r3, r3, #3
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	220f      	movs	r2, #15
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	43db      	mvns	r3, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4013      	ands	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a49      	ldr	r2, [pc, #292]	; (80028e0 <HAL_GPIO_Init+0x2f0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d019      	beq.n	80027f2 <HAL_GPIO_Init+0x202>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a48      	ldr	r2, [pc, #288]	; (80028e4 <HAL_GPIO_Init+0x2f4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d013      	beq.n	80027ee <HAL_GPIO_Init+0x1fe>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a47      	ldr	r2, [pc, #284]	; (80028e8 <HAL_GPIO_Init+0x2f8>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d00d      	beq.n	80027ea <HAL_GPIO_Init+0x1fa>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a46      	ldr	r2, [pc, #280]	; (80028ec <HAL_GPIO_Init+0x2fc>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d007      	beq.n	80027e6 <HAL_GPIO_Init+0x1f6>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a45      	ldr	r2, [pc, #276]	; (80028f0 <HAL_GPIO_Init+0x300>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d101      	bne.n	80027e2 <HAL_GPIO_Init+0x1f2>
 80027de:	2304      	movs	r3, #4
 80027e0:	e008      	b.n	80027f4 <HAL_GPIO_Init+0x204>
 80027e2:	2307      	movs	r3, #7
 80027e4:	e006      	b.n	80027f4 <HAL_GPIO_Init+0x204>
 80027e6:	2303      	movs	r3, #3
 80027e8:	e004      	b.n	80027f4 <HAL_GPIO_Init+0x204>
 80027ea:	2302      	movs	r3, #2
 80027ec:	e002      	b.n	80027f4 <HAL_GPIO_Init+0x204>
 80027ee:	2301      	movs	r3, #1
 80027f0:	e000      	b.n	80027f4 <HAL_GPIO_Init+0x204>
 80027f2:	2300      	movs	r3, #0
 80027f4:	69fa      	ldr	r2, [r7, #28]
 80027f6:	f002 0203 	and.w	r2, r2, #3
 80027fa:	0092      	lsls	r2, r2, #2
 80027fc:	4093      	lsls	r3, r2
 80027fe:	69ba      	ldr	r2, [r7, #24]
 8002800:	4313      	orrs	r3, r2
 8002802:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002804:	4935      	ldr	r1, [pc, #212]	; (80028dc <HAL_GPIO_Init+0x2ec>)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	089b      	lsrs	r3, r3, #2
 800280a:	3302      	adds	r3, #2
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <HAL_GPIO_Init+0x304>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002836:	4a2f      	ldr	r2, [pc, #188]	; (80028f4 <HAL_GPIO_Init+0x304>)
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800283c:	4b2d      	ldr	r3, [pc, #180]	; (80028f4 <HAL_GPIO_Init+0x304>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	43db      	mvns	r3, r3
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	4013      	ands	r3, r2
 800284a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d003      	beq.n	8002860 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002860:	4a24      	ldr	r2, [pc, #144]	; (80028f4 <HAL_GPIO_Init+0x304>)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002866:	4b23      	ldr	r3, [pc, #140]	; (80028f4 <HAL_GPIO_Init+0x304>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	43db      	mvns	r3, r3
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	4013      	ands	r3, r2
 8002874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800288a:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <HAL_GPIO_Init+0x304>)
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002890:	4b18      	ldr	r3, [pc, #96]	; (80028f4 <HAL_GPIO_Init+0x304>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002896:	693b      	ldr	r3, [r7, #16]
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d003      	beq.n	80028b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028b4:	4a0f      	ldr	r2, [pc, #60]	; (80028f4 <HAL_GPIO_Init+0x304>)
 80028b6:	69bb      	ldr	r3, [r7, #24]
 80028b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	3301      	adds	r3, #1
 80028be:	61fb      	str	r3, [r7, #28]
 80028c0:	69fb      	ldr	r3, [r7, #28]
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	f67f aea2 	bls.w	800260c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40023800 	.word	0x40023800
 80028dc:	40013800 	.word	0x40013800
 80028e0:	40020000 	.word	0x40020000
 80028e4:	40020400 	.word	0x40020400
 80028e8:	40020800 	.word	0x40020800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	40021000 	.word	0x40021000
 80028f4:	40013c00 	.word	0x40013c00

080028f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	460b      	mov	r3, r1
 8002902:	807b      	strh	r3, [r7, #2]
 8002904:	4613      	mov	r3, r2
 8002906:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002908:	787b      	ldrb	r3, [r7, #1]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800290e:	887a      	ldrh	r2, [r7, #2]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002914:	e003      	b.n	800291e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002916:	887b      	ldrh	r3, [r7, #2]
 8002918:	041a      	lsls	r2, r3, #16
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	619a      	str	r2, [r3, #24]
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e264      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d075      	beq.n	8002a36 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800294a:	4ba3      	ldr	r3, [pc, #652]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 030c 	and.w	r3, r3, #12
 8002952:	2b04      	cmp	r3, #4
 8002954:	d00c      	beq.n	8002970 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002956:	4ba0      	ldr	r3, [pc, #640]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800295e:	2b08      	cmp	r3, #8
 8002960:	d112      	bne.n	8002988 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002962:	4b9d      	ldr	r3, [pc, #628]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800296a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296e:	d10b      	bne.n	8002988 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	4b99      	ldr	r3, [pc, #612]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d05b      	beq.n	8002a34 <HAL_RCC_OscConfig+0x108>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d157      	bne.n	8002a34 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e23f      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002990:	d106      	bne.n	80029a0 <HAL_RCC_OscConfig+0x74>
 8002992:	4b91      	ldr	r3, [pc, #580]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a90      	ldr	r2, [pc, #576]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800299c:	6013      	str	r3, [r2, #0]
 800299e:	e01d      	b.n	80029dc <HAL_RCC_OscConfig+0xb0>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029a8:	d10c      	bne.n	80029c4 <HAL_RCC_OscConfig+0x98>
 80029aa:	4b8b      	ldr	r3, [pc, #556]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	4b88      	ldr	r3, [pc, #544]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a87      	ldr	r2, [pc, #540]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029c0:	6013      	str	r3, [r2, #0]
 80029c2:	e00b      	b.n	80029dc <HAL_RCC_OscConfig+0xb0>
 80029c4:	4b84      	ldr	r3, [pc, #528]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a83      	ldr	r2, [pc, #524]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	4b81      	ldr	r3, [pc, #516]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a80      	ldr	r2, [pc, #512]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 80029d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029e4:	f7ff fcc2 	bl	800236c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	e008      	b.n	80029fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029ec:	f7ff fcbe 	bl	800236c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	2b64      	cmp	r3, #100	; 0x64
 80029f8:	d901      	bls.n	80029fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80029fa:	2303      	movs	r3, #3
 80029fc:	e204      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029fe:	4b76      	ldr	r3, [pc, #472]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d0f0      	beq.n	80029ec <HAL_RCC_OscConfig+0xc0>
 8002a0a:	e014      	b.n	8002a36 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0c:	f7ff fcae 	bl	800236c <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a14:	f7ff fcaa 	bl	800236c <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	; 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e1f0      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a26:	4b6c      	ldr	r3, [pc, #432]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1f0      	bne.n	8002a14 <HAL_RCC_OscConfig+0xe8>
 8002a32:	e000      	b.n	8002a36 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d063      	beq.n	8002b0a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a42:	4b65      	ldr	r3, [pc, #404]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 030c 	and.w	r3, r3, #12
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a4e:	4b62      	ldr	r3, [pc, #392]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a56:	2b08      	cmp	r3, #8
 8002a58:	d11c      	bne.n	8002a94 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a5a:	4b5f      	ldr	r3, [pc, #380]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d116      	bne.n	8002a94 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a66:	4b5c      	ldr	r3, [pc, #368]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d005      	beq.n	8002a7e <HAL_RCC_OscConfig+0x152>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d001      	beq.n	8002a7e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e1c4      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a7e:	4b56      	ldr	r3, [pc, #344]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	691b      	ldr	r3, [r3, #16]
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	4952      	ldr	r1, [pc, #328]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a92:	e03a      	b.n	8002b0a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d020      	beq.n	8002ade <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a9c:	4b4f      	ldr	r3, [pc, #316]	; (8002bdc <HAL_RCC_OscConfig+0x2b0>)
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa2:	f7ff fc63 	bl	800236c <HAL_GetTick>
 8002aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aaa:	f7ff fc5f 	bl	800236c <HAL_GetTick>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e1a5      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002abc:	4b46      	ldr	r3, [pc, #280]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0302 	and.w	r3, r3, #2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ac8:	4b43      	ldr	r3, [pc, #268]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	691b      	ldr	r3, [r3, #16]
 8002ad4:	00db      	lsls	r3, r3, #3
 8002ad6:	4940      	ldr	r1, [pc, #256]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	600b      	str	r3, [r1, #0]
 8002adc:	e015      	b.n	8002b0a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ade:	4b3f      	ldr	r3, [pc, #252]	; (8002bdc <HAL_RCC_OscConfig+0x2b0>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae4:	f7ff fc42 	bl	800236c <HAL_GetTick>
 8002ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aea:	e008      	b.n	8002afe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aec:	f7ff fc3e 	bl	800236c <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d901      	bls.n	8002afe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	e184      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002afe:	4b36      	ldr	r3, [pc, #216]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d1f0      	bne.n	8002aec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d030      	beq.n	8002b78 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d016      	beq.n	8002b4c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_RCC_OscConfig+0x2b4>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7ff fc22 	bl	800236c <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7ff fc1e 	bl	800236c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e164      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b3e:	4b26      	ldr	r3, [pc, #152]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0f0      	beq.n	8002b2c <HAL_RCC_OscConfig+0x200>
 8002b4a:	e015      	b.n	8002b78 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b4c:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <HAL_RCC_OscConfig+0x2b4>)
 8002b4e:	2200      	movs	r2, #0
 8002b50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b52:	f7ff fc0b 	bl	800236c <HAL_GetTick>
 8002b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b58:	e008      	b.n	8002b6c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b5a:	f7ff fc07 	bl	800236c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	693b      	ldr	r3, [r7, #16]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d901      	bls.n	8002b6c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	e14d      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b6c:	4b1a      	ldr	r3, [pc, #104]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d1f0      	bne.n	8002b5a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	f000 80a0 	beq.w	8002cc6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b86:	2300      	movs	r3, #0
 8002b88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b8a:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10f      	bne.n	8002bb6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	4b0f      	ldr	r3, [pc, #60]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a0e      	ldr	r2, [pc, #56]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b0c      	ldr	r3, [pc, #48]	; (8002bd8 <HAL_RCC_OscConfig+0x2ac>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bb6:	4b0b      	ldr	r3, [pc, #44]	; (8002be4 <HAL_RCC_OscConfig+0x2b8>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d121      	bne.n	8002c06 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc2:	4b08      	ldr	r3, [pc, #32]	; (8002be4 <HAL_RCC_OscConfig+0x2b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a07      	ldr	r2, [pc, #28]	; (8002be4 <HAL_RCC_OscConfig+0x2b8>)
 8002bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bce:	f7ff fbcd 	bl	800236c <HAL_GetTick>
 8002bd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd4:	e011      	b.n	8002bfa <HAL_RCC_OscConfig+0x2ce>
 8002bd6:	bf00      	nop
 8002bd8:	40023800 	.word	0x40023800
 8002bdc:	42470000 	.word	0x42470000
 8002be0:	42470e80 	.word	0x42470e80
 8002be4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be8:	f7ff fbc0 	bl	800236c <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e106      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	; (8002e10 <HAL_RCC_OscConfig+0x4e4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d0f0      	beq.n	8002be8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	d106      	bne.n	8002c1c <HAL_RCC_OscConfig+0x2f0>
 8002c0e:	4b81      	ldr	r3, [pc, #516]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a80      	ldr	r2, [pc, #512]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c14:	f043 0301 	orr.w	r3, r3, #1
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1a:	e01c      	b.n	8002c56 <HAL_RCC_OscConfig+0x32a>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	2b05      	cmp	r3, #5
 8002c22:	d10c      	bne.n	8002c3e <HAL_RCC_OscConfig+0x312>
 8002c24:	4b7b      	ldr	r3, [pc, #492]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c28:	4a7a      	ldr	r2, [pc, #488]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c2a:	f043 0304 	orr.w	r3, r3, #4
 8002c2e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c30:	4b78      	ldr	r3, [pc, #480]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c34:	4a77      	ldr	r2, [pc, #476]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c36:	f043 0301 	orr.w	r3, r3, #1
 8002c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c3c:	e00b      	b.n	8002c56 <HAL_RCC_OscConfig+0x32a>
 8002c3e:	4b75      	ldr	r3, [pc, #468]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c42:	4a74      	ldr	r2, [pc, #464]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4a:	4b72      	ldr	r3, [pc, #456]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a71      	ldr	r2, [pc, #452]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c50:	f023 0304 	bic.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d015      	beq.n	8002c8a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c5e:	f7ff fb85 	bl	800236c <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c64:	e00a      	b.n	8002c7c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c66:	f7ff fb81 	bl	800236c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d901      	bls.n	8002c7c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002c78:	2303      	movs	r3, #3
 8002c7a:	e0c5      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c7c:	4b65      	ldr	r3, [pc, #404]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f003 0302 	and.w	r3, r3, #2
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d0ee      	beq.n	8002c66 <HAL_RCC_OscConfig+0x33a>
 8002c88:	e014      	b.n	8002cb4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c8a:	f7ff fb6f 	bl	800236c <HAL_GetTick>
 8002c8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c92:	f7ff fb6b 	bl	800236c <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d901      	bls.n	8002ca8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ca4:	2303      	movs	r3, #3
 8002ca6:	e0af      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca8:	4b5a      	ldr	r3, [pc, #360]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cac:	f003 0302 	and.w	r3, r3, #2
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d1ee      	bne.n	8002c92 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cb4:	7dfb      	ldrb	r3, [r7, #23]
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d105      	bne.n	8002cc6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cba:	4b56      	ldr	r3, [pc, #344]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cbe:	4a55      	ldr	r2, [pc, #340]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002cc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cc4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	699b      	ldr	r3, [r3, #24]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 809b 	beq.w	8002e06 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002cd0:	4b50      	ldr	r3, [pc, #320]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d05c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d141      	bne.n	8002d68 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <HAL_RCC_OscConfig+0x4ec>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7ff fb3f 	bl	800236c <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf2:	f7ff fb3b 	bl	800236c <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e081      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d04:	4b43      	ldr	r3, [pc, #268]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69da      	ldr	r2, [r3, #28]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	019b      	lsls	r3, r3, #6
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d26:	085b      	lsrs	r3, r3, #1
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	041b      	lsls	r3, r3, #16
 8002d2c:	431a      	orrs	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	061b      	lsls	r3, r3, #24
 8002d34:	4937      	ldr	r1, [pc, #220]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002d36:	4313      	orrs	r3, r2
 8002d38:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d3a:	4b37      	ldr	r3, [pc, #220]	; (8002e18 <HAL_RCC_OscConfig+0x4ec>)
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7ff fb14 	bl	800236c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d48:	f7ff fb10 	bl	800236c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e056      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d5a:	4b2e      	ldr	r3, [pc, #184]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0x41c>
 8002d66:	e04e      	b.n	8002e06 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <HAL_RCC_OscConfig+0x4ec>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6e:	f7ff fafd 	bl	800236c <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d76:	f7ff faf9 	bl	800236c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e03f      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d88:	4b22      	ldr	r3, [pc, #136]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1f0      	bne.n	8002d76 <HAL_RCC_OscConfig+0x44a>
 8002d94:	e037      	b.n	8002e06 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e032      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002da2:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <HAL_RCC_OscConfig+0x4e8>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d028      	beq.n	8002e02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d121      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d11a      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dd8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d111      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	3b01      	subs	r3, #1
 8002dec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d107      	bne.n	8002e02 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d001      	beq.n	8002e06 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002e06:	2300      	movs	r3, #0
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3718      	adds	r7, #24
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40007000 	.word	0x40007000
 8002e14:	40023800 	.word	0x40023800
 8002e18:	42470060 	.word	0x42470060

08002e1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0cc      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d90c      	bls.n	8002e58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e3e:	4b65      	ldr	r3, [pc, #404]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e46:	4b63      	ldr	r3, [pc, #396]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	683a      	ldr	r2, [r7, #0]
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d001      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e0b8      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0302 	and.w	r3, r3, #2
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0304 	and.w	r3, r3, #4
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e70:	4b59      	ldr	r3, [pc, #356]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	4a58      	ldr	r2, [pc, #352]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0308 	and.w	r3, r3, #8
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e88:	4b53      	ldr	r3, [pc, #332]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e94:	4b50      	ldr	r3, [pc, #320]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	494d      	ldr	r1, [pc, #308]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d044      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d107      	bne.n	8002eca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eba:	4b47      	ldr	r3, [pc, #284]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d119      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e07f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d003      	beq.n	8002eda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eda:	4b3f      	ldr	r3, [pc, #252]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d109      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e06f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eea:	4b3b      	ldr	r3, [pc, #236]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e067      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	f023 0203 	bic.w	r2, r3, #3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	4934      	ldr	r1, [pc, #208]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f0c:	f7ff fa2e 	bl	800236c <HAL_GetTick>
 8002f10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f12:	e00a      	b.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f14:	f7ff fa2a 	bl	800236c <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e04f      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	4b2b      	ldr	r3, [pc, #172]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f003 020c 	and.w	r2, r3, #12
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d1eb      	bne.n	8002f14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b25      	ldr	r3, [pc, #148]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d20c      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f4c:	683a      	ldr	r2, [r7, #0]
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d001      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e032      	b.n	8002fca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4916      	ldr	r1, [pc, #88]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8e:	4b12      	ldr	r3, [pc, #72]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490e      	ldr	r1, [pc, #56]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fa2:	f000 f821 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b0b      	ldr	r3, [pc, #44]	; (8002fd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	490a      	ldr	r1, [pc, #40]	; (8002fdc <HAL_RCC_ClockConfig+0x1c0>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002fba:	4a09      	ldr	r2, [pc, #36]	; (8002fe0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fbe:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_RCC_ClockConfig+0x1c8>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff f98e 	bl	80022e4 <HAL_InitTick>

  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023c00 	.word	0x40023c00
 8002fd8:	40023800 	.word	0x40023800
 8002fdc:	08009464 	.word	0x08009464
 8002fe0:	20000008 	.word	0x20000008
 8002fe4:	2000000c 	.word	0x2000000c

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002fec:	b084      	sub	sp, #16
 8002fee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	607b      	str	r3, [r7, #4]
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60fb      	str	r3, [r7, #12]
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003000:	4b67      	ldr	r3, [pc, #412]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 030c 	and.w	r3, r3, #12
 8003008:	2b08      	cmp	r3, #8
 800300a:	d00d      	beq.n	8003028 <HAL_RCC_GetSysClockFreq+0x40>
 800300c:	2b08      	cmp	r3, #8
 800300e:	f200 80bd 	bhi.w	800318c <HAL_RCC_GetSysClockFreq+0x1a4>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_RCC_GetSysClockFreq+0x34>
 8003016:	2b04      	cmp	r3, #4
 8003018:	d003      	beq.n	8003022 <HAL_RCC_GetSysClockFreq+0x3a>
 800301a:	e0b7      	b.n	800318c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800301c:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800301e:	60bb      	str	r3, [r7, #8]
       break;
 8003020:	e0b7      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003022:	4b61      	ldr	r3, [pc, #388]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003024:	60bb      	str	r3, [r7, #8]
      break;
 8003026:	e0b4      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003028:	4b5d      	ldr	r3, [pc, #372]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003030:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003032:	4b5b      	ldr	r3, [pc, #364]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d04d      	beq.n	80030da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800303e:	4b58      	ldr	r3, [pc, #352]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	099b      	lsrs	r3, r3, #6
 8003044:	461a      	mov	r2, r3
 8003046:	f04f 0300 	mov.w	r3, #0
 800304a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800304e:	f04f 0100 	mov.w	r1, #0
 8003052:	ea02 0800 	and.w	r8, r2, r0
 8003056:	ea03 0901 	and.w	r9, r3, r1
 800305a:	4640      	mov	r0, r8
 800305c:	4649      	mov	r1, r9
 800305e:	f04f 0200 	mov.w	r2, #0
 8003062:	f04f 0300 	mov.w	r3, #0
 8003066:	014b      	lsls	r3, r1, #5
 8003068:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800306c:	0142      	lsls	r2, r0, #5
 800306e:	4610      	mov	r0, r2
 8003070:	4619      	mov	r1, r3
 8003072:	ebb0 0008 	subs.w	r0, r0, r8
 8003076:	eb61 0109 	sbc.w	r1, r1, r9
 800307a:	f04f 0200 	mov.w	r2, #0
 800307e:	f04f 0300 	mov.w	r3, #0
 8003082:	018b      	lsls	r3, r1, #6
 8003084:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003088:	0182      	lsls	r2, r0, #6
 800308a:	1a12      	subs	r2, r2, r0
 800308c:	eb63 0301 	sbc.w	r3, r3, r1
 8003090:	f04f 0000 	mov.w	r0, #0
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	00d9      	lsls	r1, r3, #3
 800309a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800309e:	00d0      	lsls	r0, r2, #3
 80030a0:	4602      	mov	r2, r0
 80030a2:	460b      	mov	r3, r1
 80030a4:	eb12 0208 	adds.w	r2, r2, r8
 80030a8:	eb43 0309 	adc.w	r3, r3, r9
 80030ac:	f04f 0000 	mov.w	r0, #0
 80030b0:	f04f 0100 	mov.w	r1, #0
 80030b4:	0259      	lsls	r1, r3, #9
 80030b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80030ba:	0250      	lsls	r0, r2, #9
 80030bc:	4602      	mov	r2, r0
 80030be:	460b      	mov	r3, r1
 80030c0:	4610      	mov	r0, r2
 80030c2:	4619      	mov	r1, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	461a      	mov	r2, r3
 80030c8:	f04f 0300 	mov.w	r3, #0
 80030cc:	f7fd fbe6 	bl	800089c <__aeabi_uldivmod>
 80030d0:	4602      	mov	r2, r0
 80030d2:	460b      	mov	r3, r1
 80030d4:	4613      	mov	r3, r2
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	e04a      	b.n	8003170 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b31      	ldr	r3, [pc, #196]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	461a      	mov	r2, r3
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	ea02 0400 	and.w	r4, r2, r0
 80030f2:	ea03 0501 	and.w	r5, r3, r1
 80030f6:	4620      	mov	r0, r4
 80030f8:	4629      	mov	r1, r5
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	014b      	lsls	r3, r1, #5
 8003104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003108:	0142      	lsls	r2, r0, #5
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	1b00      	subs	r0, r0, r4
 8003110:	eb61 0105 	sbc.w	r1, r1, r5
 8003114:	f04f 0200 	mov.w	r2, #0
 8003118:	f04f 0300 	mov.w	r3, #0
 800311c:	018b      	lsls	r3, r1, #6
 800311e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003122:	0182      	lsls	r2, r0, #6
 8003124:	1a12      	subs	r2, r2, r0
 8003126:	eb63 0301 	sbc.w	r3, r3, r1
 800312a:	f04f 0000 	mov.w	r0, #0
 800312e:	f04f 0100 	mov.w	r1, #0
 8003132:	00d9      	lsls	r1, r3, #3
 8003134:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003138:	00d0      	lsls	r0, r2, #3
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	1912      	adds	r2, r2, r4
 8003140:	eb45 0303 	adc.w	r3, r5, r3
 8003144:	f04f 0000 	mov.w	r0, #0
 8003148:	f04f 0100 	mov.w	r1, #0
 800314c:	0299      	lsls	r1, r3, #10
 800314e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003152:	0290      	lsls	r0, r2, #10
 8003154:	4602      	mov	r2, r0
 8003156:	460b      	mov	r3, r1
 8003158:	4610      	mov	r0, r2
 800315a:	4619      	mov	r1, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	461a      	mov	r2, r3
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	f7fd fb9a 	bl	800089c <__aeabi_uldivmod>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4613      	mov	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003170:	4b0b      	ldr	r3, [pc, #44]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	0c1b      	lsrs	r3, r3, #16
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	3301      	adds	r3, #1
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	fbb2 f3f3 	udiv	r3, r2, r3
 8003188:	60bb      	str	r3, [r7, #8]
      break;
 800318a:	e002      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800318c:	4b05      	ldr	r3, [pc, #20]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800318e:	60bb      	str	r3, [r7, #8]
      break;
 8003190:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003192:	68bb      	ldr	r3, [r7, #8]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800319e:	bf00      	nop
 80031a0:	40023800 	.word	0x40023800
 80031a4:	00f42400 	.word	0x00f42400
 80031a8:	007a1200 	.word	0x007a1200

080031ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031b0:	4b03      	ldr	r3, [pc, #12]	; (80031c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80031b2:	681b      	ldr	r3, [r3, #0]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	20000008 	.word	0x20000008

080031c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031c8:	f7ff fff0 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031cc:	4602      	mov	r2, r0
 80031ce:	4b05      	ldr	r3, [pc, #20]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	0a9b      	lsrs	r3, r3, #10
 80031d4:	f003 0307 	and.w	r3, r3, #7
 80031d8:	4903      	ldr	r1, [pc, #12]	; (80031e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031da:	5ccb      	ldrb	r3, [r1, r3]
 80031dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	bd80      	pop	{r7, pc}
 80031e4:	40023800 	.word	0x40023800
 80031e8:	08009474 	.word	0x08009474

080031ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031f0:	f7ff ffdc 	bl	80031ac <HAL_RCC_GetHCLKFreq>
 80031f4:	4602      	mov	r2, r0
 80031f6:	4b05      	ldr	r3, [pc, #20]	; (800320c <HAL_RCC_GetPCLK2Freq+0x20>)
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	0b5b      	lsrs	r3, r3, #13
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	4903      	ldr	r1, [pc, #12]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003202:	5ccb      	ldrb	r3, [r1, r3]
 8003204:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40023800 	.word	0x40023800
 8003210:	08009474 	.word	0x08009474

08003214 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b082      	sub	sp, #8
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07b      	b.n	800331e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b00      	cmp	r3, #0
 800322c:	d108      	bne.n	8003240 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003236:	d009      	beq.n	800324c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2200      	movs	r2, #0
 800323c:	61da      	str	r2, [r3, #28]
 800323e:	e005      	b.n	800324c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d106      	bne.n	800326c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fe fe64 	bl	8001f34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2202      	movs	r2, #2
 8003270:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003282:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68db      	ldr	r3, [r3, #12]
 800329a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800329e:	431a      	orrs	r2, r3
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	691b      	ldr	r3, [r3, #16]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	431a      	orrs	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
 80032ae:	f003 0301 	and.w	r3, r3, #1
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032bc:	431a      	orrs	r2, r3
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032c6:	431a      	orrs	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	ea42 0103 	orr.w	r1, r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	0c1b      	lsrs	r3, r3, #16
 80032ea:	f003 0104 	and.w	r1, r3, #4
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f2:	f003 0210 	and.w	r2, r3, #16
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b088      	sub	sp, #32
 800332a:	af00      	add	r7, sp, #0
 800332c:	60f8      	str	r0, [r7, #12]
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_SPI_Transmit+0x22>
 8003344:	2302      	movs	r3, #2
 8003346:	e126      	b.n	8003596 <HAL_SPI_Transmit+0x270>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003350:	f7ff f80c 	bl	800236c <HAL_GetTick>
 8003354:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003356:	88fb      	ldrh	r3, [r7, #6]
 8003358:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b01      	cmp	r3, #1
 8003364:	d002      	beq.n	800336c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003366:	2302      	movs	r3, #2
 8003368:	77fb      	strb	r3, [r7, #31]
    goto error;
 800336a:	e10b      	b.n	8003584 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_SPI_Transmit+0x52>
 8003372:	88fb      	ldrh	r3, [r7, #6]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d102      	bne.n	800337e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800337c:	e102      	b.n	8003584 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2203      	movs	r2, #3
 8003382:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	88fa      	ldrh	r2, [r7, #6]
 8003396:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	88fa      	ldrh	r2, [r7, #6]
 800339c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033c4:	d10f      	bne.n	80033e6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d007      	beq.n	8003404 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003402:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800340c:	d14b      	bne.n	80034a6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <HAL_SPI_Transmit+0xf6>
 8003416:	8afb      	ldrh	r3, [r7, #22]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d13e      	bne.n	800349a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003420:	881a      	ldrh	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003440:	e02b      	b.n	800349a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b02      	cmp	r3, #2
 800344e:	d112      	bne.n	8003476 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	881a      	ldrh	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003460:	1c9a      	adds	r2, r3, #2
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800346a:	b29b      	uxth	r3, r3
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	86da      	strh	r2, [r3, #54]	; 0x36
 8003474:	e011      	b.n	800349a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003476:	f7fe ff79 	bl	800236c <HAL_GetTick>
 800347a:	4602      	mov	r2, r0
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	1ad3      	subs	r3, r2, r3
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	429a      	cmp	r2, r3
 8003484:	d803      	bhi.n	800348e <HAL_SPI_Transmit+0x168>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348c:	d102      	bne.n	8003494 <HAL_SPI_Transmit+0x16e>
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d102      	bne.n	800349a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003498:	e074      	b.n	8003584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ce      	bne.n	8003442 <HAL_SPI_Transmit+0x11c>
 80034a4:	e04c      	b.n	8003540 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <HAL_SPI_Transmit+0x18e>
 80034ae:	8afb      	ldrh	r3, [r7, #22]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d140      	bne.n	8003536 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	330c      	adds	r3, #12
 80034be:	7812      	ldrb	r2, [r2, #0]
 80034c0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c6:	1c5a      	adds	r2, r3, #1
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b29a      	uxth	r2, r3
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80034da:	e02c      	b.n	8003536 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d113      	bne.n	8003512 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	330c      	adds	r3, #12
 80034f4:	7812      	ldrb	r2, [r2, #0]
 80034f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fc:	1c5a      	adds	r2, r3, #1
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003506:	b29b      	uxth	r3, r3
 8003508:	3b01      	subs	r3, #1
 800350a:	b29a      	uxth	r2, r3
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003510:	e011      	b.n	8003536 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003512:	f7fe ff2b 	bl	800236c <HAL_GetTick>
 8003516:	4602      	mov	r2, r0
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	683a      	ldr	r2, [r7, #0]
 800351e:	429a      	cmp	r2, r3
 8003520:	d803      	bhi.n	800352a <HAL_SPI_Transmit+0x204>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003528:	d102      	bne.n	8003530 <HAL_SPI_Transmit+0x20a>
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003534:	e026      	b.n	8003584 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d1cd      	bne.n	80034dc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	6839      	ldr	r1, [r7, #0]
 8003544:	68f8      	ldr	r0, [r7, #12]
 8003546:	f000 fa63 	bl	8003a10 <SPI_EndRxTxTransaction>
 800354a:	4603      	mov	r3, r0
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2220      	movs	r2, #32
 8003554:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d10a      	bne.n	8003574 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800355e:	2300      	movs	r3, #0
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	613b      	str	r3, [r7, #16]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	613b      	str	r3, [r7, #16]
 8003572:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003578:	2b00      	cmp	r3, #0
 800357a:	d002      	beq.n	8003582 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	77fb      	strb	r3, [r7, #31]
 8003580:	e000      	b.n	8003584 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003582:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003594:	7ffb      	ldrb	r3, [r7, #31]
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08c      	sub	sp, #48	; 0x30
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	607a      	str	r2, [r7, #4]
 80035aa:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80035ac:	2301      	movs	r3, #1
 80035ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80035b0:	2300      	movs	r3, #0
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <HAL_SPI_TransmitReceive+0x26>
 80035c0:	2302      	movs	r3, #2
 80035c2:	e18a      	b.n	80038da <HAL_SPI_TransmitReceive+0x33c>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2201      	movs	r2, #1
 80035c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035cc:	f7fe fece 	bl	800236c <HAL_GetTick>
 80035d0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80035d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80035e2:	887b      	ldrh	r3, [r7, #2]
 80035e4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035e6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d00f      	beq.n	800360e <HAL_SPI_TransmitReceive+0x70>
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035f4:	d107      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <HAL_SPI_TransmitReceive+0x68>
 80035fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003606:	2302      	movs	r3, #2
 8003608:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800360c:	e15b      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d005      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x82>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d002      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x82>
 800361a:	887b      	ldrh	r3, [r7, #2]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d103      	bne.n	8003628 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003626:	e14e      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b04      	cmp	r3, #4
 8003632:	d003      	beq.n	800363c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2205      	movs	r2, #5
 8003638:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2200      	movs	r2, #0
 8003640:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	887a      	ldrh	r2, [r7, #2]
 8003652:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	68ba      	ldr	r2, [r7, #8]
 8003658:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	887a      	ldrh	r2, [r7, #2]
 800365e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	887a      	ldrh	r2, [r7, #2]
 8003664:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367c:	2b40      	cmp	r3, #64	; 0x40
 800367e:	d007      	beq.n	8003690 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003698:	d178      	bne.n	800378c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d002      	beq.n	80036a8 <HAL_SPI_TransmitReceive+0x10a>
 80036a2:	8b7b      	ldrh	r3, [r7, #26]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d166      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ac:	881a      	ldrh	r2, [r3, #0]
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	1c9a      	adds	r2, r3, #2
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036cc:	e053      	b.n	8003776 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11b      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x176>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d016      	beq.n	8003714 <HAL_SPI_TransmitReceive+0x176>
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d113      	bne.n	8003714 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	881a      	ldrh	r2, [r3, #0]
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	1c9a      	adds	r2, r3, #2
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003706:	b29b      	uxth	r3, r3
 8003708:	3b01      	subs	r3, #1
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003710:	2300      	movs	r3, #0
 8003712:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b01      	cmp	r3, #1
 8003720:	d119      	bne.n	8003756 <HAL_SPI_TransmitReceive+0x1b8>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003726:	b29b      	uxth	r3, r3
 8003728:	2b00      	cmp	r3, #0
 800372a:	d014      	beq.n	8003756 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	b292      	uxth	r2, r2
 8003738:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	1c9a      	adds	r2, r3, #2
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003748:	b29b      	uxth	r3, r3
 800374a:	3b01      	subs	r3, #1
 800374c:	b29a      	uxth	r2, r3
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003752:	2301      	movs	r3, #1
 8003754:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003756:	f7fe fe09 	bl	800236c <HAL_GetTick>
 800375a:	4602      	mov	r2, r0
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003762:	429a      	cmp	r2, r3
 8003764:	d807      	bhi.n	8003776 <HAL_SPI_TransmitReceive+0x1d8>
 8003766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d003      	beq.n	8003776 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003774:	e0a7      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1a6      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x130>
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1a1      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x130>
 800378a:	e07c      	b.n	8003886 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d002      	beq.n	800379a <HAL_SPI_TransmitReceive+0x1fc>
 8003794:	8b7b      	ldrh	r3, [r7, #26]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d16b      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	330c      	adds	r3, #12
 80037a4:	7812      	ldrb	r2, [r2, #0]
 80037a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	3b01      	subs	r3, #1
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c0:	e057      	b.n	8003872 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d11c      	bne.n	800380a <HAL_SPI_TransmitReceive+0x26c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d017      	beq.n	800380a <HAL_SPI_TransmitReceive+0x26c>
 80037da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d114      	bne.n	800380a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	330c      	adds	r3, #12
 80037ea:	7812      	ldrb	r2, [r2, #0]
 80037ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	1c5a      	adds	r2, r3, #1
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003806:	2300      	movs	r3, #0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0301 	and.w	r3, r3, #1
 8003814:	2b01      	cmp	r3, #1
 8003816:	d119      	bne.n	800384c <HAL_SPI_TransmitReceive+0x2ae>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381c:	b29b      	uxth	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d014      	beq.n	800384c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	1c5a      	adds	r2, r3, #1
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383e:	b29b      	uxth	r3, r3
 8003840:	3b01      	subs	r3, #1
 8003842:	b29a      	uxth	r2, r3
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003848:	2301      	movs	r3, #1
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800384c:	f7fe fd8e 	bl	800236c <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003858:	429a      	cmp	r2, r3
 800385a:	d803      	bhi.n	8003864 <HAL_SPI_TransmitReceive+0x2c6>
 800385c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003862:	d102      	bne.n	800386a <HAL_SPI_TransmitReceive+0x2cc>
 8003864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003870:	e029      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d1a2      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x224>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003880:	b29b      	uxth	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d19d      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003888:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 f8c0 	bl	8003a10 <SPI_EndRxTxTransaction>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d006      	beq.n	80038a4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003896:	2301      	movs	r3, #1
 8003898:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80038a2:	e010      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10b      	bne.n	80038c4 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ac:	2300      	movs	r3, #0
 80038ae:	617b      	str	r3, [r7, #20]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e000      	b.n	80038c6 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80038c4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2200      	movs	r2, #0
 80038d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80038d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3730      	adds	r7, #48	; 0x30
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80038e2:	b480      	push	{r7}
 80038e4:	b083      	sub	sp, #12
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038f0:	b2db      	uxtb	r3, r3
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	370c      	adds	r7, #12
 80038f6:	46bd      	mov	sp, r7
 80038f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fc:	4770      	bx	lr
	...

08003900 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b088      	sub	sp, #32
 8003904:	af00      	add	r7, sp, #0
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	60b9      	str	r1, [r7, #8]
 800390a:	603b      	str	r3, [r7, #0]
 800390c:	4613      	mov	r3, r2
 800390e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003910:	f7fe fd2c 	bl	800236c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003918:	1a9b      	subs	r3, r3, r2
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	4413      	add	r3, r2
 800391e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003920:	f7fe fd24 	bl	800236c <HAL_GetTick>
 8003924:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003926:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	015b      	lsls	r3, r3, #5
 800392c:	0d1b      	lsrs	r3, r3, #20
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003936:	e054      	b.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800393e:	d050      	beq.n	80039e2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003940:	f7fe fd14 	bl	800236c <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	69bb      	ldr	r3, [r7, #24]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	429a      	cmp	r2, r3
 800394e:	d902      	bls.n	8003956 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d13d      	bne.n	80039d2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003964:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396e:	d111      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003978:	d004      	beq.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003982:	d107      	bne.n	8003994 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003992:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003998:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800399c:	d10f      	bne.n	80039be <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2201      	movs	r2, #1
 80039c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e017      	b.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	3b01      	subs	r3, #1
 80039e0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d19b      	bne.n	8003938 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3720      	adds	r7, #32
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000008 	.word	0x20000008

08003a10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b088      	sub	sp, #32
 8003a14:	af02      	add	r7, sp, #8
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <SPI_EndRxTxTransaction+0x7c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1b      	ldr	r2, [pc, #108]	; (8003a90 <SPI_EndRxTxTransaction+0x80>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0d5b      	lsrs	r3, r3, #21
 8003a28:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a2c:	fb02 f303 	mul.w	r3, r2, r3
 8003a30:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3a:	d112      	bne.n	8003a62 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2200      	movs	r2, #0
 8003a44:	2180      	movs	r1, #128	; 0x80
 8003a46:	68f8      	ldr	r0, [r7, #12]
 8003a48:	f7ff ff5a 	bl	8003900 <SPI_WaitFlagStateUntilTimeout>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d016      	beq.n	8003a80 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a56:	f043 0220 	orr.w	r2, r3, #32
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e00f      	b.n	8003a82 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d00a      	beq.n	8003a7e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a78:	2b80      	cmp	r3, #128	; 0x80
 8003a7a:	d0f2      	beq.n	8003a62 <SPI_EndRxTxTransaction+0x52>
 8003a7c:	e000      	b.n	8003a80 <SPI_EndRxTxTransaction+0x70>
        break;
 8003a7e:	bf00      	nop
  }

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000008 	.word	0x20000008
 8003a90:	165e9f81 	.word	0x165e9f81

08003a94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e041      	b.n	8003b2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d106      	bne.n	8003ac0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f7fe faa2 	bl	8002004 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	3304      	adds	r3, #4
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	4610      	mov	r0, r2
 8003ad4:	f000 fa24 	bl	8003f20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2201      	movs	r2, #1
 8003b0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2201      	movs	r2, #1
 8003b14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3708      	adds	r7, #8
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d122      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	2b02      	cmp	r3, #2
 8003b54:	d11b      	bne.n	8003b8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f06f 0202 	mvn.w	r2, #2
 8003b5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	699b      	ldr	r3, [r3, #24]
 8003b6c:	f003 0303 	and.w	r3, r3, #3
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9b5 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003b7a:	e005      	b.n	8003b88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 f9a7 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f9b8 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d122      	bne.n	8003be2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	f003 0304 	and.w	r3, r3, #4
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d11b      	bne.n	8003be2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0204 	mvn.w	r2, #4
 8003bb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f98b 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003bce:	e005      	b.n	8003bdc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f97d 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f98e 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d122      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11b      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f06f 0208 	mvn.w	r2, #8
 8003c06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2204      	movs	r2, #4
 8003c0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	69db      	ldr	r3, [r3, #28]
 8003c14:	f003 0303 	and.w	r3, r3, #3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d003      	beq.n	8003c24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f961 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003c22:	e005      	b.n	8003c30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f953 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 f964 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2200      	movs	r2, #0
 8003c34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d122      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d11b      	bne.n	8003c8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0210 	mvn.w	r2, #16
 8003c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2208      	movs	r2, #8
 8003c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d003      	beq.n	8003c78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f937 	bl	8003ee4 <HAL_TIM_IC_CaptureCallback>
 8003c76:	e005      	b.n	8003c84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c78:	6878      	ldr	r0, [r7, #4]
 8003c7a:	f000 f929 	bl	8003ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f93a 	bl	8003ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d10e      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f003 0301 	and.w	r3, r3, #1
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d107      	bne.n	8003cb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f06f 0201 	mvn.w	r2, #1
 8003cae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f7fe f901 	bl	8001eb8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d10e      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68db      	ldr	r3, [r3, #12]
 8003cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d107      	bne.n	8003ce2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fab1 	bl	8004244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d10e      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68db      	ldr	r3, [r3, #12]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cfa:	2b40      	cmp	r3, #64	; 0x40
 8003cfc:	d107      	bne.n	8003d0e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 f8ff 	bl	8003f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d10e      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	f003 0320 	and.w	r3, r3, #32
 8003d26:	2b20      	cmp	r3, #32
 8003d28:	d107      	bne.n	8003d3a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f06f 0220 	mvn.w	r2, #32
 8003d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fa7b 	bl	8004230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d3a:	bf00      	nop
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d42:	b580      	push	{r7, lr}
 8003d44:	b084      	sub	sp, #16
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
 8003d4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d101      	bne.n	8003d5e <HAL_TIM_ConfigClockSource+0x1c>
 8003d5a:	2302      	movs	r3, #2
 8003d5c:	e0b4      	b.n	8003ec8 <HAL_TIM_ConfigClockSource+0x186>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2202      	movs	r2, #2
 8003d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d7c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d84:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68ba      	ldr	r2, [r7, #8]
 8003d8c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d96:	d03e      	beq.n	8003e16 <HAL_TIM_ConfigClockSource+0xd4>
 8003d98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9c:	f200 8087 	bhi.w	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da4:	f000 8086 	beq.w	8003eb4 <HAL_TIM_ConfigClockSource+0x172>
 8003da8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dac:	d87f      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dae:	2b70      	cmp	r3, #112	; 0x70
 8003db0:	d01a      	beq.n	8003de8 <HAL_TIM_ConfigClockSource+0xa6>
 8003db2:	2b70      	cmp	r3, #112	; 0x70
 8003db4:	d87b      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003db6:	2b60      	cmp	r3, #96	; 0x60
 8003db8:	d050      	beq.n	8003e5c <HAL_TIM_ConfigClockSource+0x11a>
 8003dba:	2b60      	cmp	r3, #96	; 0x60
 8003dbc:	d877      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dbe:	2b50      	cmp	r3, #80	; 0x50
 8003dc0:	d03c      	beq.n	8003e3c <HAL_TIM_ConfigClockSource+0xfa>
 8003dc2:	2b50      	cmp	r3, #80	; 0x50
 8003dc4:	d873      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dc6:	2b40      	cmp	r3, #64	; 0x40
 8003dc8:	d058      	beq.n	8003e7c <HAL_TIM_ConfigClockSource+0x13a>
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d86f      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dce:	2b30      	cmp	r3, #48	; 0x30
 8003dd0:	d064      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x15a>
 8003dd2:	2b30      	cmp	r3, #48	; 0x30
 8003dd4:	d86b      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dd6:	2b20      	cmp	r3, #32
 8003dd8:	d060      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x15a>
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d867      	bhi.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d05c      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x15a>
 8003de2:	2b10      	cmp	r3, #16
 8003de4:	d05a      	beq.n	8003e9c <HAL_TIM_ConfigClockSource+0x15a>
 8003de6:	e062      	b.n	8003eae <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6818      	ldr	r0, [r3, #0]
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	6899      	ldr	r1, [r3, #8]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	685a      	ldr	r2, [r3, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	f000 f98c 	bl	8004114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e0a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	68ba      	ldr	r2, [r7, #8]
 8003e12:	609a      	str	r2, [r3, #8]
      break;
 8003e14:	e04f      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6818      	ldr	r0, [r3, #0]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	685a      	ldr	r2, [r3, #4]
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	f000 f975 	bl	8004114 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	689a      	ldr	r2, [r3, #8]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e38:	609a      	str	r2, [r3, #8]
      break;
 8003e3a:	e03c      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	6859      	ldr	r1, [r3, #4]
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	68db      	ldr	r3, [r3, #12]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	f000 f8e9 	bl	8004020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2150      	movs	r1, #80	; 0x50
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 f942 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e5a:	e02c      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6818      	ldr	r0, [r3, #0]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	6859      	ldr	r1, [r3, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f000 f908 	bl	800407e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	2160      	movs	r1, #96	; 0x60
 8003e74:	4618      	mov	r0, r3
 8003e76:	f000 f932 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e7a:	e01c      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6818      	ldr	r0, [r3, #0]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	6859      	ldr	r1, [r3, #4]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	f000 f8c9 	bl	8004020 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2140      	movs	r1, #64	; 0x40
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 f922 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003e9a:	e00c      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681a      	ldr	r2, [r3, #0]
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4619      	mov	r1, r3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	f000 f919 	bl	80040de <TIM_ITRx_SetConfig>
      break;
 8003eac:	e003      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb2:	e000      	b.n	8003eb6 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eb4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3710      	adds	r7, #16
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b083      	sub	sp, #12
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr

08003f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a34      	ldr	r2, [pc, #208]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d00f      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f3e:	d00b      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	4a31      	ldr	r2, [pc, #196]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d007      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	4a30      	ldr	r2, [pc, #192]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d003      	beq.n	8003f58 <TIM_Base_SetConfig+0x38>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4a2f      	ldr	r2, [pc, #188]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a25      	ldr	r2, [pc, #148]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d01b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d017      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	4a22      	ldr	r2, [pc, #136]	; (8004008 <TIM_Base_SetConfig+0xe8>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4a21      	ldr	r2, [pc, #132]	; (800400c <TIM_Base_SetConfig+0xec>)
 8003f86:	4293      	cmp	r3, r2
 8003f88:	d00f      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a20      	ldr	r2, [pc, #128]	; (8004010 <TIM_Base_SetConfig+0xf0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00b      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4a1f      	ldr	r2, [pc, #124]	; (8004014 <TIM_Base_SetConfig+0xf4>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d007      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a1e      	ldr	r2, [pc, #120]	; (8004018 <TIM_Base_SetConfig+0xf8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d003      	beq.n	8003faa <TIM_Base_SetConfig+0x8a>
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <TIM_Base_SetConfig+0xfc>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d108      	bne.n	8003fbc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
 8003fb6:	68fa      	ldr	r2, [r7, #12]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a08      	ldr	r2, [pc, #32]	; (8004004 <TIM_Base_SetConfig+0xe4>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d103      	bne.n	8003ff0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	691a      	ldr	r2, [r3, #16]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	615a      	str	r2, [r3, #20]
}
 8003ff6:	bf00      	nop
 8003ff8:	3714      	adds	r7, #20
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	40010000 	.word	0x40010000
 8004008:	40000400 	.word	0x40000400
 800400c:	40000800 	.word	0x40000800
 8004010:	40000c00 	.word	0x40000c00
 8004014:	40014000 	.word	0x40014000
 8004018:	40014400 	.word	0x40014400
 800401c:	40014800 	.word	0x40014800

08004020 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800404a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	011b      	lsls	r3, r3, #4
 8004050:	693a      	ldr	r2, [r7, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 030a 	bic.w	r3, r3, #10
 800405c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	4313      	orrs	r3, r2
 8004064:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	693a      	ldr	r2, [r7, #16]
 800406a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	621a      	str	r2, [r3, #32]
}
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800407e:	b480      	push	{r7}
 8004080:	b087      	sub	sp, #28
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	f023 0210 	bic.w	r2, r3, #16
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	699b      	ldr	r3, [r3, #24]
 800409a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a1b      	ldr	r3, [r3, #32]
 80040a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	031b      	lsls	r3, r3, #12
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	693a      	ldr	r2, [r7, #16]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	693a      	ldr	r2, [r7, #16]
 80040d0:	621a      	str	r2, [r3, #32]
}
 80040d2:	bf00      	nop
 80040d4:	371c      	adds	r7, #28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80040de:	b480      	push	{r7}
 80040e0:	b085      	sub	sp, #20
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f043 0307 	orr.w	r3, r3, #7
 8004100:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68fa      	ldr	r2, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
 8004120:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800412e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	021a      	lsls	r2, r3, #8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	431a      	orrs	r2, r3
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4313      	orrs	r3, r2
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	4313      	orrs	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	697a      	ldr	r2, [r7, #20]
 8004146:	609a      	str	r2, [r3, #8]
}
 8004148:	bf00      	nop
 800414a:	371c      	adds	r7, #28
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e050      	b.n	800420e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a1c      	ldr	r2, [pc, #112]	; (800421c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d018      	beq.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041b8:	d013      	beq.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a18      	ldr	r2, [pc, #96]	; (8004220 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d00e      	beq.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a16      	ldr	r2, [pc, #88]	; (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d009      	beq.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d004      	beq.n	80041e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a13      	ldr	r2, [pc, #76]	; (800422c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d10c      	bne.n	80041fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	68ba      	ldr	r2, [r7, #8]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68ba      	ldr	r2, [r7, #8]
 80041fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2201      	movs	r2, #1
 8004200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3714      	adds	r7, #20
 8004212:	46bd      	mov	sp, r7
 8004214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004218:	4770      	bx	lr
 800421a:	bf00      	nop
 800421c:	40010000 	.word	0x40010000
 8004220:	40000400 	.word	0x40000400
 8004224:	40000800 	.word	0x40000800
 8004228:	40000c00 	.word	0x40000c00
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e03f      	b.n	80042ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004270:	b2db      	uxtb	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	d106      	bne.n	8004284 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f7fd fee8 	bl	8002054 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2224      	movs	r2, #36	; 0x24
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68da      	ldr	r2, [r3, #12]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800429a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f929 	bl	80044f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691a      	ldr	r2, [r3, #16]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	695a      	ldr	r2, [r3, #20]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042e8:	2300      	movs	r3, #0
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b08a      	sub	sp, #40	; 0x28
 80042f6:	af02      	add	r7, sp, #8
 80042f8:	60f8      	str	r0, [r7, #12]
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	603b      	str	r3, [r7, #0]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004302:	2300      	movs	r3, #0
 8004304:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430c:	b2db      	uxtb	r3, r3
 800430e:	2b20      	cmp	r3, #32
 8004310:	d17c      	bne.n	800440c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_Transmit+0x2c>
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e075      	b.n	800440e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UART_Transmit+0x3e>
 800432c:	2302      	movs	r3, #2
 800432e:	e06e      	b.n	800440e <HAL_UART_Transmit+0x11c>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2221      	movs	r2, #33	; 0x21
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004346:	f7fe f811 	bl	800236c <HAL_GetTick>
 800434a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	88fa      	ldrh	r2, [r7, #6]
 8004350:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	88fa      	ldrh	r2, [r7, #6]
 8004356:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004360:	d108      	bne.n	8004374 <HAL_UART_Transmit+0x82>
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d104      	bne.n	8004374 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800436a:	2300      	movs	r3, #0
 800436c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	61bb      	str	r3, [r7, #24]
 8004372:	e003      	b.n	800437c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004384:	e02a      	b.n	80043dc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	9300      	str	r3, [sp, #0]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	2180      	movs	r1, #128	; 0x80
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f840 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 8004396:	4603      	mov	r3, r0
 8004398:	2b00      	cmp	r3, #0
 800439a:	d001      	beq.n	80043a0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800439c:	2303      	movs	r3, #3
 800439e:	e036      	b.n	800440e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d10b      	bne.n	80043be <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	881b      	ldrh	r3, [r3, #0]
 80043aa:	461a      	mov	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043b4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80043b6:	69bb      	ldr	r3, [r7, #24]
 80043b8:	3302      	adds	r3, #2
 80043ba:	61bb      	str	r3, [r7, #24]
 80043bc:	e007      	b.n	80043ce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	781a      	ldrb	r2, [r3, #0]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	3301      	adds	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1cf      	bne.n	8004386 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	9300      	str	r3, [sp, #0]
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	2200      	movs	r2, #0
 80043ee:	2140      	movs	r1, #64	; 0x40
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f000 f810 	bl	8004416 <UART_WaitOnFlagUntilTimeout>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d001      	beq.n	8004400 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e006      	b.n	800440e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2220      	movs	r2, #32
 8004404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004408:	2300      	movs	r3, #0
 800440a:	e000      	b.n	800440e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800440c:	2302      	movs	r3, #2
  }
}
 800440e:	4618      	mov	r0, r3
 8004410:	3720      	adds	r7, #32
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b090      	sub	sp, #64	; 0x40
 800441a:	af00      	add	r7, sp, #0
 800441c:	60f8      	str	r0, [r7, #12]
 800441e:	60b9      	str	r1, [r7, #8]
 8004420:	603b      	str	r3, [r7, #0]
 8004422:	4613      	mov	r3, r2
 8004424:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004426:	e050      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800442a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800442e:	d04c      	beq.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <UART_WaitOnFlagUntilTimeout+0x30>
 8004436:	f7fd ff99 	bl	800236c <HAL_GetTick>
 800443a:	4602      	mov	r2, r0
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	1ad3      	subs	r3, r2, r3
 8004440:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004442:	429a      	cmp	r2, r3
 8004444:	d241      	bcs.n	80044ca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800445c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	330c      	adds	r3, #12
 8004464:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004466:	637a      	str	r2, [r7, #52]	; 0x34
 8004468:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800446c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e5      	bne.n	8004446 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3314      	adds	r3, #20
 8004480:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	613b      	str	r3, [r7, #16]
   return(result);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	63bb      	str	r3, [r7, #56]	; 0x38
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3314      	adds	r3, #20
 8004498:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800449a:	623a      	str	r2, [r7, #32]
 800449c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	69f9      	ldr	r1, [r7, #28]
 80044a0:	6a3a      	ldr	r2, [r7, #32]
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80044a8:	69bb      	ldr	r3, [r7, #24]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2220      	movs	r2, #32
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00f      	b.n	80044ea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	4013      	ands	r3, r2
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	bf0c      	ite	eq
 80044da:	2301      	moveq	r3, #1
 80044dc:	2300      	movne	r3, #0
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
 80044e2:	79fb      	ldrb	r3, [r7, #7]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d09f      	beq.n	8004428 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3740      	adds	r7, #64	; 0x40
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}
	...

080044f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044f8:	b09f      	sub	sp, #124	; 0x7c
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450a:	68d9      	ldr	r1, [r3, #12]
 800450c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	ea40 0301 	orr.w	r3, r0, r1
 8004514:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	431a      	orrs	r2, r3
 8004520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004522:	695b      	ldr	r3, [r3, #20]
 8004524:	431a      	orrs	r2, r3
 8004526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4313      	orrs	r3, r2
 800452c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800452e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004538:	f021 010c 	bic.w	r1, r1, #12
 800453c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004542:	430b      	orrs	r3, r1
 8004544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004546:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	695b      	ldr	r3, [r3, #20]
 800454c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004550:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004552:	6999      	ldr	r1, [r3, #24]
 8004554:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	ea40 0301 	orr.w	r3, r0, r1
 800455c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800455e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4bc5      	ldr	r3, [pc, #788]	; (8004878 <UART_SetConfig+0x384>)
 8004564:	429a      	cmp	r2, r3
 8004566:	d004      	beq.n	8004572 <UART_SetConfig+0x7e>
 8004568:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	4bc3      	ldr	r3, [pc, #780]	; (800487c <UART_SetConfig+0x388>)
 800456e:	429a      	cmp	r2, r3
 8004570:	d103      	bne.n	800457a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004572:	f7fe fe3b 	bl	80031ec <HAL_RCC_GetPCLK2Freq>
 8004576:	6778      	str	r0, [r7, #116]	; 0x74
 8004578:	e002      	b.n	8004580 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800457a:	f7fe fe23 	bl	80031c4 <HAL_RCC_GetPCLK1Freq>
 800457e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004588:	f040 80b6 	bne.w	80046f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800458c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458e:	461c      	mov	r4, r3
 8004590:	f04f 0500 	mov.w	r5, #0
 8004594:	4622      	mov	r2, r4
 8004596:	462b      	mov	r3, r5
 8004598:	1891      	adds	r1, r2, r2
 800459a:	6439      	str	r1, [r7, #64]	; 0x40
 800459c:	415b      	adcs	r3, r3
 800459e:	647b      	str	r3, [r7, #68]	; 0x44
 80045a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045a4:	1912      	adds	r2, r2, r4
 80045a6:	eb45 0303 	adc.w	r3, r5, r3
 80045aa:	f04f 0000 	mov.w	r0, #0
 80045ae:	f04f 0100 	mov.w	r1, #0
 80045b2:	00d9      	lsls	r1, r3, #3
 80045b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045b8:	00d0      	lsls	r0, r2, #3
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	1911      	adds	r1, r2, r4
 80045c0:	6639      	str	r1, [r7, #96]	; 0x60
 80045c2:	416b      	adcs	r3, r5
 80045c4:	667b      	str	r3, [r7, #100]	; 0x64
 80045c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	461a      	mov	r2, r3
 80045cc:	f04f 0300 	mov.w	r3, #0
 80045d0:	1891      	adds	r1, r2, r2
 80045d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045d4:	415b      	adcs	r3, r3
 80045d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80045e0:	f7fc f95c 	bl	800089c <__aeabi_uldivmod>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4ba5      	ldr	r3, [pc, #660]	; (8004880 <UART_SetConfig+0x38c>)
 80045ea:	fba3 2302 	umull	r2, r3, r3, r2
 80045ee:	095b      	lsrs	r3, r3, #5
 80045f0:	011e      	lsls	r6, r3, #4
 80045f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045f4:	461c      	mov	r4, r3
 80045f6:	f04f 0500 	mov.w	r5, #0
 80045fa:	4622      	mov	r2, r4
 80045fc:	462b      	mov	r3, r5
 80045fe:	1891      	adds	r1, r2, r2
 8004600:	6339      	str	r1, [r7, #48]	; 0x30
 8004602:	415b      	adcs	r3, r3
 8004604:	637b      	str	r3, [r7, #52]	; 0x34
 8004606:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800460a:	1912      	adds	r2, r2, r4
 800460c:	eb45 0303 	adc.w	r3, r5, r3
 8004610:	f04f 0000 	mov.w	r0, #0
 8004614:	f04f 0100 	mov.w	r1, #0
 8004618:	00d9      	lsls	r1, r3, #3
 800461a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800461e:	00d0      	lsls	r0, r2, #3
 8004620:	4602      	mov	r2, r0
 8004622:	460b      	mov	r3, r1
 8004624:	1911      	adds	r1, r2, r4
 8004626:	65b9      	str	r1, [r7, #88]	; 0x58
 8004628:	416b      	adcs	r3, r5
 800462a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800462c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	461a      	mov	r2, r3
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	1891      	adds	r1, r2, r2
 8004638:	62b9      	str	r1, [r7, #40]	; 0x28
 800463a:	415b      	adcs	r3, r3
 800463c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800463e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004642:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004646:	f7fc f929 	bl	800089c <__aeabi_uldivmod>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4b8c      	ldr	r3, [pc, #560]	; (8004880 <UART_SetConfig+0x38c>)
 8004650:	fba3 1302 	umull	r1, r3, r3, r2
 8004654:	095b      	lsrs	r3, r3, #5
 8004656:	2164      	movs	r1, #100	; 0x64
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	3332      	adds	r3, #50	; 0x32
 8004662:	4a87      	ldr	r2, [pc, #540]	; (8004880 <UART_SetConfig+0x38c>)
 8004664:	fba2 2303 	umull	r2, r3, r2, r3
 8004668:	095b      	lsrs	r3, r3, #5
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004670:	441e      	add	r6, r3
 8004672:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004674:	4618      	mov	r0, r3
 8004676:	f04f 0100 	mov.w	r1, #0
 800467a:	4602      	mov	r2, r0
 800467c:	460b      	mov	r3, r1
 800467e:	1894      	adds	r4, r2, r2
 8004680:	623c      	str	r4, [r7, #32]
 8004682:	415b      	adcs	r3, r3
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
 8004686:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800468a:	1812      	adds	r2, r2, r0
 800468c:	eb41 0303 	adc.w	r3, r1, r3
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	f04f 0500 	mov.w	r5, #0
 8004698:	00dd      	lsls	r5, r3, #3
 800469a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800469e:	00d4      	lsls	r4, r2, #3
 80046a0:	4622      	mov	r2, r4
 80046a2:	462b      	mov	r3, r5
 80046a4:	1814      	adds	r4, r2, r0
 80046a6:	653c      	str	r4, [r7, #80]	; 0x50
 80046a8:	414b      	adcs	r3, r1
 80046aa:	657b      	str	r3, [r7, #84]	; 0x54
 80046ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	461a      	mov	r2, r3
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	1891      	adds	r1, r2, r2
 80046b8:	61b9      	str	r1, [r7, #24]
 80046ba:	415b      	adcs	r3, r3
 80046bc:	61fb      	str	r3, [r7, #28]
 80046be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80046c6:	f7fc f8e9 	bl	800089c <__aeabi_uldivmod>
 80046ca:	4602      	mov	r2, r0
 80046cc:	460b      	mov	r3, r1
 80046ce:	4b6c      	ldr	r3, [pc, #432]	; (8004880 <UART_SetConfig+0x38c>)
 80046d0:	fba3 1302 	umull	r1, r3, r3, r2
 80046d4:	095b      	lsrs	r3, r3, #5
 80046d6:	2164      	movs	r1, #100	; 0x64
 80046d8:	fb01 f303 	mul.w	r3, r1, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	00db      	lsls	r3, r3, #3
 80046e0:	3332      	adds	r3, #50	; 0x32
 80046e2:	4a67      	ldr	r2, [pc, #412]	; (8004880 <UART_SetConfig+0x38c>)
 80046e4:	fba2 2303 	umull	r2, r3, r2, r3
 80046e8:	095b      	lsrs	r3, r3, #5
 80046ea:	f003 0207 	and.w	r2, r3, #7
 80046ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4432      	add	r2, r6
 80046f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046f6:	e0b9      	b.n	800486c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fa:	461c      	mov	r4, r3
 80046fc:	f04f 0500 	mov.w	r5, #0
 8004700:	4622      	mov	r2, r4
 8004702:	462b      	mov	r3, r5
 8004704:	1891      	adds	r1, r2, r2
 8004706:	6139      	str	r1, [r7, #16]
 8004708:	415b      	adcs	r3, r3
 800470a:	617b      	str	r3, [r7, #20]
 800470c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004710:	1912      	adds	r2, r2, r4
 8004712:	eb45 0303 	adc.w	r3, r5, r3
 8004716:	f04f 0000 	mov.w	r0, #0
 800471a:	f04f 0100 	mov.w	r1, #0
 800471e:	00d9      	lsls	r1, r3, #3
 8004720:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004724:	00d0      	lsls	r0, r2, #3
 8004726:	4602      	mov	r2, r0
 8004728:	460b      	mov	r3, r1
 800472a:	eb12 0804 	adds.w	r8, r2, r4
 800472e:	eb43 0905 	adc.w	r9, r3, r5
 8004732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	4618      	mov	r0, r3
 8004738:	f04f 0100 	mov.w	r1, #0
 800473c:	f04f 0200 	mov.w	r2, #0
 8004740:	f04f 0300 	mov.w	r3, #0
 8004744:	008b      	lsls	r3, r1, #2
 8004746:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800474a:	0082      	lsls	r2, r0, #2
 800474c:	4640      	mov	r0, r8
 800474e:	4649      	mov	r1, r9
 8004750:	f7fc f8a4 	bl	800089c <__aeabi_uldivmod>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4b49      	ldr	r3, [pc, #292]	; (8004880 <UART_SetConfig+0x38c>)
 800475a:	fba3 2302 	umull	r2, r3, r3, r2
 800475e:	095b      	lsrs	r3, r3, #5
 8004760:	011e      	lsls	r6, r3, #4
 8004762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004764:	4618      	mov	r0, r3
 8004766:	f04f 0100 	mov.w	r1, #0
 800476a:	4602      	mov	r2, r0
 800476c:	460b      	mov	r3, r1
 800476e:	1894      	adds	r4, r2, r2
 8004770:	60bc      	str	r4, [r7, #8]
 8004772:	415b      	adcs	r3, r3
 8004774:	60fb      	str	r3, [r7, #12]
 8004776:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800477a:	1812      	adds	r2, r2, r0
 800477c:	eb41 0303 	adc.w	r3, r1, r3
 8004780:	f04f 0400 	mov.w	r4, #0
 8004784:	f04f 0500 	mov.w	r5, #0
 8004788:	00dd      	lsls	r5, r3, #3
 800478a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800478e:	00d4      	lsls	r4, r2, #3
 8004790:	4622      	mov	r2, r4
 8004792:	462b      	mov	r3, r5
 8004794:	1814      	adds	r4, r2, r0
 8004796:	64bc      	str	r4, [r7, #72]	; 0x48
 8004798:	414b      	adcs	r3, r1
 800479a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800479c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f04f 0100 	mov.w	r1, #0
 80047a6:	f04f 0200 	mov.w	r2, #0
 80047aa:	f04f 0300 	mov.w	r3, #0
 80047ae:	008b      	lsls	r3, r1, #2
 80047b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80047b4:	0082      	lsls	r2, r0, #2
 80047b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80047ba:	f7fc f86f 	bl	800089c <__aeabi_uldivmod>
 80047be:	4602      	mov	r2, r0
 80047c0:	460b      	mov	r3, r1
 80047c2:	4b2f      	ldr	r3, [pc, #188]	; (8004880 <UART_SetConfig+0x38c>)
 80047c4:	fba3 1302 	umull	r1, r3, r3, r2
 80047c8:	095b      	lsrs	r3, r3, #5
 80047ca:	2164      	movs	r1, #100	; 0x64
 80047cc:	fb01 f303 	mul.w	r3, r1, r3
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	3332      	adds	r3, #50	; 0x32
 80047d6:	4a2a      	ldr	r2, [pc, #168]	; (8004880 <UART_SetConfig+0x38c>)
 80047d8:	fba2 2303 	umull	r2, r3, r2, r3
 80047dc:	095b      	lsrs	r3, r3, #5
 80047de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047e2:	441e      	add	r6, r3
 80047e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047e6:	4618      	mov	r0, r3
 80047e8:	f04f 0100 	mov.w	r1, #0
 80047ec:	4602      	mov	r2, r0
 80047ee:	460b      	mov	r3, r1
 80047f0:	1894      	adds	r4, r2, r2
 80047f2:	603c      	str	r4, [r7, #0]
 80047f4:	415b      	adcs	r3, r3
 80047f6:	607b      	str	r3, [r7, #4]
 80047f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047fc:	1812      	adds	r2, r2, r0
 80047fe:	eb41 0303 	adc.w	r3, r1, r3
 8004802:	f04f 0400 	mov.w	r4, #0
 8004806:	f04f 0500 	mov.w	r5, #0
 800480a:	00dd      	lsls	r5, r3, #3
 800480c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004810:	00d4      	lsls	r4, r2, #3
 8004812:	4622      	mov	r2, r4
 8004814:	462b      	mov	r3, r5
 8004816:	eb12 0a00 	adds.w	sl, r2, r0
 800481a:	eb43 0b01 	adc.w	fp, r3, r1
 800481e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	4618      	mov	r0, r3
 8004824:	f04f 0100 	mov.w	r1, #0
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	008b      	lsls	r3, r1, #2
 8004832:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004836:	0082      	lsls	r2, r0, #2
 8004838:	4650      	mov	r0, sl
 800483a:	4659      	mov	r1, fp
 800483c:	f7fc f82e 	bl	800089c <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <UART_SetConfig+0x38c>)
 8004846:	fba3 1302 	umull	r1, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	2164      	movs	r1, #100	; 0x64
 800484e:	fb01 f303 	mul.w	r3, r1, r3
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	011b      	lsls	r3, r3, #4
 8004856:	3332      	adds	r3, #50	; 0x32
 8004858:	4a09      	ldr	r2, [pc, #36]	; (8004880 <UART_SetConfig+0x38c>)
 800485a:	fba2 2303 	umull	r2, r3, r2, r3
 800485e:	095b      	lsrs	r3, r3, #5
 8004860:	f003 020f 	and.w	r2, r3, #15
 8004864:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4432      	add	r2, r6
 800486a:	609a      	str	r2, [r3, #8]
}
 800486c:	bf00      	nop
 800486e:	377c      	adds	r7, #124	; 0x7c
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40011000 	.word	0x40011000
 800487c:	40011400 	.word	0x40011400
 8004880:	51eb851f 	.word	0x51eb851f

08004884 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004888:	4904      	ldr	r1, [pc, #16]	; (800489c <MX_FATFS_Init+0x18>)
 800488a:	4805      	ldr	r0, [pc, #20]	; (80048a0 <MX_FATFS_Init+0x1c>)
 800488c:	f003 fb28 	bl	8007ee0 <FATFS_LinkDriver>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <MX_FATFS_Init+0x20>)
 8004896:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004898:	bf00      	nop
 800489a:	bd80      	pop	{r7, pc}
 800489c:	2001d730 	.word	0x2001d730
 80048a0:	20000014 	.word	0x20000014
 80048a4:	2001d734 	.word	0x2001d734

080048a8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80048ac:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	4603      	mov	r3, r0
 80048c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	  Stat = SD_disk_initialize(pdrv);
 80048c2:	79fb      	ldrb	r3, [r7, #7]
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7fc fb1f 	bl	8000f08 <SD_disk_initialize>
 80048ca:	4603      	mov	r3, r0
 80048cc:	b2da      	uxtb	r2, r3
 80048ce:	4b04      	ldr	r3, [pc, #16]	; (80048e0 <USER_initialize+0x28>)
 80048d0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80048d2:	4b03      	ldr	r3, [pc, #12]	; (80048e0 <USER_initialize+0x28>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	20000011 	.word	0x20000011

080048e4 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	4603      	mov	r3, r0
 80048ec:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status (pdrv);
 80048ee:	79fb      	ldrb	r3, [r7, #7]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7fc fbf3 	bl	80010dc <SD_disk_status>
 80048f6:	4603      	mov	r3, r0
 80048f8:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3708      	adds	r7, #8
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b084      	sub	sp, #16
 8004906:	af00      	add	r7, sp, #0
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
 800490c:	603b      	str	r3, [r7, #0]
 800490e:	4603      	mov	r3, r0
 8004910:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 8004912:	7bf8      	ldrb	r0, [r7, #15]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	68b9      	ldr	r1, [r7, #8]
 800491a:	f7fc fbf5 	bl	8001108 <SD_disk_read>
 800491e:	4603      	mov	r3, r0
 8004920:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}

0800492a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b084      	sub	sp, #16
 800492e:	af00      	add	r7, sp, #0
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
 8004936:	4603      	mov	r3, r0
 8004938:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write (pdrv, buff, sector, count);
 800493a:	7bf8      	ldrb	r0, [r7, #15]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68b9      	ldr	r1, [r7, #8]
 8004942:	f7fc fc4b 	bl	80011dc <SD_disk_write>
 8004946:	4603      	mov	r3, r0
 8004948:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b084      	sub	sp, #16
 8004956:	af00      	add	r7, sp, #0
 8004958:	4603      	mov	r3, r0
 800495a:	603a      	str	r2, [r7, #0]
 800495c:	71fb      	strb	r3, [r7, #7]
 800495e:	460b      	mov	r3, r1
 8004960:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	73fb      	strb	r3, [r7, #15]
    return SD_disk_ioctl (pdrv, cmd, buff);
 8004966:	79fb      	ldrb	r3, [r7, #7]
 8004968:	79b9      	ldrb	r1, [r7, #6]
 800496a:	683a      	ldr	r2, [r7, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7fc fcb9 	bl	80012e4 <SD_disk_ioctl>
 8004972:	4603      	mov	r3, r0
 8004974:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	4603      	mov	r3, r0
 8004988:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800498a:	79fb      	ldrb	r3, [r7, #7]
 800498c:	4a08      	ldr	r2, [pc, #32]	; (80049b0 <disk_status+0x30>)
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	4413      	add	r3, r2
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	79fa      	ldrb	r2, [r7, #7]
 8004998:	4905      	ldr	r1, [pc, #20]	; (80049b0 <disk_status+0x30>)
 800499a:	440a      	add	r2, r1
 800499c:	7a12      	ldrb	r2, [r2, #8]
 800499e:	4610      	mov	r0, r2
 80049a0:	4798      	blx	r3
 80049a2:	4603      	mov	r3, r0
 80049a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80049a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	200002f0 	.word	0x200002f0

080049b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b084      	sub	sp, #16
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	4603      	mov	r3, r0
 80049bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80049be:	2300      	movs	r3, #0
 80049c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80049c2:	79fb      	ldrb	r3, [r7, #7]
 80049c4:	4a0d      	ldr	r2, [pc, #52]	; (80049fc <disk_initialize+0x48>)
 80049c6:	5cd3      	ldrb	r3, [r2, r3]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d111      	bne.n	80049f0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80049cc:	79fb      	ldrb	r3, [r7, #7]
 80049ce:	4a0b      	ldr	r2, [pc, #44]	; (80049fc <disk_initialize+0x48>)
 80049d0:	2101      	movs	r1, #1
 80049d2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	4a09      	ldr	r2, [pc, #36]	; (80049fc <disk_initialize+0x48>)
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4413      	add	r3, r2
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	79fa      	ldrb	r2, [r7, #7]
 80049e2:	4906      	ldr	r1, [pc, #24]	; (80049fc <disk_initialize+0x48>)
 80049e4:	440a      	add	r2, r1
 80049e6:	7a12      	ldrb	r2, [r2, #8]
 80049e8:	4610      	mov	r0, r2
 80049ea:	4798      	blx	r3
 80049ec:	4603      	mov	r3, r0
 80049ee:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	200002f0 	.word	0x200002f0

08004a00 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004a00:	b590      	push	{r4, r7, lr}
 8004a02:	b087      	sub	sp, #28
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60b9      	str	r1, [r7, #8]
 8004a08:	607a      	str	r2, [r7, #4]
 8004a0a:	603b      	str	r3, [r7, #0]
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	4a0a      	ldr	r2, [pc, #40]	; (8004a3c <disk_read+0x3c>)
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	4413      	add	r3, r2
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	689c      	ldr	r4, [r3, #8]
 8004a1c:	7bfb      	ldrb	r3, [r7, #15]
 8004a1e:	4a07      	ldr	r2, [pc, #28]	; (8004a3c <disk_read+0x3c>)
 8004a20:	4413      	add	r3, r2
 8004a22:	7a18      	ldrb	r0, [r3, #8]
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	68b9      	ldr	r1, [r7, #8]
 8004a2a:	47a0      	blx	r4
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	371c      	adds	r7, #28
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd90      	pop	{r4, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	200002f0 	.word	0x200002f0

08004a40 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004a40:	b590      	push	{r4, r7, lr}
 8004a42:	b087      	sub	sp, #28
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	60b9      	str	r1, [r7, #8]
 8004a48:	607a      	str	r2, [r7, #4]
 8004a4a:	603b      	str	r3, [r7, #0]
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004a50:	7bfb      	ldrb	r3, [r7, #15]
 8004a52:	4a0a      	ldr	r2, [pc, #40]	; (8004a7c <disk_write+0x3c>)
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	4413      	add	r3, r2
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68dc      	ldr	r4, [r3, #12]
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	4a07      	ldr	r2, [pc, #28]	; (8004a7c <disk_write+0x3c>)
 8004a60:	4413      	add	r3, r2
 8004a62:	7a18      	ldrb	r0, [r3, #8]
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	47a0      	blx	r4
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	371c      	adds	r7, #28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd90      	pop	{r4, r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	200002f0 	.word	0x200002f0

08004a80 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	4603      	mov	r3, r0
 8004a88:	603a      	str	r2, [r7, #0]
 8004a8a:	71fb      	strb	r3, [r7, #7]
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004a90:	79fb      	ldrb	r3, [r7, #7]
 8004a92:	4a09      	ldr	r2, [pc, #36]	; (8004ab8 <disk_ioctl+0x38>)
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	4413      	add	r3, r2
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	79fa      	ldrb	r2, [r7, #7]
 8004a9e:	4906      	ldr	r1, [pc, #24]	; (8004ab8 <disk_ioctl+0x38>)
 8004aa0:	440a      	add	r2, r1
 8004aa2:	7a10      	ldrb	r0, [r2, #8]
 8004aa4:	79b9      	ldrb	r1, [r7, #6]
 8004aa6:	683a      	ldr	r2, [r7, #0]
 8004aa8:	4798      	blx	r3
 8004aaa:	4603      	mov	r3, r0
 8004aac:	73fb      	strb	r3, [r7, #15]
  return res;
 8004aae:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	200002f0 	.word	0x200002f0

08004abc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004acc:	89fb      	ldrh	r3, [r7, #14]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	b21a      	sxth	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	b21b      	sxth	r3, r3
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	b21b      	sxth	r3, r3
 8004adc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004ade:	89fb      	ldrh	r3, [r7, #14]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3714      	adds	r7, #20
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	3303      	adds	r3, #3
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	021b      	lsls	r3, r3, #8
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	3202      	adds	r2, #2
 8004b04:	7812      	ldrb	r2, [r2, #0]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	021b      	lsls	r3, r3, #8
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	3201      	adds	r2, #1
 8004b12:	7812      	ldrb	r2, [r2, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	7812      	ldrb	r2, [r2, #0]
 8004b20:	4313      	orrs	r3, r2
 8004b22:	60fb      	str	r3, [r7, #12]
	return rv;
 8004b24:	68fb      	ldr	r3, [r7, #12]
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8004b32:	b480      	push	{r7}
 8004b34:	b083      	sub	sp, #12
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	1c5a      	adds	r2, r3, #1
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	887a      	ldrh	r2, [r7, #2]
 8004b46:	b2d2      	uxtb	r2, r2
 8004b48:	701a      	strb	r2, [r3, #0]
 8004b4a:	887b      	ldrh	r3, [r7, #2]
 8004b4c:	0a1b      	lsrs	r3, r3, #8
 8004b4e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	1c5a      	adds	r2, r3, #1
 8004b54:	607a      	str	r2, [r7, #4]
 8004b56:	887a      	ldrh	r2, [r7, #2]
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	701a      	strb	r2, [r3, #0]
}
 8004b5c:	bf00      	nop
 8004b5e:	370c      	adds	r7, #12
 8004b60:	46bd      	mov	sp, r7
 8004b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b66:	4770      	bx	lr

08004b68 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b083      	sub	sp, #12
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
 8004b70:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	1c5a      	adds	r2, r3, #1
 8004b76:	607a      	str	r2, [r7, #4]
 8004b78:	683a      	ldr	r2, [r7, #0]
 8004b7a:	b2d2      	uxtb	r2, r2
 8004b7c:	701a      	strb	r2, [r3, #0]
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	0a1b      	lsrs	r3, r3, #8
 8004b82:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	607a      	str	r2, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	b2d2      	uxtb	r2, r2
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	683a      	ldr	r2, [r7, #0]
 8004b9e:	b2d2      	uxtb	r2, r2
 8004ba0:	701a      	strb	r2, [r3, #0]
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	0a1b      	lsrs	r3, r3, #8
 8004ba6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	683a      	ldr	r2, [r7, #0]
 8004bb0:	b2d2      	uxtb	r2, r2
 8004bb2:	701a      	strb	r2, [r3, #0]
}
 8004bb4:	bf00      	nop
 8004bb6:	370c      	adds	r7, #12
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr

08004bc0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00d      	beq.n	8004bf6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	1c53      	adds	r3, r2, #1
 8004bde:	613b      	str	r3, [r7, #16]
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	1c59      	adds	r1, r3, #1
 8004be4:	6179      	str	r1, [r7, #20]
 8004be6:	7812      	ldrb	r2, [r2, #0]
 8004be8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	607b      	str	r3, [r7, #4]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f1      	bne.n	8004bda <mem_cpy+0x1a>
	}
}
 8004bf6:	bf00      	nop
 8004bf8:	371c      	adds	r7, #28
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr

08004c02 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8004c02:	b480      	push	{r7}
 8004c04:	b087      	sub	sp, #28
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	60f8      	str	r0, [r7, #12]
 8004c0a:	60b9      	str	r1, [r7, #8]
 8004c0c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	1c5a      	adds	r2, r3, #1
 8004c16:	617a      	str	r2, [r7, #20]
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	3b01      	subs	r3, #1
 8004c22:	607b      	str	r3, [r7, #4]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f3      	bne.n	8004c12 <mem_set+0x10>
}
 8004c2a:	bf00      	nop
 8004c2c:	bf00      	nop
 8004c2e:	371c      	adds	r7, #28
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004c38:	b480      	push	{r7}
 8004c3a:	b089      	sub	sp, #36	; 0x24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	4619      	mov	r1, r3
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	61ba      	str	r2, [r7, #24]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	1acb      	subs	r3, r1, r3
 8004c64:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	607b      	str	r3, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <mem_cmp+0x40>
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d0eb      	beq.n	8004c50 <mem_cmp+0x18>

	return r;
 8004c78:	697b      	ldr	r3, [r7, #20]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3724      	adds	r7, #36	; 0x24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004c90:	e002      	b.n	8004c98 <chk_chr+0x12>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3301      	adds	r3, #1
 8004c96:	607b      	str	r3, [r7, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	781b      	ldrb	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <chk_chr+0x26>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d1f2      	bne.n	8004c92 <chk_chr+0xc>
	return *str;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	781b      	ldrb	r3, [r3, #0]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	e029      	b.n	8004d24 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004cd0:	4a27      	ldr	r2, [pc, #156]	; (8004d70 <chk_lock+0xb4>)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	4413      	add	r3, r2
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d01d      	beq.n	8004d1a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004cde:	4a24      	ldr	r2, [pc, #144]	; (8004d70 <chk_lock+0xb4>)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	011b      	lsls	r3, r3, #4
 8004ce4:	4413      	add	r3, r2
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	d116      	bne.n	8004d1e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8004cf0:	4a1f      	ldr	r2, [pc, #124]	; (8004d70 <chk_lock+0xb4>)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	011b      	lsls	r3, r3, #4
 8004cf6:	4413      	add	r3, r2
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d10c      	bne.n	8004d1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d04:	4a1a      	ldr	r2, [pc, #104]	; (8004d70 <chk_lock+0xb4>)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	011b      	lsls	r3, r3, #4
 8004d0a:	4413      	add	r3, r2
 8004d0c:	3308      	adds	r3, #8
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d102      	bne.n	8004d1e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004d18:	e007      	b.n	8004d2a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3301      	adds	r3, #1
 8004d22:	60fb      	str	r3, [r7, #12]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d9d2      	bls.n	8004cd0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d109      	bne.n	8004d44 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d102      	bne.n	8004d3c <chk_lock+0x80>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d101      	bne.n	8004d40 <chk_lock+0x84>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	e010      	b.n	8004d62 <chk_lock+0xa6>
 8004d40:	2312      	movs	r3, #18
 8004d42:	e00e      	b.n	8004d62 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d108      	bne.n	8004d5c <chk_lock+0xa0>
 8004d4a:	4a09      	ldr	r2, [pc, #36]	; (8004d70 <chk_lock+0xb4>)
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	4413      	add	r3, r2
 8004d52:	330c      	adds	r3, #12
 8004d54:	881b      	ldrh	r3, [r3, #0]
 8004d56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d5a:	d101      	bne.n	8004d60 <chk_lock+0xa4>
 8004d5c:	2310      	movs	r3, #16
 8004d5e:	e000      	b.n	8004d62 <chk_lock+0xa6>
 8004d60:	2300      	movs	r3, #0
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3714      	adds	r7, #20
 8004d66:	46bd      	mov	sp, r7
 8004d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6c:	4770      	bx	lr
 8004d6e:	bf00      	nop
 8004d70:	200000d0 	.word	0x200000d0

08004d74 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	607b      	str	r3, [r7, #4]
 8004d7e:	e002      	b.n	8004d86 <enq_lock+0x12>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	3301      	adds	r3, #1
 8004d84:	607b      	str	r3, [r7, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d806      	bhi.n	8004d9a <enq_lock+0x26>
 8004d8c:	4a09      	ldr	r2, [pc, #36]	; (8004db4 <enq_lock+0x40>)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	011b      	lsls	r3, r3, #4
 8004d92:	4413      	add	r3, r2
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f2      	bne.n	8004d80 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	bf14      	ite	ne
 8004da0:	2301      	movne	r3, #1
 8004da2:	2300      	moveq	r3, #0
 8004da4:	b2db      	uxtb	r3, r3
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	370c      	adds	r7, #12
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	200000d0 	.word	0x200000d0

08004db8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e01f      	b.n	8004e08 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004dc8:	4a41      	ldr	r2, [pc, #260]	; (8004ed0 <inc_lock+0x118>)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	011b      	lsls	r3, r3, #4
 8004dce:	4413      	add	r3, r2
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d113      	bne.n	8004e02 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004dda:	4a3d      	ldr	r2, [pc, #244]	; (8004ed0 <inc_lock+0x118>)
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	011b      	lsls	r3, r3, #4
 8004de0:	4413      	add	r3, r2
 8004de2:	3304      	adds	r3, #4
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004dea:	429a      	cmp	r2, r3
 8004dec:	d109      	bne.n	8004e02 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8004dee:	4a38      	ldr	r2, [pc, #224]	; (8004ed0 <inc_lock+0x118>)
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	011b      	lsls	r3, r3, #4
 8004df4:	4413      	add	r3, r2
 8004df6:	3308      	adds	r3, #8
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d006      	beq.n	8004e10 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	3301      	adds	r3, #1
 8004e06:	60fb      	str	r3, [r7, #12]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d9dc      	bls.n	8004dc8 <inc_lock+0x10>
 8004e0e:	e000      	b.n	8004e12 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8004e10:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b02      	cmp	r3, #2
 8004e16:	d132      	bne.n	8004e7e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	e002      	b.n	8004e24 <inc_lock+0x6c>
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	3301      	adds	r3, #1
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d806      	bhi.n	8004e38 <inc_lock+0x80>
 8004e2a:	4a29      	ldr	r2, [pc, #164]	; (8004ed0 <inc_lock+0x118>)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	011b      	lsls	r3, r3, #4
 8004e30:	4413      	add	r3, r2
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1f2      	bne.n	8004e1e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2b02      	cmp	r3, #2
 8004e3c:	d101      	bne.n	8004e42 <inc_lock+0x8a>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e040      	b.n	8004ec4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	4922      	ldr	r1, [pc, #136]	; (8004ed0 <inc_lock+0x118>)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	011b      	lsls	r3, r3, #4
 8004e4c:	440b      	add	r3, r1
 8004e4e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	491e      	ldr	r1, [pc, #120]	; (8004ed0 <inc_lock+0x118>)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	440b      	add	r3, r1
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	491a      	ldr	r1, [pc, #104]	; (8004ed0 <inc_lock+0x118>)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	440b      	add	r3, r1
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004e70:	4a17      	ldr	r2, [pc, #92]	; (8004ed0 <inc_lock+0x118>)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	011b      	lsls	r3, r3, #4
 8004e76:	4413      	add	r3, r2
 8004e78:	330c      	adds	r3, #12
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d009      	beq.n	8004e98 <inc_lock+0xe0>
 8004e84:	4a12      	ldr	r2, [pc, #72]	; (8004ed0 <inc_lock+0x118>)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	4413      	add	r3, r2
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	881b      	ldrh	r3, [r3, #0]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d001      	beq.n	8004e98 <inc_lock+0xe0>
 8004e94:	2300      	movs	r3, #0
 8004e96:	e015      	b.n	8004ec4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <inc_lock+0xf8>
 8004e9e:	4a0c      	ldr	r2, [pc, #48]	; (8004ed0 <inc_lock+0x118>)
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	011b      	lsls	r3, r3, #4
 8004ea4:	4413      	add	r3, r2
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	b29a      	uxth	r2, r3
 8004eae:	e001      	b.n	8004eb4 <inc_lock+0xfc>
 8004eb0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004eb4:	4906      	ldr	r1, [pc, #24]	; (8004ed0 <inc_lock+0x118>)
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	011b      	lsls	r3, r3, #4
 8004eba:	440b      	add	r3, r1
 8004ebc:	330c      	adds	r3, #12
 8004ebe:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3301      	adds	r3, #1
}
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	3714      	adds	r7, #20
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr
 8004ed0:	200000d0 	.word	0x200000d0

08004ed4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	607b      	str	r3, [r7, #4]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d825      	bhi.n	8004f34 <dec_lock+0x60>
		n = Files[i].ctr;
 8004ee8:	4a17      	ldr	r2, [pc, #92]	; (8004f48 <dec_lock+0x74>)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	011b      	lsls	r3, r3, #4
 8004eee:	4413      	add	r3, r2
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	881b      	ldrh	r3, [r3, #0]
 8004ef4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004ef6:	89fb      	ldrh	r3, [r7, #14]
 8004ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004efc:	d101      	bne.n	8004f02 <dec_lock+0x2e>
 8004efe:	2300      	movs	r3, #0
 8004f00:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d002      	beq.n	8004f0e <dec_lock+0x3a>
 8004f08:	89fb      	ldrh	r3, [r7, #14]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8004f0e:	4a0e      	ldr	r2, [pc, #56]	; (8004f48 <dec_lock+0x74>)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	4413      	add	r3, r2
 8004f16:	330c      	adds	r3, #12
 8004f18:	89fa      	ldrh	r2, [r7, #14]
 8004f1a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004f1c:	89fb      	ldrh	r3, [r7, #14]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d105      	bne.n	8004f2e <dec_lock+0x5a>
 8004f22:	4a09      	ldr	r2, [pc, #36]	; (8004f48 <dec_lock+0x74>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	4413      	add	r3, r2
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	737b      	strb	r3, [r7, #13]
 8004f32:	e001      	b.n	8004f38 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004f34:	2302      	movs	r3, #2
 8004f36:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004f38:	7b7b      	ldrb	r3, [r7, #13]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	200000d0 	.word	0x200000d0

08004f4c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004f54:	2300      	movs	r3, #0
 8004f56:	60fb      	str	r3, [r7, #12]
 8004f58:	e010      	b.n	8004f7c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004f5a:	4a0d      	ldr	r2, [pc, #52]	; (8004f90 <clear_lock+0x44>)
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	011b      	lsls	r3, r3, #4
 8004f60:	4413      	add	r3, r2
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d105      	bne.n	8004f76 <clear_lock+0x2a>
 8004f6a:	4a09      	ldr	r2, [pc, #36]	; (8004f90 <clear_lock+0x44>)
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	011b      	lsls	r3, r3, #4
 8004f70:	4413      	add	r3, r2
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	3301      	adds	r3, #1
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d9eb      	bls.n	8004f5a <clear_lock+0xe>
	}
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	3714      	adds	r7, #20
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr
 8004f90:	200000d0 	.word	0x200000d0

08004f94 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b086      	sub	sp, #24
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	78db      	ldrb	r3, [r3, #3]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d034      	beq.n	8005012 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fac:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	7858      	ldrb	r0, [r3, #1]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004fb8:	2301      	movs	r3, #1
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	f7ff fd40 	bl	8004a40 <disk_write>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d002      	beq.n	8004fcc <sync_window+0x38>
			res = FR_DISK_ERR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	73fb      	strb	r3, [r7, #15]
 8004fca:	e022      	b.n	8005012 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	1ad2      	subs	r2, r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d217      	bcs.n	8005012 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	789b      	ldrb	r3, [r3, #2]
 8004fe6:	613b      	str	r3, [r7, #16]
 8004fe8:	e010      	b.n	800500c <sync_window+0x78>
					wsect += fs->fsize;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	7858      	ldrb	r0, [r3, #1]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8004ffe:	2301      	movs	r3, #1
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	f7ff fd1d 	bl	8004a40 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	3b01      	subs	r3, #1
 800500a:	613b      	str	r3, [r7, #16]
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d8eb      	bhi.n	8004fea <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005012:	7bfb      	ldrb	r3, [r7, #15]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3718      	adds	r7, #24
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005026:	2300      	movs	r3, #0
 8005028:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d01b      	beq.n	800506c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f7ff ffad 	bl	8004f94 <sync_window>
 800503a:	4603      	mov	r3, r0
 800503c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800503e:	7bfb      	ldrb	r3, [r7, #15]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d113      	bne.n	800506c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	7858      	ldrb	r0, [r3, #1]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800504e:	2301      	movs	r3, #1
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	f7ff fcd5 	bl	8004a00 <disk_read>
 8005056:	4603      	mov	r3, r0
 8005058:	2b00      	cmp	r3, #0
 800505a:	d004      	beq.n	8005066 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800505c:	f04f 33ff 	mov.w	r3, #4294967295
 8005060:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005062:	2301      	movs	r3, #1
 8005064:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	683a      	ldr	r2, [r7, #0]
 800506a:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 800506c:	7bfb      	ldrb	r3, [r7, #15]
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
	...

08005078 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff87 	bl	8004f94 <sync_window>
 8005086:	4603      	mov	r3, r0
 8005088:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d159      	bne.n	8005144 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	781b      	ldrb	r3, [r3, #0]
 8005094:	2b03      	cmp	r3, #3
 8005096:	d149      	bne.n	800512c <sync_fs+0xb4>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	791b      	ldrb	r3, [r3, #4]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d145      	bne.n	800512c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	899b      	ldrh	r3, [r3, #12]
 80050aa:	461a      	mov	r2, r3
 80050ac:	2100      	movs	r1, #0
 80050ae:	f7ff fda8 	bl	8004c02 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3338      	adds	r3, #56	; 0x38
 80050b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80050ba:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff fd37 	bl	8004b32 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	3338      	adds	r3, #56	; 0x38
 80050c8:	4921      	ldr	r1, [pc, #132]	; (8005150 <sync_fs+0xd8>)
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7ff fd4c 	bl	8004b68 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	3338      	adds	r3, #56	; 0x38
 80050d4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80050d8:	491e      	ldr	r1, [pc, #120]	; (8005154 <sync_fs+0xdc>)
 80050da:	4618      	mov	r0, r3
 80050dc:	f7ff fd44 	bl	8004b68 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	3338      	adds	r3, #56	; 0x38
 80050e4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	699b      	ldr	r3, [r3, #24]
 80050ec:	4619      	mov	r1, r3
 80050ee:	4610      	mov	r0, r2
 80050f0:	f7ff fd3a 	bl	8004b68 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3338      	adds	r3, #56	; 0x38
 80050f8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	4619      	mov	r1, r3
 8005102:	4610      	mov	r0, r2
 8005104:	f7ff fd30 	bl	8004b68 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	7858      	ldrb	r0, [r3, #1]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005120:	2301      	movs	r3, #1
 8005122:	f7ff fc8d 	bl	8004a40 <disk_write>
			fs->fsi_flag = 0;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	785b      	ldrb	r3, [r3, #1]
 8005130:	2200      	movs	r2, #0
 8005132:	2100      	movs	r1, #0
 8005134:	4618      	mov	r0, r3
 8005136:	f7ff fca3 	bl	8004a80 <disk_ioctl>
 800513a:	4603      	mov	r3, r0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <sync_fs+0xcc>
 8005140:	2301      	movs	r3, #1
 8005142:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005144:	7bfb      	ldrb	r3, [r7, #15]
}
 8005146:	4618      	mov	r0, r3
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	41615252 	.word	0x41615252
 8005154:	61417272 	.word	0x61417272

08005158 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	3b02      	subs	r3, #2
 8005166:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	69db      	ldr	r3, [r3, #28]
 800516c:	3b02      	subs	r3, #2
 800516e:	683a      	ldr	r2, [r7, #0]
 8005170:	429a      	cmp	r2, r3
 8005172:	d301      	bcc.n	8005178 <clust2sect+0x20>
 8005174:	2300      	movs	r3, #0
 8005176:	e008      	b.n	800518a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	895b      	ldrh	r3, [r3, #10]
 800517c:	461a      	mov	r2, r3
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	fb03 f202 	mul.w	r2, r3, r2
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	4413      	add	r3, r2
}
 800518a:	4618      	mov	r0, r3
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr

08005196 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
 800519e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d904      	bls.n	80051b6 <get_fat+0x20>
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	69db      	ldr	r3, [r3, #28]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d302      	bcc.n	80051bc <get_fat+0x26>
		val = 1;	/* Internal error */
 80051b6:	2301      	movs	r3, #1
 80051b8:	617b      	str	r3, [r7, #20]
 80051ba:	e0bb      	b.n	8005334 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80051bc:	f04f 33ff 	mov.w	r3, #4294967295
 80051c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	2b03      	cmp	r3, #3
 80051c8:	f000 8083 	beq.w	80052d2 <get_fat+0x13c>
 80051cc:	2b03      	cmp	r3, #3
 80051ce:	f300 80a7 	bgt.w	8005320 <get_fat+0x18a>
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d002      	beq.n	80051dc <get_fat+0x46>
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d056      	beq.n	8005288 <get_fat+0xf2>
 80051da:	e0a1      	b.n	8005320 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	68fa      	ldr	r2, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	899b      	ldrh	r3, [r3, #12]
 80051f2:	4619      	mov	r1, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80051fa:	4413      	add	r3, r2
 80051fc:	4619      	mov	r1, r3
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f7ff ff0c 	bl	800501c <move_window>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	f040 808d 	bne.w	8005326 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	60fa      	str	r2, [r7, #12]
 8005212:	693a      	ldr	r2, [r7, #16]
 8005214:	8992      	ldrh	r2, [r2, #12]
 8005216:	fbb3 f1f2 	udiv	r1, r3, r2
 800521a:	fb02 f201 	mul.w	r2, r2, r1
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4413      	add	r3, r2
 8005224:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005228:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	899b      	ldrh	r3, [r3, #12]
 8005232:	4619      	mov	r1, r3
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	fbb3 f3f1 	udiv	r3, r3, r1
 800523a:	4413      	add	r3, r2
 800523c:	4619      	mov	r1, r3
 800523e:	6938      	ldr	r0, [r7, #16]
 8005240:	f7ff feec 	bl	800501c <move_window>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d16f      	bne.n	800532a <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	899b      	ldrh	r3, [r3, #12]
 800524e:	461a      	mov	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	fbb3 f1f2 	udiv	r1, r3, r2
 8005256:	fb02 f201 	mul.w	r2, r2, r1
 800525a:	1a9b      	subs	r3, r3, r2
 800525c:	693a      	ldr	r2, [r7, #16]
 800525e:	4413      	add	r3, r2
 8005260:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005264:	021b      	lsls	r3, r3, #8
 8005266:	461a      	mov	r2, r3
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4313      	orrs	r3, r2
 800526c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	f003 0301 	and.w	r3, r3, #1
 8005274:	2b00      	cmp	r3, #0
 8005276:	d002      	beq.n	800527e <get_fat+0xe8>
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	091b      	lsrs	r3, r3, #4
 800527c:	e002      	b.n	8005284 <get_fat+0xee>
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005284:	617b      	str	r3, [r7, #20]
			break;
 8005286:	e055      	b.n	8005334 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	899b      	ldrh	r3, [r3, #12]
 8005290:	085b      	lsrs	r3, r3, #1
 8005292:	b29b      	uxth	r3, r3
 8005294:	4619      	mov	r1, r3
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	fbb3 f3f1 	udiv	r3, r3, r1
 800529c:	4413      	add	r3, r2
 800529e:	4619      	mov	r1, r3
 80052a0:	6938      	ldr	r0, [r7, #16]
 80052a2:	f7ff febb 	bl	800501c <move_window>
 80052a6:	4603      	mov	r3, r0
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d140      	bne.n	800532e <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	005b      	lsls	r3, r3, #1
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	8992      	ldrh	r2, [r2, #12]
 80052ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80052be:	fb02 f200 	mul.w	r2, r2, r0
 80052c2:	1a9b      	subs	r3, r3, r2
 80052c4:	440b      	add	r3, r1
 80052c6:	4618      	mov	r0, r3
 80052c8:	f7ff fbf8 	bl	8004abc <ld_word>
 80052cc:	4603      	mov	r3, r0
 80052ce:	617b      	str	r3, [r7, #20]
			break;
 80052d0:	e030      	b.n	8005334 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	899b      	ldrh	r3, [r3, #12]
 80052da:	089b      	lsrs	r3, r3, #2
 80052dc:	b29b      	uxth	r3, r3
 80052de:	4619      	mov	r1, r3
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80052e6:	4413      	add	r3, r2
 80052e8:	4619      	mov	r1, r3
 80052ea:	6938      	ldr	r0, [r7, #16]
 80052ec:	f7ff fe96 	bl	800501c <move_window>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d11d      	bne.n	8005332 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	8992      	ldrh	r2, [r2, #12]
 8005304:	fbb3 f0f2 	udiv	r0, r3, r2
 8005308:	fb02 f200 	mul.w	r2, r2, r0
 800530c:	1a9b      	subs	r3, r3, r2
 800530e:	440b      	add	r3, r1
 8005310:	4618      	mov	r0, r3
 8005312:	f7ff fbeb 	bl	8004aec <ld_dword>
 8005316:	4603      	mov	r3, r0
 8005318:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800531c:	617b      	str	r3, [r7, #20]
			break;
 800531e:	e009      	b.n	8005334 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005320:	2301      	movs	r3, #1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	e006      	b.n	8005334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005326:	bf00      	nop
 8005328:	e004      	b.n	8005334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800532a:	bf00      	nop
 800532c:	e002      	b.n	8005334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800532e:	bf00      	nop
 8005330:	e000      	b.n	8005334 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005332:	bf00      	nop
		}
	}

	return val;
 8005334:	697b      	ldr	r3, [r7, #20]
}
 8005336:	4618      	mov	r0, r3
 8005338:	3718      	adds	r7, #24
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800533e:	b590      	push	{r4, r7, lr}
 8005340:	b089      	sub	sp, #36	; 0x24
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800534a:	2302      	movs	r3, #2
 800534c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b01      	cmp	r3, #1
 8005352:	f240 8102 	bls.w	800555a <put_fat+0x21c>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	69db      	ldr	r3, [r3, #28]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	429a      	cmp	r2, r3
 800535e:	f080 80fc 	bcs.w	800555a <put_fat+0x21c>
		switch (fs->fs_type) {
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	781b      	ldrb	r3, [r3, #0]
 8005366:	2b03      	cmp	r3, #3
 8005368:	f000 80b6 	beq.w	80054d8 <put_fat+0x19a>
 800536c:	2b03      	cmp	r3, #3
 800536e:	f300 80fd 	bgt.w	800556c <put_fat+0x22e>
 8005372:	2b01      	cmp	r3, #1
 8005374:	d003      	beq.n	800537e <put_fat+0x40>
 8005376:	2b02      	cmp	r3, #2
 8005378:	f000 8083 	beq.w	8005482 <put_fat+0x144>
 800537c:	e0f6      	b.n	800556c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	085b      	lsrs	r3, r3, #1
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	4413      	add	r3, r2
 800538a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	899b      	ldrh	r3, [r3, #12]
 8005394:	4619      	mov	r1, r3
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	fbb3 f3f1 	udiv	r3, r3, r1
 800539c:	4413      	add	r3, r2
 800539e:	4619      	mov	r1, r3
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f7ff fe3b 	bl	800501c <move_window>
 80053a6:	4603      	mov	r3, r0
 80053a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80053aa:	7ffb      	ldrb	r3, [r7, #31]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f040 80d6 	bne.w	800555e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80053b8:	69bb      	ldr	r3, [r7, #24]
 80053ba:	1c5a      	adds	r2, r3, #1
 80053bc:	61ba      	str	r2, [r7, #24]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	8992      	ldrh	r2, [r2, #12]
 80053c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80053c6:	fb02 f200 	mul.w	r2, r2, r0
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	440b      	add	r3, r1
 80053ce:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0301 	and.w	r3, r3, #1
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00d      	beq.n	80053f6 <put_fat+0xb8>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f003 030f 	and.w	r3, r3, #15
 80053e4:	b25a      	sxtb	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	011b      	lsls	r3, r3, #4
 80053ec:	b25b      	sxtb	r3, r3
 80053ee:	4313      	orrs	r3, r2
 80053f0:	b25b      	sxtb	r3, r3
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	e001      	b.n	80053fa <put_fat+0xbc>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	899b      	ldrh	r3, [r3, #12]
 800540c:	4619      	mov	r1, r3
 800540e:	69bb      	ldr	r3, [r7, #24]
 8005410:	fbb3 f3f1 	udiv	r3, r3, r1
 8005414:	4413      	add	r3, r2
 8005416:	4619      	mov	r1, r3
 8005418:	68f8      	ldr	r0, [r7, #12]
 800541a:	f7ff fdff 	bl	800501c <move_window>
 800541e:	4603      	mov	r3, r0
 8005420:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005422:	7ffb      	ldrb	r3, [r7, #31]
 8005424:	2b00      	cmp	r3, #0
 8005426:	f040 809c 	bne.w	8005562 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	899b      	ldrh	r3, [r3, #12]
 8005434:	461a      	mov	r2, r3
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	fbb3 f0f2 	udiv	r0, r3, r2
 800543c:	fb02 f200 	mul.w	r2, r2, r0
 8005440:	1a9b      	subs	r3, r3, r2
 8005442:	440b      	add	r3, r1
 8005444:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f003 0301 	and.w	r3, r3, #1
 800544c:	2b00      	cmp	r3, #0
 800544e:	d003      	beq.n	8005458 <put_fat+0x11a>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	091b      	lsrs	r3, r3, #4
 8005454:	b2db      	uxtb	r3, r3
 8005456:	e00e      	b.n	8005476 <put_fat+0x138>
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	b25b      	sxtb	r3, r3
 800545e:	f023 030f 	bic.w	r3, r3, #15
 8005462:	b25a      	sxtb	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	b25b      	sxtb	r3, r3
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	b25b      	sxtb	r3, r3
 8005470:	4313      	orrs	r3, r2
 8005472:	b25b      	sxtb	r3, r3
 8005474:	b2db      	uxtb	r3, r3
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2201      	movs	r2, #1
 800547e:	70da      	strb	r2, [r3, #3]
			break;
 8005480:	e074      	b.n	800556c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	899b      	ldrh	r3, [r3, #12]
 800548a:	085b      	lsrs	r3, r3, #1
 800548c:	b29b      	uxth	r3, r3
 800548e:	4619      	mov	r1, r3
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	fbb3 f3f1 	udiv	r3, r3, r1
 8005496:	4413      	add	r3, r2
 8005498:	4619      	mov	r1, r3
 800549a:	68f8      	ldr	r0, [r7, #12]
 800549c:	f7ff fdbe 	bl	800501c <move_window>
 80054a0:	4603      	mov	r3, r0
 80054a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054a4:	7ffb      	ldrb	r3, [r7, #31]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d15d      	bne.n	8005566 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	8992      	ldrh	r2, [r2, #12]
 80054b8:	fbb3 f0f2 	udiv	r0, r3, r2
 80054bc:	fb02 f200 	mul.w	r2, r2, r0
 80054c0:	1a9b      	subs	r3, r3, r2
 80054c2:	440b      	add	r3, r1
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	b292      	uxth	r2, r2
 80054c8:	4611      	mov	r1, r2
 80054ca:	4618      	mov	r0, r3
 80054cc:	f7ff fb31 	bl	8004b32 <st_word>
			fs->wflag = 1;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2201      	movs	r2, #1
 80054d4:	70da      	strb	r2, [r3, #3]
			break;
 80054d6:	e049      	b.n	800556c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	899b      	ldrh	r3, [r3, #12]
 80054e0:	089b      	lsrs	r3, r3, #2
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	4619      	mov	r1, r3
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	fbb3 f3f1 	udiv	r3, r3, r1
 80054ec:	4413      	add	r3, r2
 80054ee:	4619      	mov	r1, r3
 80054f0:	68f8      	ldr	r0, [r7, #12]
 80054f2:	f7ff fd93 	bl	800501c <move_window>
 80054f6:	4603      	mov	r3, r0
 80054f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80054fa:	7ffb      	ldrb	r3, [r7, #31]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d134      	bne.n	800556a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f103 0138 	add.w	r1, r3, #56	; 0x38
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	8992      	ldrh	r2, [r2, #12]
 8005514:	fbb3 f0f2 	udiv	r0, r3, r2
 8005518:	fb02 f200 	mul.w	r2, r2, r0
 800551c:	1a9b      	subs	r3, r3, r2
 800551e:	440b      	add	r3, r1
 8005520:	4618      	mov	r0, r3
 8005522:	f7ff fae3 	bl	8004aec <ld_dword>
 8005526:	4603      	mov	r3, r0
 8005528:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800552c:	4323      	orrs	r3, r4
 800552e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005536:	68bb      	ldr	r3, [r7, #8]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	68fa      	ldr	r2, [r7, #12]
 800553c:	8992      	ldrh	r2, [r2, #12]
 800553e:	fbb3 f0f2 	udiv	r0, r3, r2
 8005542:	fb02 f200 	mul.w	r2, r2, r0
 8005546:	1a9b      	subs	r3, r3, r2
 8005548:	440b      	add	r3, r1
 800554a:	6879      	ldr	r1, [r7, #4]
 800554c:	4618      	mov	r0, r3
 800554e:	f7ff fb0b 	bl	8004b68 <st_dword>
			fs->wflag = 1;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2201      	movs	r2, #1
 8005556:	70da      	strb	r2, [r3, #3]
			break;
 8005558:	e008      	b.n	800556c <put_fat+0x22e>
		}
	}
 800555a:	bf00      	nop
 800555c:	e006      	b.n	800556c <put_fat+0x22e>
			if (res != FR_OK) break;
 800555e:	bf00      	nop
 8005560:	e004      	b.n	800556c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005562:	bf00      	nop
 8005564:	e002      	b.n	800556c <put_fat+0x22e>
			if (res != FR_OK) break;
 8005566:	bf00      	nop
 8005568:	e000      	b.n	800556c <put_fat+0x22e>
			if (res != FR_OK) break;
 800556a:	bf00      	nop
	return res;
 800556c:	7ffb      	ldrb	r3, [r7, #31]
}
 800556e:	4618      	mov	r0, r3
 8005570:	3724      	adds	r7, #36	; 0x24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd90      	pop	{r4, r7, pc}

08005576 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b088      	sub	sp, #32
 800557a:	af00      	add	r7, sp, #0
 800557c:	60f8      	str	r0, [r7, #12]
 800557e:	60b9      	str	r1, [r7, #8]
 8005580:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800558c:	68bb      	ldr	r3, [r7, #8]
 800558e:	2b01      	cmp	r3, #1
 8005590:	d904      	bls.n	800559c <remove_chain+0x26>
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	68ba      	ldr	r2, [r7, #8]
 8005598:	429a      	cmp	r2, r3
 800559a:	d301      	bcc.n	80055a0 <remove_chain+0x2a>
 800559c:	2302      	movs	r3, #2
 800559e:	e04b      	b.n	8005638 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00c      	beq.n	80055c0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80055a6:	f04f 32ff 	mov.w	r2, #4294967295
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	69b8      	ldr	r0, [r7, #24]
 80055ae:	f7ff fec6 	bl	800533e <put_fat>
 80055b2:	4603      	mov	r3, r0
 80055b4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80055b6:	7ffb      	ldrb	r3, [r7, #31]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d001      	beq.n	80055c0 <remove_chain+0x4a>
 80055bc:	7ffb      	ldrb	r3, [r7, #31]
 80055be:	e03b      	b.n	8005638 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80055c0:	68b9      	ldr	r1, [r7, #8]
 80055c2:	68f8      	ldr	r0, [r7, #12]
 80055c4:	f7ff fde7 	bl	8005196 <get_fat>
 80055c8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d031      	beq.n	8005634 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	2b01      	cmp	r3, #1
 80055d4:	d101      	bne.n	80055da <remove_chain+0x64>
 80055d6:	2302      	movs	r3, #2
 80055d8:	e02e      	b.n	8005638 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055e0:	d101      	bne.n	80055e6 <remove_chain+0x70>
 80055e2:	2301      	movs	r3, #1
 80055e4:	e028      	b.n	8005638 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80055e6:	2200      	movs	r2, #0
 80055e8:	68b9      	ldr	r1, [r7, #8]
 80055ea:	69b8      	ldr	r0, [r7, #24]
 80055ec:	f7ff fea7 	bl	800533e <put_fat>
 80055f0:	4603      	mov	r3, r0
 80055f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80055f4:	7ffb      	ldrb	r3, [r7, #31]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <remove_chain+0x88>
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	e01c      	b.n	8005638 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	699a      	ldr	r2, [r3, #24]
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	69db      	ldr	r3, [r3, #28]
 8005606:	3b02      	subs	r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d20b      	bcs.n	8005624 <remove_chain+0xae>
			fs->free_clst++;
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	699b      	ldr	r3, [r3, #24]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	69bb      	ldr	r3, [r7, #24]
 8005614:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	791b      	ldrb	r3, [r3, #4]
 800561a:	f043 0301 	orr.w	r3, r3, #1
 800561e:	b2da      	uxtb	r2, r3
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005624:	697b      	ldr	r3, [r7, #20]
 8005626:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	69db      	ldr	r3, [r3, #28]
 800562c:	68ba      	ldr	r2, [r7, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d3c6      	bcc.n	80055c0 <remove_chain+0x4a>
 8005632:	e000      	b.n	8005636 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005634:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005636:	2300      	movs	r3, #0
}
 8005638:	4618      	mov	r0, r3
 800563a:	3720      	adds	r7, #32
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10d      	bne.n	8005672 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d004      	beq.n	800566c <create_chain+0x2c>
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	69ba      	ldr	r2, [r7, #24]
 8005668:	429a      	cmp	r2, r3
 800566a:	d31b      	bcc.n	80056a4 <create_chain+0x64>
 800566c:	2301      	movs	r3, #1
 800566e:	61bb      	str	r3, [r7, #24]
 8005670:	e018      	b.n	80056a4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005672:	6839      	ldr	r1, [r7, #0]
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fd8e 	bl	8005196 <get_fat>
 800567a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d801      	bhi.n	8005686 <create_chain+0x46>
 8005682:	2301      	movs	r3, #1
 8005684:	e070      	b.n	8005768 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800568c:	d101      	bne.n	8005692 <create_chain+0x52>
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	e06a      	b.n	8005768 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	68fa      	ldr	r2, [r7, #12]
 8005698:	429a      	cmp	r2, r3
 800569a:	d201      	bcs.n	80056a0 <create_chain+0x60>
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	e063      	b.n	8005768 <create_chain+0x128>
		scl = clst;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	3301      	adds	r3, #1
 80056ac:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d307      	bcc.n	80056c8 <create_chain+0x88>
				ncl = 2;
 80056b8:	2302      	movs	r3, #2
 80056ba:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d901      	bls.n	80056c8 <create_chain+0x88>
 80056c4:	2300      	movs	r3, #0
 80056c6:	e04f      	b.n	8005768 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f7ff fd63 	bl	8005196 <get_fat>
 80056d0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00e      	beq.n	80056f6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d003      	beq.n	80056e6 <create_chain+0xa6>
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d101      	bne.n	80056ea <create_chain+0xaa>
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	e03e      	b.n	8005768 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80056ea:	69fa      	ldr	r2, [r7, #28]
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d1da      	bne.n	80056a8 <create_chain+0x68>
 80056f2:	2300      	movs	r3, #0
 80056f4:	e038      	b.n	8005768 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80056f6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80056f8:	f04f 32ff 	mov.w	r2, #4294967295
 80056fc:	69f9      	ldr	r1, [r7, #28]
 80056fe:	6938      	ldr	r0, [r7, #16]
 8005700:	f7ff fe1d 	bl	800533e <put_fat>
 8005704:	4603      	mov	r3, r0
 8005706:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005708:	7dfb      	ldrb	r3, [r7, #23]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <create_chain+0xe2>
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d006      	beq.n	8005722 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005714:	69fa      	ldr	r2, [r7, #28]
 8005716:	6839      	ldr	r1, [r7, #0]
 8005718:	6938      	ldr	r0, [r7, #16]
 800571a:	f7ff fe10 	bl	800533e <put_fat>
 800571e:	4603      	mov	r3, r0
 8005720:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005722:	7dfb      	ldrb	r3, [r7, #23]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <create_chain+0x116>
		fs->last_clst = ncl;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	69fa      	ldr	r2, [r7, #28]
 800572c:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	3b02      	subs	r3, #2
 8005738:	429a      	cmp	r2, r3
 800573a:	d804      	bhi.n	8005746 <create_chain+0x106>
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	1e5a      	subs	r2, r3, #1
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	791b      	ldrb	r3, [r3, #4]
 800574a:	f043 0301 	orr.w	r3, r3, #1
 800574e:	b2da      	uxtb	r2, r3
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	711a      	strb	r2, [r3, #4]
 8005754:	e007      	b.n	8005766 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005756:	7dfb      	ldrb	r3, [r7, #23]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d102      	bne.n	8005762 <create_chain+0x122>
 800575c:	f04f 33ff 	mov.w	r3, #4294967295
 8005760:	e000      	b.n	8005764 <create_chain+0x124>
 8005762:	2301      	movs	r3, #1
 8005764:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005766:	69fb      	ldr	r3, [r7, #28]
}
 8005768:	4618      	mov	r0, r3
 800576a:	3720      	adds	r7, #32
 800576c:	46bd      	mov	sp, r7
 800576e:	bd80      	pop	{r7, pc}

08005770 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005770:	b480      	push	{r7}
 8005772:	b087      	sub	sp, #28
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
 8005778:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005784:	3304      	adds	r3, #4
 8005786:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	899b      	ldrh	r3, [r3, #12]
 800578c:	461a      	mov	r2, r3
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	fbb3 f3f2 	udiv	r3, r3, r2
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	8952      	ldrh	r2, [r2, #10]
 8005798:	fbb3 f3f2 	udiv	r3, r3, r2
 800579c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	1d1a      	adds	r2, r3, #4
 80057a2:	613a      	str	r2, [r7, #16]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <clmt_clust+0x42>
 80057ae:	2300      	movs	r3, #0
 80057b0:	e010      	b.n	80057d4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d307      	bcc.n	80057ca <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	617b      	str	r3, [r7, #20]
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	3304      	adds	r3, #4
 80057c6:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80057c8:	e7e9      	b.n	800579e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80057ca:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	4413      	add	r3, r2
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	371c      	adds	r7, #28
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b086      	sub	sp, #24
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057f6:	d204      	bcs.n	8005802 <dir_sdi+0x22>
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d001      	beq.n	8005806 <dir_sdi+0x26>
		return FR_INT_ERR;
 8005802:	2302      	movs	r3, #2
 8005804:	e071      	b.n	80058ea <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <dir_sdi+0x46>
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	2b02      	cmp	r3, #2
 800581e:	d902      	bls.n	8005826 <dir_sdi+0x46>
		clst = fs->dirbase;
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005824:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d10c      	bne.n	8005846 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	8912      	ldrh	r2, [r2, #8]
 8005834:	4293      	cmp	r3, r2
 8005836:	d301      	bcc.n	800583c <dir_sdi+0x5c>
 8005838:	2302      	movs	r3, #2
 800583a:	e056      	b.n	80058ea <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	61da      	str	r2, [r3, #28]
 8005844:	e02d      	b.n	80058a2 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	895b      	ldrh	r3, [r3, #10]
 800584a:	461a      	mov	r2, r3
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	899b      	ldrh	r3, [r3, #12]
 8005850:	fb03 f302 	mul.w	r3, r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005856:	e019      	b.n	800588c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	6979      	ldr	r1, [r7, #20]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff fc9a 	bl	8005196 <get_fat>
 8005862:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800586a:	d101      	bne.n	8005870 <dir_sdi+0x90>
 800586c:	2301      	movs	r3, #1
 800586e:	e03c      	b.n	80058ea <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d904      	bls.n	8005880 <dir_sdi+0xa0>
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	697a      	ldr	r2, [r7, #20]
 800587c:	429a      	cmp	r2, r3
 800587e:	d301      	bcc.n	8005884 <dir_sdi+0xa4>
 8005880:	2302      	movs	r3, #2
 8005882:	e032      	b.n	80058ea <dir_sdi+0x10a>
			ofs -= csz;
 8005884:	683a      	ldr	r2, [r7, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	429a      	cmp	r2, r3
 8005892:	d2e1      	bcs.n	8005858 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8005894:	6979      	ldr	r1, [r7, #20]
 8005896:	6938      	ldr	r0, [r7, #16]
 8005898:	f7ff fc5e 	bl	8005158 <clust2sect>
 800589c:	4602      	mov	r2, r0
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	697a      	ldr	r2, [r7, #20]
 80058a6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	69db      	ldr	r3, [r3, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d101      	bne.n	80058b4 <dir_sdi+0xd4>
 80058b0:	2302      	movs	r3, #2
 80058b2:	e01a      	b.n	80058ea <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	69da      	ldr	r2, [r3, #28]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	899b      	ldrh	r3, [r3, #12]
 80058bc:	4619      	mov	r1, r3
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80058c4:	441a      	add	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	899b      	ldrh	r3, [r3, #12]
 80058d4:	461a      	mov	r2, r3
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	fbb3 f0f2 	udiv	r0, r3, r2
 80058dc:	fb02 f200 	mul.w	r2, r2, r0
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	18ca      	adds	r2, r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3718      	adds	r7, #24
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b086      	sub	sp, #24
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	3320      	adds	r3, #32
 8005908:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <dir_next+0x28>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005918:	d301      	bcc.n	800591e <dir_next+0x2c>
 800591a:	2304      	movs	r3, #4
 800591c:	e0bb      	b.n	8005a96 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	899b      	ldrh	r3, [r3, #12]
 8005922:	461a      	mov	r2, r3
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	fbb3 f1f2 	udiv	r1, r3, r2
 800592a:	fb02 f201 	mul.w	r2, r2, r1
 800592e:	1a9b      	subs	r3, r3, r2
 8005930:	2b00      	cmp	r3, #0
 8005932:	f040 809d 	bne.w	8005a70 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	1c5a      	adds	r2, r3, #1
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10b      	bne.n	8005960 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	68fa      	ldr	r2, [r7, #12]
 800594e:	8912      	ldrh	r2, [r2, #8]
 8005950:	4293      	cmp	r3, r2
 8005952:	f0c0 808d 	bcc.w	8005a70 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	61da      	str	r2, [r3, #28]
 800595c:	2304      	movs	r3, #4
 800595e:	e09a      	b.n	8005a96 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	899b      	ldrh	r3, [r3, #12]
 8005964:	461a      	mov	r2, r3
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	fbb3 f3f2 	udiv	r3, r3, r2
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	8952      	ldrh	r2, [r2, #10]
 8005970:	3a01      	subs	r2, #1
 8005972:	4013      	ands	r3, r2
 8005974:	2b00      	cmp	r3, #0
 8005976:	d17b      	bne.n	8005a70 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	4619      	mov	r1, r3
 8005980:	4610      	mov	r0, r2
 8005982:	f7ff fc08 	bl	8005196 <get_fat>
 8005986:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d801      	bhi.n	8005992 <dir_next+0xa0>
 800598e:	2302      	movs	r3, #2
 8005990:	e081      	b.n	8005a96 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005998:	d101      	bne.n	800599e <dir_next+0xac>
 800599a:	2301      	movs	r3, #1
 800599c:	e07b      	b.n	8005a96 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d359      	bcc.n	8005a5c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80059a8:	683b      	ldr	r3, [r7, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d104      	bne.n	80059b8 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	61da      	str	r2, [r3, #28]
 80059b4:	2304      	movs	r3, #4
 80059b6:	e06e      	b.n	8005a96 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	4619      	mov	r1, r3
 80059c0:	4610      	mov	r0, r2
 80059c2:	f7ff fe3d 	bl	8005640 <create_chain>
 80059c6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <dir_next+0xe0>
 80059ce:	2307      	movs	r3, #7
 80059d0:	e061      	b.n	8005a96 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <dir_next+0xea>
 80059d8:	2302      	movs	r3, #2
 80059da:	e05c      	b.n	8005a96 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e2:	d101      	bne.n	80059e8 <dir_next+0xf6>
 80059e4:	2301      	movs	r3, #1
 80059e6:	e056      	b.n	8005a96 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80059e8:	68f8      	ldr	r0, [r7, #12]
 80059ea:	f7ff fad3 	bl	8004f94 <sync_window>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <dir_next+0x106>
 80059f4:	2301      	movs	r3, #1
 80059f6:	e04e      	b.n	8005a96 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	899b      	ldrh	r3, [r3, #12]
 8005a02:	461a      	mov	r2, r3
 8005a04:	2100      	movs	r1, #0
 8005a06:	f7ff f8fc 	bl	8004c02 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	6979      	ldr	r1, [r7, #20]
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f7ff fba1 	bl	8005158 <clust2sect>
 8005a16:	4602      	mov	r2, r0
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	635a      	str	r2, [r3, #52]	; 0x34
 8005a1c:	e012      	b.n	8005a44 <dir_next+0x152>
						fs->wflag = 1;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2201      	movs	r2, #1
 8005a22:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	f7ff fab5 	bl	8004f94 <sync_window>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <dir_next+0x142>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e030      	b.n	8005a96 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	3301      	adds	r3, #1
 8005a38:	613b      	str	r3, [r7, #16]
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3e:	1c5a      	adds	r2, r3, #1
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	635a      	str	r2, [r3, #52]	; 0x34
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	895b      	ldrh	r3, [r3, #10]
 8005a48:	461a      	mov	r2, r3
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d3e6      	bcc.n	8005a1e <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	1ad2      	subs	r2, r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8005a62:	6979      	ldr	r1, [r7, #20]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f7ff fb77 	bl	8005158 <clust2sect>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	899b      	ldrh	r3, [r3, #12]
 8005a80:	461a      	mov	r2, r3
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a88:	fb02 f200 	mul.w	r2, r2, r0
 8005a8c:	1a9b      	subs	r3, r3, r2
 8005a8e:	18ca      	adds	r2, r1, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	3718      	adds	r7, #24
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}

08005a9e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8005a9e:	b580      	push	{r7, lr}
 8005aa0:	b086      	sub	sp, #24
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	6078      	str	r0, [r7, #4]
 8005aa6:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8005aae:	2100      	movs	r1, #0
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff fe95 	bl	80057e0 <dir_sdi>
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d12b      	bne.n	8005b18 <dir_alloc+0x7a>
		n = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	69db      	ldr	r3, [r3, #28]
 8005ac8:	4619      	mov	r1, r3
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f7ff faa6 	bl	800501c <move_window>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005ad4:	7dfb      	ldrb	r3, [r7, #23]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d11d      	bne.n	8005b16 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2be5      	cmp	r3, #229	; 0xe5
 8005ae2:	d004      	beq.n	8005aee <dir_alloc+0x50>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6a1b      	ldr	r3, [r3, #32]
 8005ae8:	781b      	ldrb	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d107      	bne.n	8005afe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	3301      	adds	r3, #1
 8005af2:	613b      	str	r3, [r7, #16]
 8005af4:	693a      	ldr	r2, [r7, #16]
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d102      	bne.n	8005b02 <dir_alloc+0x64>
 8005afc:	e00c      	b.n	8005b18 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8005afe:	2300      	movs	r3, #0
 8005b00:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8005b02:	2101      	movs	r1, #1
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f7ff fef4 	bl	80058f2 <dir_next>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8005b0e:	7dfb      	ldrb	r3, [r7, #23]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d0d7      	beq.n	8005ac4 <dir_alloc+0x26>
 8005b14:	e000      	b.n	8005b18 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8005b16:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8005b18:	7dfb      	ldrb	r3, [r7, #23]
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d101      	bne.n	8005b22 <dir_alloc+0x84>
 8005b1e:	2307      	movs	r3, #7
 8005b20:	75fb      	strb	r3, [r7, #23]
	return res;
 8005b22:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3718      	adds	r7, #24
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	331a      	adds	r3, #26
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	f7fe ffbe 	bl	8004abc <ld_word>
 8005b40:	4603      	mov	r3, r0
 8005b42:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b03      	cmp	r3, #3
 8005b4a:	d109      	bne.n	8005b60 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	3314      	adds	r3, #20
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7fe ffb3 	bl	8004abc <ld_word>
 8005b56:	4603      	mov	r3, r0
 8005b58:	041b      	lsls	r3, r3, #16
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8005b60:	68fb      	ldr	r3, [r7, #12]
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}

08005b6a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005b6a:	b580      	push	{r7, lr}
 8005b6c:	b084      	sub	sp, #16
 8005b6e:	af00      	add	r7, sp, #0
 8005b70:	60f8      	str	r0, [r7, #12]
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005b76:	68bb      	ldr	r3, [r7, #8]
 8005b78:	331a      	adds	r3, #26
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	b292      	uxth	r2, r2
 8005b7e:	4611      	mov	r1, r2
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fe ffd6 	bl	8004b32 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d109      	bne.n	8005ba2 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	f103 0214 	add.w	r2, r3, #20
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	0c1b      	lsrs	r3, r3, #16
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4610      	mov	r0, r2
 8005b9e:	f7fe ffc8 	bl	8004b32 <st_word>
	}
}
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
	...

08005bac <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005bac:	b590      	push	{r4, r7, lr}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	331a      	adds	r3, #26
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe ff7e 	bl	8004abc <ld_word>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d001      	beq.n	8005bca <cmp_lfn+0x1e>
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	e059      	b.n	8005c7e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	781b      	ldrb	r3, [r3, #0]
 8005bce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bd2:	1e5a      	subs	r2, r3, #1
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	005b      	lsls	r3, r3, #1
 8005bd8:	4413      	add	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005be0:	2301      	movs	r3, #1
 8005be2:	81fb      	strh	r3, [r7, #14]
 8005be4:	2300      	movs	r3, #0
 8005be6:	613b      	str	r3, [r7, #16]
 8005be8:	e033      	b.n	8005c52 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005bea:	4a27      	ldr	r2, [pc, #156]	; (8005c88 <cmp_lfn+0xdc>)
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	4413      	add	r3, r2
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f7fe ff5f 	bl	8004abc <ld_word>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8005c02:	89fb      	ldrh	r3, [r7, #14]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d01a      	beq.n	8005c3e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	2bfe      	cmp	r3, #254	; 0xfe
 8005c0c:	d812      	bhi.n	8005c34 <cmp_lfn+0x88>
 8005c0e:	89bb      	ldrh	r3, [r7, #12]
 8005c10:	4618      	mov	r0, r3
 8005c12:	f002 f9b1 	bl	8007f78 <ff_wtoupper>
 8005c16:	4603      	mov	r3, r0
 8005c18:	461c      	mov	r4, r3
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	617a      	str	r2, [r7, #20]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	4413      	add	r3, r2
 8005c26:	881b      	ldrh	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f002 f9a5 	bl	8007f78 <ff_wtoupper>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	429c      	cmp	r4, r3
 8005c32:	d001      	beq.n	8005c38 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8005c34:	2300      	movs	r3, #0
 8005c36:	e022      	b.n	8005c7e <cmp_lfn+0xd2>
			}
			wc = uc;
 8005c38:	89bb      	ldrh	r3, [r7, #12]
 8005c3a:	81fb      	strh	r3, [r7, #14]
 8005c3c:	e006      	b.n	8005c4c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8005c3e:	89bb      	ldrh	r3, [r7, #12]
 8005c40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d001      	beq.n	8005c4c <cmp_lfn+0xa0>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	e018      	b.n	8005c7e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	3301      	adds	r3, #1
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2b0c      	cmp	r3, #12
 8005c56:	d9c8      	bls.n	8005bea <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00b      	beq.n	8005c7c <cmp_lfn+0xd0>
 8005c64:	89fb      	ldrh	r3, [r7, #14]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <cmp_lfn+0xd0>
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	005b      	lsls	r3, r3, #1
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4413      	add	r3, r2
 8005c72:	881b      	ldrh	r3, [r3, #0]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d001      	beq.n	8005c7c <cmp_lfn+0xd0>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	e000      	b.n	8005c7e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005c7c:	2301      	movs	r3, #1
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	371c      	adds	r7, #28
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd90      	pop	{r4, r7, pc}
 8005c86:	bf00      	nop
 8005c88:	080094fc 	.word	0x080094fc

08005c8c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	4611      	mov	r1, r2
 8005c98:	461a      	mov	r2, r3
 8005c9a:	460b      	mov	r3, r1
 8005c9c:	71fb      	strb	r3, [r7, #7]
 8005c9e:	4613      	mov	r3, r2
 8005ca0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	330d      	adds	r3, #13
 8005ca6:	79ba      	ldrb	r2, [r7, #6]
 8005ca8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	330b      	adds	r3, #11
 8005cae:	220f      	movs	r2, #15
 8005cb0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8005cb2:	68bb      	ldr	r3, [r7, #8]
 8005cb4:	330c      	adds	r3, #12
 8005cb6:	2200      	movs	r2, #0
 8005cb8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005cba:	68bb      	ldr	r3, [r7, #8]
 8005cbc:	331a      	adds	r3, #26
 8005cbe:	2100      	movs	r1, #0
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fe ff36 	bl	8004b32 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8005cc6:	79fb      	ldrb	r3, [r7, #7]
 8005cc8:	1e5a      	subs	r2, r3, #1
 8005cca:	4613      	mov	r3, r2
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	4413      	add	r3, r2
 8005cd0:	009b      	lsls	r3, r3, #2
 8005cd2:	4413      	add	r3, r2
 8005cd4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	82fb      	strh	r3, [r7, #22]
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005cde:	8afb      	ldrh	r3, [r7, #22]
 8005ce0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d007      	beq.n	8005cf8 <put_lfn+0x6c>
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	61fa      	str	r2, [r7, #28]
 8005cee:	005b      	lsls	r3, r3, #1
 8005cf0:	68fa      	ldr	r2, [r7, #12]
 8005cf2:	4413      	add	r3, r2
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <put_lfn+0xcc>)
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	781b      	ldrb	r3, [r3, #0]
 8005d00:	461a      	mov	r2, r3
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	4413      	add	r3, r2
 8005d06:	8afa      	ldrh	r2, [r7, #22]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe ff11 	bl	8004b32 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8005d10:	8afb      	ldrh	r3, [r7, #22]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d102      	bne.n	8005d1c <put_lfn+0x90>
 8005d16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d1a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8005d1c:	69bb      	ldr	r3, [r7, #24]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61bb      	str	r3, [r7, #24]
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	2b0c      	cmp	r3, #12
 8005d26:	d9da      	bls.n	8005cde <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8005d28:	8afb      	ldrh	r3, [r7, #22]
 8005d2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d006      	beq.n	8005d40 <put_lfn+0xb4>
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	005b      	lsls	r3, r3, #1
 8005d36:	68fa      	ldr	r2, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d103      	bne.n	8005d48 <put_lfn+0xbc>
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d46:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8005d48:	68bb      	ldr	r3, [r7, #8]
 8005d4a:	79fa      	ldrb	r2, [r7, #7]
 8005d4c:	701a      	strb	r2, [r3, #0]
}
 8005d4e:	bf00      	nop
 8005d50:	3720      	adds	r7, #32
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	080094fc 	.word	0x080094fc

08005d5c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b08c      	sub	sp, #48	; 0x30
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	60f8      	str	r0, [r7, #12]
 8005d64:	60b9      	str	r1, [r7, #8]
 8005d66:	607a      	str	r2, [r7, #4]
 8005d68:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005d6a:	220b      	movs	r2, #11
 8005d6c:	68b9      	ldr	r1, [r7, #8]
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f7fe ff26 	bl	8004bc0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	2b05      	cmp	r3, #5
 8005d78:	d92b      	bls.n	8005dd2 <gen_numname+0x76>
		sr = seq;
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005d7e:	e022      	b.n	8005dc6 <gen_numname+0x6a>
			wc = *lfn++;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	1c9a      	adds	r2, r3, #2
 8005d84:	607a      	str	r2, [r7, #4]
 8005d86:	881b      	ldrh	r3, [r3, #0]
 8005d88:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d8e:	e017      	b.n	8005dc0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	005a      	lsls	r2, r3, #1
 8005d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	4413      	add	r3, r2
 8005d9c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005d9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005da0:	085b      	lsrs	r3, r3, #1
 8005da2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <gen_numname+0x5e>
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8005db4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8005db8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8005dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d9e4      	bls.n	8005d90 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	881b      	ldrh	r3, [r3, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d8      	bne.n	8005d80 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8005dd2:	2307      	movs	r3, #7
 8005dd4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 030f 	and.w	r3, r3, #15
 8005dde:	b2db      	uxtb	r3, r3
 8005de0:	3330      	adds	r3, #48	; 0x30
 8005de2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8005de6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005dea:	2b39      	cmp	r3, #57	; 0x39
 8005dec:	d904      	bls.n	8005df8 <gen_numname+0x9c>
 8005dee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005df2:	3307      	adds	r3, #7
 8005df4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8005df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dfa:	1e5a      	subs	r2, r3, #1
 8005dfc:	62ba      	str	r2, [r7, #40]	; 0x28
 8005dfe:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005e02:	4413      	add	r3, r2
 8005e04:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8005e08:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	091b      	lsrs	r3, r3, #4
 8005e10:	603b      	str	r3, [r7, #0]
	} while (seq);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1de      	bne.n	8005dd6 <gen_numname+0x7a>
	ns[i] = '~';
 8005e18:	f107 0214 	add.w	r2, r7, #20
 8005e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1e:	4413      	add	r3, r2
 8005e20:	227e      	movs	r2, #126	; 0x7e
 8005e22:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8005e24:	2300      	movs	r3, #0
 8005e26:	627b      	str	r3, [r7, #36]	; 0x24
 8005e28:	e002      	b.n	8005e30 <gen_numname+0xd4>
 8005e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005e30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e34:	429a      	cmp	r2, r3
 8005e36:	d205      	bcs.n	8005e44 <gen_numname+0xe8>
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3c:	4413      	add	r3, r2
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b20      	cmp	r3, #32
 8005e42:	d1f2      	bne.n	8005e2a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8005e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e46:	2b07      	cmp	r3, #7
 8005e48:	d808      	bhi.n	8005e5c <gen_numname+0x100>
 8005e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005e50:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005e54:	4413      	add	r3, r2
 8005e56:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8005e5a:	e000      	b.n	8005e5e <gen_numname+0x102>
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	627a      	str	r2, [r7, #36]	; 0x24
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	460a      	mov	r2, r1
 8005e6a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	2b07      	cmp	r3, #7
 8005e70:	d9e8      	bls.n	8005e44 <gen_numname+0xe8>
}
 8005e72:	bf00      	nop
 8005e74:	bf00      	nop
 8005e76:	3730      	adds	r7, #48	; 0x30
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b085      	sub	sp, #20
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005e84:	2300      	movs	r3, #0
 8005e86:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8005e88:	230b      	movs	r3, #11
 8005e8a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	0852      	lsrs	r2, r2, #1
 8005e92:	01db      	lsls	r3, r3, #7
 8005e94:	4313      	orrs	r3, r2
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	1c59      	adds	r1, r3, #1
 8005e9c:	6079      	str	r1, [r7, #4]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	4413      	add	r3, r2
 8005ea2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	3b01      	subs	r3, #1
 8005ea8:	60bb      	str	r3, [r7, #8]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d1ed      	bne.n	8005e8c <sum_sfn+0x10>
	return sum;
 8005eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b086      	sub	sp, #24
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005ecc:	2100      	movs	r1, #0
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f7ff fc86 	bl	80057e0 <dir_sdi>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8005ed8:	7dfb      	ldrb	r3, [r7, #23]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d001      	beq.n	8005ee2 <dir_find+0x24>
 8005ede:	7dfb      	ldrb	r3, [r7, #23]
 8005ee0:	e0a9      	b.n	8006036 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005ee2:	23ff      	movs	r3, #255	; 0xff
 8005ee4:	753b      	strb	r3, [r7, #20]
 8005ee6:	7d3b      	ldrb	r3, [r7, #20]
 8005ee8:	757b      	strb	r3, [r7, #21]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f04f 32ff 	mov.w	r2, #4294967295
 8005ef0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	6938      	ldr	r0, [r7, #16]
 8005efa:	f7ff f88f 	bl	800501c <move_window>
 8005efe:	4603      	mov	r3, r0
 8005f00:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005f02:	7dfb      	ldrb	r3, [r7, #23]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f040 8090 	bne.w	800602a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005f12:	7dbb      	ldrb	r3, [r7, #22]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d102      	bne.n	8005f1e <dir_find+0x60>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	75fb      	strb	r3, [r7, #23]
 8005f1c:	e08a      	b.n	8006034 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	330b      	adds	r3, #11
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f2a:	73fb      	strb	r3, [r7, #15]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	7bfa      	ldrb	r2, [r7, #15]
 8005f30:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005f32:	7dbb      	ldrb	r3, [r7, #22]
 8005f34:	2be5      	cmp	r3, #229	; 0xe5
 8005f36:	d007      	beq.n	8005f48 <dir_find+0x8a>
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d009      	beq.n	8005f56 <dir_find+0x98>
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	2b0f      	cmp	r3, #15
 8005f46:	d006      	beq.n	8005f56 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005f48:	23ff      	movs	r3, #255	; 0xff
 8005f4a:	757b      	strb	r3, [r7, #21]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
 8005f54:	e05e      	b.n	8006014 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b0f      	cmp	r3, #15
 8005f5a:	d136      	bne.n	8005fca <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005f62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d154      	bne.n	8006014 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8005f6a:	7dbb      	ldrb	r3, [r7, #22]
 8005f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00d      	beq.n	8005f90 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a1b      	ldr	r3, [r3, #32]
 8005f78:	7b5b      	ldrb	r3, [r3, #13]
 8005f7a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005f7c:	7dbb      	ldrb	r3, [r7, #22]
 8005f7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f82:	75bb      	strb	r3, [r7, #22]
 8005f84:	7dbb      	ldrb	r3, [r7, #22]
 8005f86:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695a      	ldr	r2, [r3, #20]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005f90:	7dba      	ldrb	r2, [r7, #22]
 8005f92:	7d7b      	ldrb	r3, [r7, #21]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d115      	bne.n	8005fc4 <dir_find+0x106>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a1b      	ldr	r3, [r3, #32]
 8005f9c:	330d      	adds	r3, #13
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	7d3a      	ldrb	r2, [r7, #20]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d10e      	bne.n	8005fc4 <dir_find+0x106>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	691a      	ldr	r2, [r3, #16]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6a1b      	ldr	r3, [r3, #32]
 8005fae:	4619      	mov	r1, r3
 8005fb0:	4610      	mov	r0, r2
 8005fb2:	f7ff fdfb 	bl	8005bac <cmp_lfn>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <dir_find+0x106>
 8005fbc:	7d7b      	ldrb	r3, [r7, #21]
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	e000      	b.n	8005fc6 <dir_find+0x108>
 8005fc4:	23ff      	movs	r3, #255	; 0xff
 8005fc6:	757b      	strb	r3, [r7, #21]
 8005fc8:	e024      	b.n	8006014 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8005fca:	7d7b      	ldrb	r3, [r7, #21]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d109      	bne.n	8005fe4 <dir_find+0x126>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7ff ff51 	bl	8005e7c <sum_sfn>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	461a      	mov	r2, r3
 8005fde:	7d3b      	ldrb	r3, [r7, #20]
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d024      	beq.n	800602e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d10a      	bne.n	8006008 <dir_find+0x14a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a18      	ldr	r0, [r3, #32]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	3324      	adds	r3, #36	; 0x24
 8005ffa:	220b      	movs	r2, #11
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	f7fe fe1b 	bl	8004c38 <mem_cmp>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d014      	beq.n	8006032 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006008:	23ff      	movs	r3, #255	; 0xff
 800600a:	757b      	strb	r3, [r7, #21]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f04f 32ff 	mov.w	r2, #4294967295
 8006012:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006014:	2100      	movs	r1, #0
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f7ff fc6b 	bl	80058f2 <dir_next>
 800601c:	4603      	mov	r3, r0
 800601e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006020:	7dfb      	ldrb	r3, [r7, #23]
 8006022:	2b00      	cmp	r3, #0
 8006024:	f43f af65 	beq.w	8005ef2 <dir_find+0x34>
 8006028:	e004      	b.n	8006034 <dir_find+0x176>
		if (res != FR_OK) break;
 800602a:	bf00      	nop
 800602c:	e002      	b.n	8006034 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800602e:	bf00      	nop
 8006030:	e000      	b.n	8006034 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006032:	bf00      	nop

	return res;
 8006034:	7dfb      	ldrb	r3, [r7, #23]
}
 8006036:	4618      	mov	r0, r3
 8006038:	3718      	adds	r7, #24
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b08c      	sub	sp, #48	; 0x30
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006054:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <dir_register+0x20>
 800605c:	2306      	movs	r3, #6
 800605e:	e0e0      	b.n	8006222 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006060:	2300      	movs	r3, #0
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
 8006064:	e002      	b.n	800606c <dir_register+0x2c>
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	3301      	adds	r3, #1
 800606a:	627b      	str	r3, [r7, #36]	; 0x24
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	4413      	add	r3, r2
 8006076:	881b      	ldrh	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d1f4      	bne.n	8006066 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006082:	f107 030c 	add.w	r3, r7, #12
 8006086:	220c      	movs	r2, #12
 8006088:	4618      	mov	r0, r3
 800608a:	f7fe fd99 	bl	8004bc0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800608e:	7dfb      	ldrb	r3, [r7, #23]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	2b00      	cmp	r3, #0
 8006096:	d032      	beq.n	80060fe <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2240      	movs	r2, #64	; 0x40
 800609c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80060a0:	2301      	movs	r3, #1
 80060a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060a4:	e016      	b.n	80060d4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	691a      	ldr	r2, [r3, #16]
 80060b0:	f107 010c 	add.w	r1, r7, #12
 80060b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b6:	f7ff fe51 	bl	8005d5c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f7ff feff 	bl	8005ebe <dir_find>
 80060c0:	4603      	mov	r3, r0
 80060c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80060c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d106      	bne.n	80060dc <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80060ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d0:	3301      	adds	r3, #1
 80060d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	2b63      	cmp	r3, #99	; 0x63
 80060d8:	d9e5      	bls.n	80060a6 <dir_register+0x66>
 80060da:	e000      	b.n	80060de <dir_register+0x9e>
			if (res != FR_OK) break;
 80060dc:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80060de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e0:	2b64      	cmp	r3, #100	; 0x64
 80060e2:	d101      	bne.n	80060e8 <dir_register+0xa8>
 80060e4:	2307      	movs	r3, #7
 80060e6:	e09c      	b.n	8006222 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80060e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d002      	beq.n	80060f6 <dir_register+0xb6>
 80060f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80060f4:	e095      	b.n	8006222 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80060f6:	7dfa      	ldrb	r2, [r7, #23]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80060fe:	7dfb      	ldrb	r3, [r7, #23]
 8006100:	f003 0302 	and.w	r3, r3, #2
 8006104:	2b00      	cmp	r3, #0
 8006106:	d007      	beq.n	8006118 <dir_register+0xd8>
 8006108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800610a:	330c      	adds	r3, #12
 800610c:	4a47      	ldr	r2, [pc, #284]	; (800622c <dir_register+0x1ec>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	089b      	lsrs	r3, r3, #2
 8006114:	3301      	adds	r3, #1
 8006116:	e000      	b.n	800611a <dir_register+0xda>
 8006118:	2301      	movs	r3, #1
 800611a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800611c:	6a39      	ldr	r1, [r7, #32]
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f7ff fcbd 	bl	8005a9e <dir_alloc>
 8006124:	4603      	mov	r3, r0
 8006126:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800612a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800612e:	2b00      	cmp	r3, #0
 8006130:	d148      	bne.n	80061c4 <dir_register+0x184>
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	3b01      	subs	r3, #1
 8006136:	623b      	str	r3, [r7, #32]
 8006138:	6a3b      	ldr	r3, [r7, #32]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d042      	beq.n	80061c4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695a      	ldr	r2, [r3, #20]
 8006142:	6a3b      	ldr	r3, [r7, #32]
 8006144:	015b      	lsls	r3, r3, #5
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff fb48 	bl	80057e0 <dir_sdi>
 8006150:	4603      	mov	r3, r0
 8006152:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800615a:	2b00      	cmp	r3, #0
 800615c:	d132      	bne.n	80061c4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3324      	adds	r3, #36	; 0x24
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fe8a 	bl	8005e7c <sum_sfn>
 8006168:	4603      	mov	r3, r0
 800616a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	4619      	mov	r1, r3
 8006172:	69f8      	ldr	r0, [r7, #28]
 8006174:	f7fe ff52 	bl	800501c <move_window>
 8006178:	4603      	mov	r3, r0
 800617a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800617e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006182:	2b00      	cmp	r3, #0
 8006184:	d11d      	bne.n	80061c2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	6918      	ldr	r0, [r3, #16]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6a19      	ldr	r1, [r3, #32]
 800618e:	6a3b      	ldr	r3, [r7, #32]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7efb      	ldrb	r3, [r7, #27]
 8006194:	f7ff fd7a 	bl	8005c8c <put_lfn>
				fs->wflag = 1;
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	2201      	movs	r2, #1
 800619c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800619e:	2100      	movs	r1, #0
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f7ff fba6 	bl	80058f2 <dir_next>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80061ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d107      	bne.n	80061c4 <dir_register+0x184>
 80061b4:	6a3b      	ldr	r3, [r7, #32]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	623b      	str	r3, [r7, #32]
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1d5      	bne.n	800616c <dir_register+0x12c>
 80061c0:	e000      	b.n	80061c4 <dir_register+0x184>
				if (res != FR_OK) break;
 80061c2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80061c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d128      	bne.n	800621e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	69db      	ldr	r3, [r3, #28]
 80061d0:	4619      	mov	r1, r3
 80061d2:	69f8      	ldr	r0, [r7, #28]
 80061d4:	f7fe ff22 	bl	800501c <move_window>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80061de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d11b      	bne.n	800621e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	2220      	movs	r2, #32
 80061ec:	2100      	movs	r1, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe fd07 	bl	8004c02 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6a18      	ldr	r0, [r3, #32]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	3324      	adds	r3, #36	; 0x24
 80061fc:	220b      	movs	r2, #11
 80061fe:	4619      	mov	r1, r3
 8006200:	f7fe fcde 	bl	8004bc0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	330c      	adds	r3, #12
 8006210:	f002 0218 	and.w	r2, r2, #24
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	2201      	movs	r2, #1
 800621c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800621e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006222:	4618      	mov	r0, r3
 8006224:	3730      	adds	r7, #48	; 0x30
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	4ec4ec4f 	.word	0x4ec4ec4f

08006230 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	; 0x28
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691b      	ldr	r3, [r3, #16]
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	2300      	movs	r3, #0
 800624a:	617b      	str	r3, [r7, #20]
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006250:	69bb      	ldr	r3, [r7, #24]
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	61ba      	str	r2, [r7, #24]
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	4413      	add	r3, r2
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800625e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006260:	2b1f      	cmp	r3, #31
 8006262:	d940      	bls.n	80062e6 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006266:	2b2f      	cmp	r3, #47	; 0x2f
 8006268:	d006      	beq.n	8006278 <create_name+0x48>
 800626a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800626c:	2b5c      	cmp	r3, #92	; 0x5c
 800626e:	d110      	bne.n	8006292 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006270:	e002      	b.n	8006278 <create_name+0x48>
 8006272:	69bb      	ldr	r3, [r7, #24]
 8006274:	3301      	adds	r3, #1
 8006276:	61bb      	str	r3, [r7, #24]
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	69bb      	ldr	r3, [r7, #24]
 800627c:	4413      	add	r3, r2
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	2b2f      	cmp	r3, #47	; 0x2f
 8006282:	d0f6      	beq.n	8006272 <create_name+0x42>
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	4413      	add	r3, r2
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b5c      	cmp	r3, #92	; 0x5c
 800628e:	d0f0      	beq.n	8006272 <create_name+0x42>
			break;
 8006290:	e02a      	b.n	80062e8 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2bfe      	cmp	r3, #254	; 0xfe
 8006296:	d901      	bls.n	800629c <create_name+0x6c>
 8006298:	2306      	movs	r3, #6
 800629a:	e177      	b.n	800658c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800629c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80062a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062a4:	2101      	movs	r1, #1
 80062a6:	4618      	mov	r0, r3
 80062a8:	f001 fe2a 	bl	8007f00 <ff_convert>
 80062ac:	4603      	mov	r3, r0
 80062ae:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80062b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <create_name+0x8a>
 80062b6:	2306      	movs	r3, #6
 80062b8:	e168      	b.n	800658c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80062ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062bc:	2b7f      	cmp	r3, #127	; 0x7f
 80062be:	d809      	bhi.n	80062d4 <create_name+0xa4>
 80062c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062c2:	4619      	mov	r1, r3
 80062c4:	48b3      	ldr	r0, [pc, #716]	; (8006594 <create_name+0x364>)
 80062c6:	f7fe fcde 	bl	8004c86 <chk_chr>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d001      	beq.n	80062d4 <create_name+0xa4>
 80062d0:	2306      	movs	r3, #6
 80062d2:	e15b      	b.n	800658c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80062d4:	697b      	ldr	r3, [r7, #20]
 80062d6:	1c5a      	adds	r2, r3, #1
 80062d8:	617a      	str	r2, [r7, #20]
 80062da:	005b      	lsls	r3, r3, #1
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80062e2:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80062e4:	e7b4      	b.n	8006250 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80062e6:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	441a      	add	r2, r3
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80062f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80062f4:	2b1f      	cmp	r3, #31
 80062f6:	d801      	bhi.n	80062fc <create_name+0xcc>
 80062f8:	2304      	movs	r3, #4
 80062fa:	e000      	b.n	80062fe <create_name+0xce>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006302:	e011      	b.n	8006328 <create_name+0xf8>
		w = lfn[di - 1];
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800630a:	3b01      	subs	r3, #1
 800630c:	005b      	lsls	r3, r3, #1
 800630e:	68fa      	ldr	r2, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	881b      	ldrh	r3, [r3, #0]
 8006314:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006316:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006318:	2b20      	cmp	r3, #32
 800631a:	d002      	beq.n	8006322 <create_name+0xf2>
 800631c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800631e:	2b2e      	cmp	r3, #46	; 0x2e
 8006320:	d106      	bne.n	8006330 <create_name+0x100>
		di--;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	3b01      	subs	r3, #1
 8006326:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1ea      	bne.n	8006304 <create_name+0xd4>
 800632e:	e000      	b.n	8006332 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006330:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	005b      	lsls	r3, r3, #1
 8006336:	68fa      	ldr	r2, [r7, #12]
 8006338:	4413      	add	r3, r2
 800633a:	2200      	movs	r2, #0
 800633c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d101      	bne.n	8006348 <create_name+0x118>
 8006344:	2306      	movs	r3, #6
 8006346:	e121      	b.n	800658c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	3324      	adds	r3, #36	; 0x24
 800634c:	220b      	movs	r2, #11
 800634e:	2120      	movs	r1, #32
 8006350:	4618      	mov	r0, r3
 8006352:	f7fe fc56 	bl	8004c02 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8006356:	2300      	movs	r3, #0
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	e002      	b.n	8006362 <create_name+0x132>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	3301      	adds	r3, #1
 8006360:	61bb      	str	r3, [r7, #24]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	005b      	lsls	r3, r3, #1
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	4413      	add	r3, r2
 800636a:	881b      	ldrh	r3, [r3, #0]
 800636c:	2b20      	cmp	r3, #32
 800636e:	d0f5      	beq.n	800635c <create_name+0x12c>
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	005b      	lsls	r3, r3, #1
 8006374:	68fa      	ldr	r2, [r7, #12]
 8006376:	4413      	add	r3, r2
 8006378:	881b      	ldrh	r3, [r3, #0]
 800637a:	2b2e      	cmp	r3, #46	; 0x2e
 800637c:	d0ee      	beq.n	800635c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d009      	beq.n	8006398 <create_name+0x168>
 8006384:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006388:	f043 0303 	orr.w	r3, r3, #3
 800638c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8006390:	e002      	b.n	8006398 <create_name+0x168>
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	3b01      	subs	r3, #1
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d009      	beq.n	80063b2 <create_name+0x182>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	3b01      	subs	r3, #1
 80063a6:	005b      	lsls	r3, r3, #1
 80063a8:	68fa      	ldr	r2, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	881b      	ldrh	r3, [r3, #0]
 80063ae:	2b2e      	cmp	r3, #46	; 0x2e
 80063b0:	d1ef      	bne.n	8006392 <create_name+0x162>

	i = b = 0; ni = 8;
 80063b2:	2300      	movs	r3, #0
 80063b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80063b8:	2300      	movs	r3, #0
 80063ba:	623b      	str	r3, [r7, #32]
 80063bc:	2308      	movs	r3, #8
 80063be:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	61ba      	str	r2, [r7, #24]
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4413      	add	r3, r2
 80063cc:	881b      	ldrh	r3, [r3, #0]
 80063ce:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80063d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	f000 8090 	beq.w	80064f8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80063d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d006      	beq.n	80063ec <create_name+0x1bc>
 80063de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80063e0:	2b2e      	cmp	r3, #46	; 0x2e
 80063e2:	d10a      	bne.n	80063fa <create_name+0x1ca>
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d006      	beq.n	80063fa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80063ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80063f0:	f043 0303 	orr.w	r3, r3, #3
 80063f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80063f8:	e07d      	b.n	80064f6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80063fa:	6a3a      	ldr	r2, [r7, #32]
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d203      	bcs.n	800640a <create_name+0x1da>
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	429a      	cmp	r2, r3
 8006408:	d123      	bne.n	8006452 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	2b0b      	cmp	r3, #11
 800640e:	d106      	bne.n	800641e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8006410:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006414:	f043 0303 	orr.w	r3, r3, #3
 8006418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800641c:	e06f      	b.n	80064fe <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	429a      	cmp	r2, r3
 8006424:	d005      	beq.n	8006432 <create_name+0x202>
 8006426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800642a:	f043 0303 	orr.w	r3, r3, #3
 800642e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	429a      	cmp	r2, r3
 8006438:	d860      	bhi.n	80064fc <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	61bb      	str	r3, [r7, #24]
 800643e:	2308      	movs	r3, #8
 8006440:	623b      	str	r3, [r7, #32]
 8006442:	230b      	movs	r3, #11
 8006444:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8006446:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800644a:	009b      	lsls	r3, r3, #2
 800644c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006450:	e051      	b.n	80064f6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8006452:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006454:	2b7f      	cmp	r3, #127	; 0x7f
 8006456:	d914      	bls.n	8006482 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8006458:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800645a:	2100      	movs	r1, #0
 800645c:	4618      	mov	r0, r3
 800645e:	f001 fd4f 	bl	8007f00 <ff_convert>
 8006462:	4603      	mov	r3, r0
 8006464:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8006466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006468:	2b00      	cmp	r3, #0
 800646a:	d004      	beq.n	8006476 <create_name+0x246>
 800646c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800646e:	3b80      	subs	r3, #128	; 0x80
 8006470:	4a49      	ldr	r2, [pc, #292]	; (8006598 <create_name+0x368>)
 8006472:	5cd3      	ldrb	r3, [r2, r3]
 8006474:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8006476:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800647a:	f043 0302 	orr.w	r3, r3, #2
 800647e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8006482:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d007      	beq.n	8006498 <create_name+0x268>
 8006488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800648a:	4619      	mov	r1, r3
 800648c:	4843      	ldr	r0, [pc, #268]	; (800659c <create_name+0x36c>)
 800648e:	f7fe fbfa 	bl	8004c86 <chk_chr>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d008      	beq.n	80064aa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8006498:	235f      	movs	r3, #95	; 0x5f
 800649a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800649c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80064a0:	f043 0303 	orr.w	r3, r3, #3
 80064a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80064a8:	e01b      	b.n	80064e2 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80064aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064ac:	2b40      	cmp	r3, #64	; 0x40
 80064ae:	d909      	bls.n	80064c4 <create_name+0x294>
 80064b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064b2:	2b5a      	cmp	r3, #90	; 0x5a
 80064b4:	d806      	bhi.n	80064c4 <create_name+0x294>
					b |= 2;
 80064b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064ba:	f043 0302 	orr.w	r3, r3, #2
 80064be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80064c2:	e00e      	b.n	80064e2 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80064c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064c6:	2b60      	cmp	r3, #96	; 0x60
 80064c8:	d90b      	bls.n	80064e2 <create_name+0x2b2>
 80064ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064cc:	2b7a      	cmp	r3, #122	; 0x7a
 80064ce:	d808      	bhi.n	80064e2 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80064d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80064d4:	f043 0301 	orr.w	r3, r3, #1
 80064d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80064dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064de:	3b20      	subs	r3, #32
 80064e0:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	1c5a      	adds	r2, r3, #1
 80064e6:	623a      	str	r2, [r7, #32]
 80064e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80064ea:	b2d1      	uxtb	r1, r2
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	4413      	add	r3, r2
 80064f0:	460a      	mov	r2, r1
 80064f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80064f6:	e763      	b.n	80063c0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80064f8:	bf00      	nop
 80064fa:	e000      	b.n	80064fe <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80064fc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006504:	2be5      	cmp	r3, #229	; 0xe5
 8006506:	d103      	bne.n	8006510 <create_name+0x2e0>
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2205      	movs	r2, #5
 800650c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	2b08      	cmp	r3, #8
 8006514:	d104      	bne.n	8006520 <create_name+0x2f0>
 8006516:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800651a:	009b      	lsls	r3, r3, #2
 800651c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8006520:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006524:	f003 030c 	and.w	r3, r3, #12
 8006528:	2b0c      	cmp	r3, #12
 800652a:	d005      	beq.n	8006538 <create_name+0x308>
 800652c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	2b03      	cmp	r3, #3
 8006536:	d105      	bne.n	8006544 <create_name+0x314>
 8006538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800653c:	f043 0302 	orr.w	r3, r3, #2
 8006540:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8006544:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006548:	f003 0302 	and.w	r3, r3, #2
 800654c:	2b00      	cmp	r3, #0
 800654e:	d117      	bne.n	8006580 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8006550:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8006554:	f003 0303 	and.w	r3, r3, #3
 8006558:	2b01      	cmp	r3, #1
 800655a:	d105      	bne.n	8006568 <create_name+0x338>
 800655c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006560:	f043 0310 	orr.w	r3, r3, #16
 8006564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8006568:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b04      	cmp	r3, #4
 8006572:	d105      	bne.n	8006580 <create_name+0x350>
 8006574:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006578:	f043 0308 	orr.w	r3, r3, #8
 800657c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8006586:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800658a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800658c:	4618      	mov	r0, r3
 800658e:	3728      	adds	r7, #40	; 0x28
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}
 8006594:	08009410 	.word	0x08009410
 8006598:	0800947c 	.word	0x0800947c
 800659c:	0800941c 	.word	0x0800941c

080065a0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80065b4:	e002      	b.n	80065bc <follow_path+0x1c>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	3301      	adds	r3, #1
 80065ba:	603b      	str	r3, [r7, #0]
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	781b      	ldrb	r3, [r3, #0]
 80065c0:	2b2f      	cmp	r3, #47	; 0x2f
 80065c2:	d0f8      	beq.n	80065b6 <follow_path+0x16>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	781b      	ldrb	r3, [r3, #0]
 80065c8:	2b5c      	cmp	r3, #92	; 0x5c
 80065ca:	d0f4      	beq.n	80065b6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2200      	movs	r2, #0
 80065d0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b1f      	cmp	r3, #31
 80065d8:	d80a      	bhi.n	80065f0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2280      	movs	r2, #128	; 0x80
 80065de:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80065e2:	2100      	movs	r1, #0
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f7ff f8fb 	bl	80057e0 <dir_sdi>
 80065ea:	4603      	mov	r3, r0
 80065ec:	75fb      	strb	r3, [r7, #23]
 80065ee:	e048      	b.n	8006682 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80065f0:	463b      	mov	r3, r7
 80065f2:	4619      	mov	r1, r3
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f7ff fe1b 	bl	8006230 <create_name>
 80065fa:	4603      	mov	r3, r0
 80065fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80065fe:	7dfb      	ldrb	r3, [r7, #23]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d139      	bne.n	8006678 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f7ff fc5a 	bl	8005ebe <dir_find>
 800660a:	4603      	mov	r3, r0
 800660c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006614:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b04      	cmp	r3, #4
 8006620:	d12c      	bne.n	800667c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006622:	7afb      	ldrb	r3, [r7, #11]
 8006624:	f003 0304 	and.w	r3, r3, #4
 8006628:	2b00      	cmp	r3, #0
 800662a:	d127      	bne.n	800667c <follow_path+0xdc>
 800662c:	2305      	movs	r3, #5
 800662e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006630:	e024      	b.n	800667c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006632:	7afb      	ldrb	r3, [r7, #11]
 8006634:	f003 0304 	and.w	r3, r3, #4
 8006638:	2b00      	cmp	r3, #0
 800663a:	d121      	bne.n	8006680 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	799b      	ldrb	r3, [r3, #6]
 8006640:	f003 0310 	and.w	r3, r3, #16
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006648:	2305      	movs	r3, #5
 800664a:	75fb      	strb	r3, [r7, #23]
 800664c:	e019      	b.n	8006682 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	8992      	ldrh	r2, [r2, #12]
 800665c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006660:	fb02 f200 	mul.w	r2, r2, r0
 8006664:	1a9b      	subs	r3, r3, r2
 8006666:	440b      	add	r3, r1
 8006668:	4619      	mov	r1, r3
 800666a:	68f8      	ldr	r0, [r7, #12]
 800666c:	f7ff fa5e 	bl	8005b2c <ld_clust>
 8006670:	4602      	mov	r2, r0
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006676:	e7bb      	b.n	80065f0 <follow_path+0x50>
			if (res != FR_OK) break;
 8006678:	bf00      	nop
 800667a:	e002      	b.n	8006682 <follow_path+0xe2>
				break;
 800667c:	bf00      	nop
 800667e:	e000      	b.n	8006682 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006680:	bf00      	nop
			}
		}
	}

	return res;
 8006682:	7dfb      	ldrb	r3, [r7, #23]
}
 8006684:	4618      	mov	r0, r3
 8006686:	3718      	adds	r7, #24
 8006688:	46bd      	mov	sp, r7
 800668a:	bd80      	pop	{r7, pc}

0800668c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800668c:	b480      	push	{r7}
 800668e:	b087      	sub	sp, #28
 8006690:	af00      	add	r7, sp, #0
 8006692:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006694:	f04f 33ff 	mov.w	r3, #4294967295
 8006698:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d031      	beq.n	8006706 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	617b      	str	r3, [r7, #20]
 80066a8:	e002      	b.n	80066b0 <get_ldnumber+0x24>
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	3301      	adds	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b1f      	cmp	r3, #31
 80066b6:	d903      	bls.n	80066c0 <get_ldnumber+0x34>
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b3a      	cmp	r3, #58	; 0x3a
 80066be:	d1f4      	bne.n	80066aa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b3a      	cmp	r3, #58	; 0x3a
 80066c6:	d11c      	bne.n	8006702 <get_ldnumber+0x76>
			tp = *path;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	1c5a      	adds	r2, r3, #1
 80066d2:	60fa      	str	r2, [r7, #12]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	3b30      	subs	r3, #48	; 0x30
 80066d8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2b09      	cmp	r3, #9
 80066de:	d80e      	bhi.n	80066fe <get_ldnumber+0x72>
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d10a      	bne.n	80066fe <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d107      	bne.n	80066fe <get_ldnumber+0x72>
					vol = (int)i;
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	3301      	adds	r3, #1
 80066f6:	617b      	str	r3, [r7, #20]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	e002      	b.n	8006708 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006702:	2300      	movs	r3, #0
 8006704:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006706:	693b      	ldr	r3, [r7, #16]
}
 8006708:	4618      	mov	r0, r3
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	70da      	strb	r2, [r3, #3]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f04f 32ff 	mov.w	r2, #4294967295
 800672a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f7fe fc74 	bl	800501c <move_window>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <check_fs+0x2a>
 800673a:	2304      	movs	r3, #4
 800673c:	e038      	b.n	80067b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	3338      	adds	r3, #56	; 0x38
 8006742:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe f9b8 	bl	8004abc <ld_word>
 800674c:	4603      	mov	r3, r0
 800674e:	461a      	mov	r2, r3
 8006750:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006754:	429a      	cmp	r2, r3
 8006756:	d001      	beq.n	800675c <check_fs+0x48>
 8006758:	2303      	movs	r3, #3
 800675a:	e029      	b.n	80067b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006762:	2be9      	cmp	r3, #233	; 0xe9
 8006764:	d009      	beq.n	800677a <check_fs+0x66>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800676c:	2beb      	cmp	r3, #235	; 0xeb
 800676e:	d11e      	bne.n	80067ae <check_fs+0x9a>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006776:	2b90      	cmp	r3, #144	; 0x90
 8006778:	d119      	bne.n	80067ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	3338      	adds	r3, #56	; 0x38
 800677e:	3336      	adds	r3, #54	; 0x36
 8006780:	4618      	mov	r0, r3
 8006782:	f7fe f9b3 	bl	8004aec <ld_dword>
 8006786:	4603      	mov	r3, r0
 8006788:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800678c:	4a0a      	ldr	r2, [pc, #40]	; (80067b8 <check_fs+0xa4>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d101      	bne.n	8006796 <check_fs+0x82>
 8006792:	2300      	movs	r3, #0
 8006794:	e00c      	b.n	80067b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3338      	adds	r3, #56	; 0x38
 800679a:	3352      	adds	r3, #82	; 0x52
 800679c:	4618      	mov	r0, r3
 800679e:	f7fe f9a5 	bl	8004aec <ld_dword>
 80067a2:	4603      	mov	r3, r0
 80067a4:	4a05      	ldr	r2, [pc, #20]	; (80067bc <check_fs+0xa8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d101      	bne.n	80067ae <check_fs+0x9a>
 80067aa:	2300      	movs	r3, #0
 80067ac:	e000      	b.n	80067b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80067ae:	2302      	movs	r3, #2
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	3708      	adds	r7, #8
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bd80      	pop	{r7, pc}
 80067b8:	00544146 	.word	0x00544146
 80067bc:	33544146 	.word	0x33544146

080067c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b096      	sub	sp, #88	; 0x58
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	4613      	mov	r3, r2
 80067cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2200      	movs	r2, #0
 80067d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7ff ff59 	bl	800668c <get_ldnumber>
 80067da:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80067dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067de:	2b00      	cmp	r3, #0
 80067e0:	da01      	bge.n	80067e6 <find_volume+0x26>
 80067e2:	230b      	movs	r3, #11
 80067e4:	e268      	b.n	8006cb8 <find_volume+0x4f8>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80067e6:	4ab0      	ldr	r2, [pc, #704]	; (8006aa8 <find_volume+0x2e8>)
 80067e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067ee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80067f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <find_volume+0x3a>
 80067f6:	230c      	movs	r3, #12
 80067f8:	e25e      	b.n	8006cb8 <find_volume+0x4f8>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80067fa:	68bb      	ldr	r3, [r7, #8]
 80067fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80067fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8006800:	79fb      	ldrb	r3, [r7, #7]
 8006802:	f023 0301 	bic.w	r3, r3, #1
 8006806:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8006808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d01a      	beq.n	8006846 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8006810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006812:	785b      	ldrb	r3, [r3, #1]
 8006814:	4618      	mov	r0, r3
 8006816:	f7fe f8b3 	bl	8004980 <disk_status>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006820:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006824:	f003 0301 	and.w	r3, r3, #1
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10c      	bne.n	8006846 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800682c:	79fb      	ldrb	r3, [r7, #7]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d007      	beq.n	8006842 <find_volume+0x82>
 8006832:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006836:	f003 0304 	and.w	r3, r3, #4
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800683e:	230a      	movs	r3, #10
 8006840:	e23a      	b.n	8006cb8 <find_volume+0x4f8>
			}
			return FR_OK;				/* The file system object is valid */
 8006842:	2300      	movs	r3, #0
 8006844:	e238      	b.n	8006cb8 <find_volume+0x4f8>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006848:	2200      	movs	r2, #0
 800684a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800684c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800684e:	b2da      	uxtb	r2, r3
 8006850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006852:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006856:	785b      	ldrb	r3, [r3, #1]
 8006858:	4618      	mov	r0, r3
 800685a:	f7fe f8ab 	bl	80049b4 <disk_initialize>
 800685e:	4603      	mov	r3, r0
 8006860:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006864:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d001      	beq.n	8006874 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006870:	2303      	movs	r3, #3
 8006872:	e221      	b.n	8006cb8 <find_volume+0x4f8>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006874:	79fb      	ldrb	r3, [r7, #7]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d007      	beq.n	800688a <find_volume+0xca>
 800687a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800687e:	f003 0304 	and.w	r3, r3, #4
 8006882:	2b00      	cmp	r3, #0
 8006884:	d001      	beq.n	800688a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8006886:	230a      	movs	r3, #10
 8006888:	e216      	b.n	8006cb8 <find_volume+0x4f8>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800688a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800688c:	7858      	ldrb	r0, [r3, #1]
 800688e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006890:	330c      	adds	r3, #12
 8006892:	461a      	mov	r2, r3
 8006894:	2102      	movs	r1, #2
 8006896:	f7fe f8f3 	bl	8004a80 <disk_ioctl>
 800689a:	4603      	mov	r3, r0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <find_volume+0xe4>
 80068a0:	2301      	movs	r3, #1
 80068a2:	e209      	b.n	8006cb8 <find_volume+0x4f8>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80068a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a6:	899b      	ldrh	r3, [r3, #12]
 80068a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068ac:	d80d      	bhi.n	80068ca <find_volume+0x10a>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b0:	899b      	ldrh	r3, [r3, #12]
 80068b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068b6:	d308      	bcc.n	80068ca <find_volume+0x10a>
 80068b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068ba:	899b      	ldrh	r3, [r3, #12]
 80068bc:	461a      	mov	r2, r3
 80068be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068c0:	899b      	ldrh	r3, [r3, #12]
 80068c2:	3b01      	subs	r3, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <find_volume+0x10e>
 80068ca:	2301      	movs	r3, #1
 80068cc:	e1f4      	b.n	8006cb8 <find_volume+0x4f8>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80068ce:	2300      	movs	r3, #0
 80068d0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80068d2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80068d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80068d6:	f7ff ff1d 	bl	8006714 <check_fs>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80068e0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d14b      	bne.n	8006980 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80068e8:	2300      	movs	r3, #0
 80068ea:	643b      	str	r3, [r7, #64]	; 0x40
 80068ec:	e01f      	b.n	800692e <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f0:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80068f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80068fc:	4413      	add	r3, r2
 80068fe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8006900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006902:	3304      	adds	r3, #4
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d006      	beq.n	8006918 <find_volume+0x158>
 800690a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800690c:	3308      	adds	r3, #8
 800690e:	4618      	mov	r0, r3
 8006910:	f7fe f8ec 	bl	8004aec <ld_dword>
 8006914:	4602      	mov	r2, r0
 8006916:	e000      	b.n	800691a <find_volume+0x15a>
 8006918:	2200      	movs	r2, #0
 800691a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8006922:	440b      	add	r3, r1
 8006924:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8006928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692a:	3301      	adds	r3, #1
 800692c:	643b      	str	r3, [r7, #64]	; 0x40
 800692e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006930:	2b03      	cmp	r3, #3
 8006932:	d9dc      	bls.n	80068ee <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8006934:	2300      	movs	r3, #0
 8006936:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8006938:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693a:	2b00      	cmp	r3, #0
 800693c:	d002      	beq.n	8006944 <find_volume+0x184>
 800693e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006940:	3b01      	subs	r3, #1
 8006942:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8006944:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800694c:	4413      	add	r3, r2
 800694e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006952:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8006954:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	d005      	beq.n	8006966 <find_volume+0x1a6>
 800695a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800695c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800695e:	f7ff fed9 	bl	8006714 <check_fs>
 8006962:	4603      	mov	r3, r0
 8006964:	e000      	b.n	8006968 <find_volume+0x1a8>
 8006966:	2303      	movs	r3, #3
 8006968:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800696c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006970:	2b01      	cmp	r3, #1
 8006972:	d905      	bls.n	8006980 <find_volume+0x1c0>
 8006974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006976:	3301      	adds	r3, #1
 8006978:	643b      	str	r3, [r7, #64]	; 0x40
 800697a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800697c:	2b03      	cmp	r3, #3
 800697e:	d9e1      	bls.n	8006944 <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006980:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006984:	2b04      	cmp	r3, #4
 8006986:	d101      	bne.n	800698c <find_volume+0x1cc>
 8006988:	2301      	movs	r3, #1
 800698a:	e195      	b.n	8006cb8 <find_volume+0x4f8>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800698c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006990:	2b01      	cmp	r3, #1
 8006992:	d901      	bls.n	8006998 <find_volume+0x1d8>
 8006994:	230d      	movs	r3, #13
 8006996:	e18f      	b.n	8006cb8 <find_volume+0x4f8>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800699a:	3338      	adds	r3, #56	; 0x38
 800699c:	330b      	adds	r3, #11
 800699e:	4618      	mov	r0, r3
 80069a0:	f7fe f88c 	bl	8004abc <ld_word>
 80069a4:	4603      	mov	r3, r0
 80069a6:	461a      	mov	r2, r3
 80069a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069aa:	899b      	ldrh	r3, [r3, #12]
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d001      	beq.n	80069b4 <find_volume+0x1f4>
 80069b0:	230d      	movs	r3, #13
 80069b2:	e181      	b.n	8006cb8 <find_volume+0x4f8>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80069b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069b6:	3338      	adds	r3, #56	; 0x38
 80069b8:	3316      	adds	r3, #22
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe f87e 	bl	8004abc <ld_word>
 80069c0:	4603      	mov	r3, r0
 80069c2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80069c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d106      	bne.n	80069d8 <find_volume+0x218>
 80069ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069cc:	3338      	adds	r3, #56	; 0x38
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f7fe f88b 	bl	8004aec <ld_dword>
 80069d6:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80069d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069dc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80069de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e0:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80069e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80069e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ea:	789b      	ldrb	r3, [r3, #2]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d005      	beq.n	80069fc <find_volume+0x23c>
 80069f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069f2:	789b      	ldrb	r3, [r3, #2]
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d001      	beq.n	80069fc <find_volume+0x23c>
 80069f8:	230d      	movs	r3, #13
 80069fa:	e15d      	b.n	8006cb8 <find_volume+0x4f8>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80069fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069fe:	789b      	ldrb	r3, [r3, #2]
 8006a00:	461a      	mov	r2, r3
 8006a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
 8006a08:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a18:	895b      	ldrh	r3, [r3, #10]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d008      	beq.n	8006a30 <find_volume+0x270>
 8006a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a20:	895b      	ldrh	r3, [r3, #10]
 8006a22:	461a      	mov	r2, r3
 8006a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a26:	895b      	ldrh	r3, [r3, #10]
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <find_volume+0x274>
 8006a30:	230d      	movs	r3, #13
 8006a32:	e141      	b.n	8006cb8 <find_volume+0x4f8>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a36:	3338      	adds	r3, #56	; 0x38
 8006a38:	3311      	adds	r3, #17
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe f83e 	bl	8004abc <ld_word>
 8006a40:	4603      	mov	r3, r0
 8006a42:	461a      	mov	r2, r3
 8006a44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a46:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4a:	891b      	ldrh	r3, [r3, #8]
 8006a4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a4e:	8992      	ldrh	r2, [r2, #12]
 8006a50:	0952      	lsrs	r2, r2, #5
 8006a52:	b292      	uxth	r2, r2
 8006a54:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a58:	fb02 f201 	mul.w	r2, r2, r1
 8006a5c:	1a9b      	subs	r3, r3, r2
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d001      	beq.n	8006a68 <find_volume+0x2a8>
 8006a64:	230d      	movs	r3, #13
 8006a66:	e127      	b.n	8006cb8 <find_volume+0x4f8>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6a:	3338      	adds	r3, #56	; 0x38
 8006a6c:	3313      	adds	r3, #19
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7fe f824 	bl	8004abc <ld_word>
 8006a74:	4603      	mov	r3, r0
 8006a76:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d106      	bne.n	8006a8c <find_volume+0x2cc>
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	3338      	adds	r3, #56	; 0x38
 8006a82:	3320      	adds	r3, #32
 8006a84:	4618      	mov	r0, r3
 8006a86:	f7fe f831 	bl	8004aec <ld_dword>
 8006a8a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	3338      	adds	r3, #56	; 0x38
 8006a90:	330e      	adds	r3, #14
 8006a92:	4618      	mov	r0, r3
 8006a94:	f7fe f812 	bl	8004abc <ld_word>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006a9c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d104      	bne.n	8006aac <find_volume+0x2ec>
 8006aa2:	230d      	movs	r3, #13
 8006aa4:	e108      	b.n	8006cb8 <find_volume+0x4f8>
 8006aa6:	bf00      	nop
 8006aa8:	200000c8 	.word	0x200000c8

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006aac:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab0:	4413      	add	r3, r2
 8006ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab4:	8911      	ldrh	r1, [r2, #8]
 8006ab6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006ab8:	8992      	ldrh	r2, [r2, #12]
 8006aba:	0952      	lsrs	r2, r2, #5
 8006abc:	b292      	uxth	r2, r2
 8006abe:	fbb1 f2f2 	udiv	r2, r1, r2
 8006ac2:	b292      	uxth	r2, r2
 8006ac4:	4413      	add	r3, r2
 8006ac6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d201      	bcs.n	8006ad4 <find_volume+0x314>
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	e0f1      	b.n	8006cb8 <find_volume+0x4f8>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006ad4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	1ad3      	subs	r3, r2, r3
 8006ada:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006adc:	8952      	ldrh	r2, [r2, #10]
 8006ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d101      	bne.n	8006aee <find_volume+0x32e>
 8006aea:	230d      	movs	r3, #13
 8006aec:	e0e4      	b.n	8006cb8 <find_volume+0x4f8>
		fmt = FS_FAT32;
 8006aee:	2303      	movs	r3, #3
 8006af0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d802      	bhi.n	8006b04 <find_volume+0x344>
 8006afe:	2302      	movs	r3, #2
 8006b00:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b06:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d802      	bhi.n	8006b14 <find_volume+0x354>
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	1c9a      	adds	r2, r3, #2
 8006b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1a:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8006b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b20:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006b22:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b26:	441a      	add	r2, r3
 8006b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b2a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8006b2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b30:	441a      	add	r2, r3
 8006b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8006b36:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b3a:	2b03      	cmp	r3, #3
 8006b3c:	d11e      	bne.n	8006b7c <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b40:	3338      	adds	r3, #56	; 0x38
 8006b42:	332a      	adds	r3, #42	; 0x2a
 8006b44:	4618      	mov	r0, r3
 8006b46:	f7fd ffb9 	bl	8004abc <ld_word>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d001      	beq.n	8006b54 <find_volume+0x394>
 8006b50:	230d      	movs	r3, #13
 8006b52:	e0b1      	b.n	8006cb8 <find_volume+0x4f8>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	891b      	ldrh	r3, [r3, #8]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d001      	beq.n	8006b60 <find_volume+0x3a0>
 8006b5c:	230d      	movs	r3, #13
 8006b5e:	e0ab      	b.n	8006cb8 <find_volume+0x4f8>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b62:	3338      	adds	r3, #56	; 0x38
 8006b64:	332c      	adds	r3, #44	; 0x2c
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd ffc0 	bl	8004aec <ld_dword>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b70:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	647b      	str	r3, [r7, #68]	; 0x44
 8006b7a:	e01f      	b.n	8006bbc <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b7e:	891b      	ldrh	r3, [r3, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <find_volume+0x3c8>
 8006b84:	230d      	movs	r3, #13
 8006b86:	e097      	b.n	8006cb8 <find_volume+0x4f8>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8e:	441a      	add	r2, r3
 8006b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b92:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006b94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d103      	bne.n	8006ba4 <find_volume+0x3e4>
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	69db      	ldr	r3, [r3, #28]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	e00a      	b.n	8006bba <find_volume+0x3fa>
 8006ba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba6:	69da      	ldr	r2, [r3, #28]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	005b      	lsls	r3, r3, #1
 8006bac:	4413      	add	r3, r2
 8006bae:	085a      	lsrs	r2, r3, #1
 8006bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	f003 0301 	and.w	r3, r3, #1
 8006bb8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006bba:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bbe:	6a1a      	ldr	r2, [r3, #32]
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	899b      	ldrh	r3, [r3, #12]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006bc8:	440b      	add	r3, r1
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bce:	8989      	ldrh	r1, [r1, #12]
 8006bd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d201      	bcs.n	8006bdc <find_volume+0x41c>
 8006bd8:	230d      	movs	r3, #13
 8006bda:	e06d      	b.n	8006cb8 <find_volume+0x4f8>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bde:	f04f 32ff 	mov.w	r2, #4294967295
 8006be2:	619a      	str	r2, [r3, #24]
 8006be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be6:	699a      	ldr	r2, [r3, #24]
 8006be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bea:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8006bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bee:	2280      	movs	r2, #128	; 0x80
 8006bf0:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006bf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bf6:	2b03      	cmp	r3, #3
 8006bf8:	d149      	bne.n	8006c8e <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfc:	3338      	adds	r3, #56	; 0x38
 8006bfe:	3330      	adds	r3, #48	; 0x30
 8006c00:	4618      	mov	r0, r3
 8006c02:	f7fd ff5b 	bl	8004abc <ld_word>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d140      	bne.n	8006c8e <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c0e:	3301      	adds	r3, #1
 8006c10:	4619      	mov	r1, r3
 8006c12:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c14:	f7fe fa02 	bl	800501c <move_window>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d137      	bne.n	8006c8e <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 8006c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c20:	2200      	movs	r2, #0
 8006c22:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c26:	3338      	adds	r3, #56	; 0x38
 8006c28:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f7fd ff45 	bl	8004abc <ld_word>
 8006c32:	4603      	mov	r3, r0
 8006c34:	461a      	mov	r2, r3
 8006c36:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d127      	bne.n	8006c8e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c40:	3338      	adds	r3, #56	; 0x38
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fd ff52 	bl	8004aec <ld_dword>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <find_volume+0x500>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d11e      	bne.n	8006c8e <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c52:	3338      	adds	r3, #56	; 0x38
 8006c54:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006c58:	4618      	mov	r0, r3
 8006c5a:	f7fd ff47 	bl	8004aec <ld_dword>
 8006c5e:	4603      	mov	r3, r0
 8006c60:	4a18      	ldr	r2, [pc, #96]	; (8006cc4 <find_volume+0x504>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d113      	bne.n	8006c8e <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	3338      	adds	r3, #56	; 0x38
 8006c6a:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fd ff3c 	bl	8004aec <ld_dword>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c78:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c7c:	3338      	adds	r3, #56	; 0x38
 8006c7e:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd ff32 	bl	8004aec <ld_dword>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c8c:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006c94:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006c96:	4b0c      	ldr	r3, [pc, #48]	; (8006cc8 <find_volume+0x508>)
 8006c98:	881b      	ldrh	r3, [r3, #0]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	4b0a      	ldr	r3, [pc, #40]	; (8006cc8 <find_volume+0x508>)
 8006ca0:	801a      	strh	r2, [r3, #0]
 8006ca2:	4b09      	ldr	r3, [pc, #36]	; (8006cc8 <find_volume+0x508>)
 8006ca4:	881a      	ldrh	r2, [r3, #0]
 8006ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca8:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	4a07      	ldr	r2, [pc, #28]	; (8006ccc <find_volume+0x50c>)
 8006cae:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006cb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006cb2:	f7fe f94b 	bl	8004f4c <clear_lock>
#endif
	return FR_OK;
 8006cb6:	2300      	movs	r3, #0
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3758      	adds	r7, #88	; 0x58
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}
 8006cc0:	41615252 	.word	0x41615252
 8006cc4:	61417272 	.word	0x61417272
 8006cc8:	200000cc 	.word	0x200000cc
 8006ccc:	200000f0 	.word	0x200000f0

08006cd0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006cda:	2309      	movs	r3, #9
 8006cdc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01c      	beq.n	8006d1e <validate+0x4e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d018      	beq.n	8006d1e <validate+0x4e>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d013      	beq.n	8006d1e <validate+0x4e>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	889a      	ldrh	r2, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	88db      	ldrh	r3, [r3, #6]
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d10c      	bne.n	8006d1e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	785b      	ldrb	r3, [r3, #1]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fd fe38 	bl	8004980 <disk_status>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f003 0301 	and.w	r3, r3, #1
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d101      	bne.n	8006d1e <validate+0x4e>
			res = FR_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d1e:	7bfb      	ldrb	r3, [r7, #15]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d102      	bne.n	8006d2a <validate+0x5a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	e000      	b.n	8006d2c <validate+0x5c>
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	683a      	ldr	r2, [r7, #0]
 8006d2e:	6013      	str	r3, [r2, #0]
	return res;
 8006d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
	...

08006d3c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	60f8      	str	r0, [r7, #12]
 8006d44:	60b9      	str	r1, [r7, #8]
 8006d46:	4613      	mov	r3, r2
 8006d48:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006d4e:	f107 0310 	add.w	r3, r7, #16
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7ff fc9a 	bl	800668c <get_ldnumber>
 8006d58:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006d5a:	69fb      	ldr	r3, [r7, #28]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	da01      	bge.n	8006d64 <f_mount+0x28>
 8006d60:	230b      	movs	r3, #11
 8006d62:	e02b      	b.n	8006dbc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006d64:	4a17      	ldr	r2, [pc, #92]	; (8006dc4 <f_mount+0x88>)
 8006d66:	69fb      	ldr	r3, [r7, #28]
 8006d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006d6c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d005      	beq.n	8006d80 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006d74:	69b8      	ldr	r0, [r7, #24]
 8006d76:	f7fe f8e9 	bl	8004f4c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d002      	beq.n	8006d8c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	490d      	ldr	r1, [pc, #52]	; (8006dc4 <f_mount+0x88>)
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d002      	beq.n	8006da2 <f_mount+0x66>
 8006d9c:	79fb      	ldrb	r3, [r7, #7]
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d001      	beq.n	8006da6 <f_mount+0x6a>
 8006da2:	2300      	movs	r3, #0
 8006da4:	e00a      	b.n	8006dbc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006da6:	f107 010c 	add.w	r1, r7, #12
 8006daa:	f107 0308 	add.w	r3, r7, #8
 8006dae:	2200      	movs	r2, #0
 8006db0:	4618      	mov	r0, r3
 8006db2:	f7ff fd05 	bl	80067c0 <find_volume>
 8006db6:	4603      	mov	r3, r0
 8006db8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3720      	adds	r7, #32
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	200000c8 	.word	0x200000c8

08006dc8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b09a      	sub	sp, #104	; 0x68
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d101      	bne.n	8006de0 <f_open+0x18>
 8006ddc:	2309      	movs	r3, #9
 8006dde:	e1bb      	b.n	8007158 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006de0:	79fb      	ldrb	r3, [r7, #7]
 8006de2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006de6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006de8:	79fa      	ldrb	r2, [r7, #7]
 8006dea:	f107 0114 	add.w	r1, r7, #20
 8006dee:	f107 0308 	add.w	r3, r7, #8
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7ff fce4 	bl	80067c0 <find_volume>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8006dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 819f 	bne.w	8007146 <f_open+0x37e>
		dj.obj.fs = fs;
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	f107 0318 	add.w	r3, r7, #24
 8006e12:	4611      	mov	r1, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7ff fbc3 	bl	80065a0 <follow_path>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e20:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11a      	bne.n	8006e5e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006e2c:	b25b      	sxtb	r3, r3
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	da03      	bge.n	8006e3a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006e32:	2306      	movs	r3, #6
 8006e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006e38:	e011      	b.n	8006e5e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006e3a:	79fb      	ldrb	r3, [r7, #7]
 8006e3c:	f023 0301 	bic.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	bf14      	ite	ne
 8006e44:	2301      	movne	r3, #1
 8006e46:	2300      	moveq	r3, #0
 8006e48:	b2db      	uxtb	r3, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	f107 0318 	add.w	r3, r7, #24
 8006e50:	4611      	mov	r1, r2
 8006e52:	4618      	mov	r0, r3
 8006e54:	f7fd ff32 	bl	8004cbc <chk_lock>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006e5e:	79fb      	ldrb	r3, [r7, #7]
 8006e60:	f003 031c 	and.w	r3, r3, #28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d07f      	beq.n	8006f68 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006e68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d017      	beq.n	8006ea0 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006e70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d10e      	bne.n	8006e96 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006e78:	f7fd ff7c 	bl	8004d74 <enq_lock>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d006      	beq.n	8006e90 <f_open+0xc8>
 8006e82:	f107 0318 	add.w	r3, r7, #24
 8006e86:	4618      	mov	r0, r3
 8006e88:	f7ff f8da 	bl	8006040 <dir_register>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	e000      	b.n	8006e92 <f_open+0xca>
 8006e90:	2312      	movs	r3, #18
 8006e92:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006e96:	79fb      	ldrb	r3, [r7, #7]
 8006e98:	f043 0308 	orr.w	r3, r3, #8
 8006e9c:	71fb      	strb	r3, [r7, #7]
 8006e9e:	e010      	b.n	8006ec2 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006ea0:	7fbb      	ldrb	r3, [r7, #30]
 8006ea2:	f003 0311 	and.w	r3, r3, #17
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d003      	beq.n	8006eb2 <f_open+0xea>
					res = FR_DENIED;
 8006eaa:	2307      	movs	r3, #7
 8006eac:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006eb0:	e007      	b.n	8006ec2 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	f003 0304 	and.w	r3, r3, #4
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <f_open+0xfa>
 8006ebc:	2308      	movs	r3, #8
 8006ebe:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006ec2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d168      	bne.n	8006f9c <f_open+0x1d4>
 8006eca:	79fb      	ldrb	r3, [r7, #7]
 8006ecc:	f003 0308 	and.w	r3, r3, #8
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d063      	beq.n	8006f9c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006ed4:	f7fd fce8 	bl	80048a8 <get_fattime>
 8006ed8:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006edc:	330e      	adds	r3, #14
 8006ede:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f7fd fe41 	bl	8004b68 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee8:	3316      	adds	r3, #22
 8006eea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7fd fe3b 	bl	8004b68 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ef4:	330b      	adds	r3, #11
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006efe:	4611      	mov	r1, r2
 8006f00:	4618      	mov	r0, r3
 8006f02:	f7fe fe13 	bl	8005b2c <ld_clust>
 8006f06:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	4618      	mov	r0, r3
 8006f10:	f7fe fe2b 	bl	8005b6a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	331c      	adds	r3, #28
 8006f18:	2100      	movs	r1, #0
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f7fd fe24 	bl	8004b68 <st_dword>
					fs->wflag = 1;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	2201      	movs	r2, #1
 8006f24:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d037      	beq.n	8006f9c <f_open+0x1d4>
						dw = fs->winsect;
 8006f2c:	697b      	ldr	r3, [r7, #20]
 8006f2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f30:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8006f32:	f107 0318 	add.w	r3, r7, #24
 8006f36:	2200      	movs	r2, #0
 8006f38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fb1b 	bl	8005576 <remove_chain>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8006f46:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d126      	bne.n	8006f9c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe f862 	bl	800501c <move_window>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006f62:	3a01      	subs	r2, #1
 8006f64:	615a      	str	r2, [r3, #20]
 8006f66:	e019      	b.n	8006f9c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006f68:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d115      	bne.n	8006f9c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006f70:	7fbb      	ldrb	r3, [r7, #30]
 8006f72:	f003 0310 	and.w	r3, r3, #16
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006f7a:	2304      	movs	r3, #4
 8006f7c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8006f80:	e00c      	b.n	8006f9c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006f82:	79fb      	ldrb	r3, [r7, #7]
 8006f84:	f003 0302 	and.w	r3, r3, #2
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d007      	beq.n	8006f9c <f_open+0x1d4>
 8006f8c:	7fbb      	ldrb	r3, [r7, #30]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d002      	beq.n	8006f9c <f_open+0x1d4>
						res = FR_DENIED;
 8006f96:	2307      	movs	r3, #7
 8006f98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d128      	bne.n	8006ff6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006fa4:	79fb      	ldrb	r3, [r7, #7]
 8006fa6:	f003 0308 	and.w	r3, r3, #8
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d003      	beq.n	8006fb6 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8006fae:	79fb      	ldrb	r3, [r7, #7]
 8006fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fb4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8006fbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006fc4:	79fb      	ldrb	r3, [r7, #7]
 8006fc6:	f023 0301 	bic.w	r3, r3, #1
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	bf14      	ite	ne
 8006fce:	2301      	movne	r3, #1
 8006fd0:	2300      	moveq	r3, #0
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	f107 0318 	add.w	r3, r7, #24
 8006fda:	4611      	mov	r1, r2
 8006fdc:	4618      	mov	r0, r3
 8006fde:	f7fd feeb 	bl	8004db8 <inc_lock>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d102      	bne.n	8006ff6 <f_open+0x22e>
 8006ff0:	2302      	movs	r3, #2
 8006ff2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006ff6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f040 80a3 	bne.w	8007146 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007004:	4611      	mov	r1, r2
 8007006:	4618      	mov	r0, r3
 8007008:	f7fe fd90 	bl	8005b2c <ld_clust>
 800700c:	4602      	mov	r2, r0
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007014:	331c      	adds	r3, #28
 8007016:	4618      	mov	r0, r3
 8007018:	f7fd fd68 	bl	8004aec <ld_dword>
 800701c:	4602      	mov	r2, r0
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007028:	697a      	ldr	r2, [r7, #20]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	88da      	ldrh	r2, [r3, #6]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	79fa      	ldrb	r2, [r7, #7]
 800703a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2200      	movs	r2, #0
 8007040:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2200      	movs	r2, #0
 8007046:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2200      	movs	r2, #0
 800704c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3330      	adds	r3, #48	; 0x30
 8007052:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007056:	2100      	movs	r1, #0
 8007058:	4618      	mov	r0, r3
 800705a:	f7fd fdd2 	bl	8004c02 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800705e:	79fb      	ldrb	r3, [r7, #7]
 8007060:	f003 0320 	and.w	r3, r3, #32
 8007064:	2b00      	cmp	r3, #0
 8007066:	d06e      	beq.n	8007146 <f_open+0x37e>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	68db      	ldr	r3, [r3, #12]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d06a      	beq.n	8007146 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	68da      	ldr	r2, [r3, #12]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	895b      	ldrh	r3, [r3, #10]
 800707c:	461a      	mov	r2, r3
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	899b      	ldrh	r3, [r3, #12]
 8007082:	fb03 f302 	mul.w	r3, r3, r2
 8007086:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	68db      	ldr	r3, [r3, #12]
 8007092:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007094:	e016      	b.n	80070c4 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800709a:	4618      	mov	r0, r3
 800709c:	f7fe f87b 	bl	8005196 <get_fat>
 80070a0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80070a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070a4:	2b01      	cmp	r3, #1
 80070a6:	d802      	bhi.n	80070ae <f_open+0x2e6>
 80070a8:	2302      	movs	r3, #2
 80070aa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80070ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b4:	d102      	bne.n	80070bc <f_open+0x2f4>
 80070b6:	2301      	movs	r3, #1
 80070b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070c0:	1ad3      	subs	r3, r2, r3
 80070c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070c4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d103      	bne.n	80070d4 <f_open+0x30c>
 80070cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070d0:	429a      	cmp	r2, r3
 80070d2:	d8e0      	bhi.n	8007096 <f_open+0x2ce>
				}
				fp->clust = clst;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80070d8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80070da:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d131      	bne.n	8007146 <f_open+0x37e>
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	899b      	ldrh	r3, [r3, #12]
 80070e6:	461a      	mov	r2, r3
 80070e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80070ee:	fb02 f201 	mul.w	r2, r2, r1
 80070f2:	1a9b      	subs	r3, r3, r2
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d026      	beq.n	8007146 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80070f8:	697b      	ldr	r3, [r7, #20]
 80070fa:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80070fc:	4618      	mov	r0, r3
 80070fe:	f7fe f82b 	bl	8005158 <clust2sect>
 8007102:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007104:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007106:	2b00      	cmp	r3, #0
 8007108:	d103      	bne.n	8007112 <f_open+0x34a>
						res = FR_INT_ERR;
 800710a:	2302      	movs	r3, #2
 800710c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007110:	e019      	b.n	8007146 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007112:	697b      	ldr	r3, [r7, #20]
 8007114:	899b      	ldrh	r3, [r3, #12]
 8007116:	461a      	mov	r2, r3
 8007118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800711a:	fbb3 f2f2 	udiv	r2, r3, r2
 800711e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007120:	441a      	add	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007126:	697b      	ldr	r3, [r7, #20]
 8007128:	7858      	ldrb	r0, [r3, #1]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6a1a      	ldr	r2, [r3, #32]
 8007134:	2301      	movs	r3, #1
 8007136:	f7fd fc63 	bl	8004a00 <disk_read>
 800713a:	4603      	mov	r3, r0
 800713c:	2b00      	cmp	r3, #0
 800713e:	d002      	beq.n	8007146 <f_open+0x37e>
 8007140:	2301      	movs	r3, #1
 8007142:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007146:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800714a:	2b00      	cmp	r3, #0
 800714c:	d002      	beq.n	8007154 <f_open+0x38c>
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2200      	movs	r2, #0
 8007152:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007154:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007158:	4618      	mov	r0, r3
 800715a:	3768      	adds	r7, #104	; 0x68
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08e      	sub	sp, #56	; 0x38
 8007164:	af00      	add	r7, sp, #0
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	607a      	str	r2, [r7, #4]
 800716c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	2200      	movs	r2, #0
 8007176:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f107 0214 	add.w	r2, r7, #20
 800717e:	4611      	mov	r1, r2
 8007180:	4618      	mov	r0, r3
 8007182:	f7ff fda5 	bl	8006cd0 <validate>
 8007186:	4603      	mov	r3, r0
 8007188:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800718c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007190:	2b00      	cmp	r3, #0
 8007192:	d107      	bne.n	80071a4 <f_read+0x44>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	7d5b      	ldrb	r3, [r3, #21]
 8007198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800719c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d002      	beq.n	80071aa <f_read+0x4a>
 80071a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071a8:	e135      	b.n	8007416 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7d1b      	ldrb	r3, [r3, #20]
 80071ae:	f003 0301 	and.w	r3, r3, #1
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <f_read+0x5a>
 80071b6:	2307      	movs	r3, #7
 80071b8:	e12d      	b.n	8007416 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	68da      	ldr	r2, [r3, #12]
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	1ad3      	subs	r3, r2, r3
 80071c4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	6a3b      	ldr	r3, [r7, #32]
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f240 811e 	bls.w	800740c <f_read+0x2ac>
 80071d0:	6a3b      	ldr	r3, [r7, #32]
 80071d2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80071d4:	e11a      	b.n	800740c <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	699b      	ldr	r3, [r3, #24]
 80071da:	697a      	ldr	r2, [r7, #20]
 80071dc:	8992      	ldrh	r2, [r2, #12]
 80071de:	fbb3 f1f2 	udiv	r1, r3, r2
 80071e2:	fb02 f201 	mul.w	r2, r2, r1
 80071e6:	1a9b      	subs	r3, r3, r2
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f040 80d5 	bne.w	8007398 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	699b      	ldr	r3, [r3, #24]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	8992      	ldrh	r2, [r2, #12]
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	8952      	ldrh	r2, [r2, #10]
 80071fe:	3a01      	subs	r2, #1
 8007200:	4013      	ands	r3, r2
 8007202:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d12f      	bne.n	800726a <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	699b      	ldr	r3, [r3, #24]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	633b      	str	r3, [r7, #48]	; 0x30
 8007218:	e013      	b.n	8007242 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800721e:	2b00      	cmp	r3, #0
 8007220:	d007      	beq.n	8007232 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	699b      	ldr	r3, [r3, #24]
 8007226:	4619      	mov	r1, r3
 8007228:	68f8      	ldr	r0, [r7, #12]
 800722a:	f7fe faa1 	bl	8005770 <clmt_clust>
 800722e:	6338      	str	r0, [r7, #48]	; 0x30
 8007230:	e007      	b.n	8007242 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	69db      	ldr	r3, [r3, #28]
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fd ffab 	bl	8005196 <get_fat>
 8007240:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8007242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007244:	2b01      	cmp	r3, #1
 8007246:	d804      	bhi.n	8007252 <f_read+0xf2>
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2202      	movs	r2, #2
 800724c:	755a      	strb	r2, [r3, #21]
 800724e:	2302      	movs	r3, #2
 8007250:	e0e1      	b.n	8007416 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007258:	d104      	bne.n	8007264 <f_read+0x104>
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2201      	movs	r2, #1
 800725e:	755a      	strb	r2, [r3, #21]
 8007260:	2301      	movs	r3, #1
 8007262:	e0d8      	b.n	8007416 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007268:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800726a:	697a      	ldr	r2, [r7, #20]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	4619      	mov	r1, r3
 8007272:	4610      	mov	r0, r2
 8007274:	f7fd ff70 	bl	8005158 <clust2sect>
 8007278:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d104      	bne.n	800728a <f_read+0x12a>
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2202      	movs	r2, #2
 8007284:	755a      	strb	r2, [r3, #21]
 8007286:	2302      	movs	r3, #2
 8007288:	e0c5      	b.n	8007416 <f_read+0x2b6>
			sect += csect;
 800728a:	69ba      	ldr	r2, [r7, #24]
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	4413      	add	r3, r2
 8007290:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	899b      	ldrh	r3, [r3, #12]
 8007296:	461a      	mov	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	fbb3 f3f2 	udiv	r3, r3, r2
 800729e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d041      	beq.n	800732a <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072aa:	4413      	add	r3, r2
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	8952      	ldrh	r2, [r2, #10]
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d905      	bls.n	80072c0 <f_read+0x160>
					cc = fs->csize - csect;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	895b      	ldrh	r3, [r3, #10]
 80072b8:	461a      	mov	r2, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	7858      	ldrb	r0, [r3, #1]
 80072c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c6:	69ba      	ldr	r2, [r7, #24]
 80072c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80072ca:	f7fd fb99 	bl	8004a00 <disk_read>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <f_read+0x17e>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2201      	movs	r2, #1
 80072d8:	755a      	strb	r2, [r3, #21]
 80072da:	2301      	movs	r3, #1
 80072dc:	e09b      	b.n	8007416 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	7d1b      	ldrb	r3, [r3, #20]
 80072e2:	b25b      	sxtb	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	da18      	bge.n	800731a <f_read+0x1ba>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	6a1a      	ldr	r2, [r3, #32]
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	1ad3      	subs	r3, r2, r3
 80072f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d911      	bls.n	800731a <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	6a1a      	ldr	r2, [r3, #32]
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	1ad3      	subs	r3, r2, r3
 80072fe:	697a      	ldr	r2, [r7, #20]
 8007300:	8992      	ldrh	r2, [r2, #12]
 8007302:	fb02 f303 	mul.w	r3, r2, r3
 8007306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007308:	18d0      	adds	r0, r2, r3
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	899b      	ldrh	r3, [r3, #12]
 8007314:	461a      	mov	r2, r3
 8007316:	f7fd fc53 	bl	8004bc0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	899b      	ldrh	r3, [r3, #12]
 800731e:	461a      	mov	r2, r3
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	fb02 f303 	mul.w	r3, r2, r3
 8007326:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8007328:	e05c      	b.n	80073e4 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a1b      	ldr	r3, [r3, #32]
 800732e:	69ba      	ldr	r2, [r7, #24]
 8007330:	429a      	cmp	r2, r3
 8007332:	d02e      	beq.n	8007392 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	7d1b      	ldrb	r3, [r3, #20]
 8007338:	b25b      	sxtb	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	da18      	bge.n	8007370 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	7858      	ldrb	r0, [r3, #1]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a1a      	ldr	r2, [r3, #32]
 800734c:	2301      	movs	r3, #1
 800734e:	f7fd fb77 	bl	8004a40 <disk_write>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d004      	beq.n	8007362 <f_read+0x202>
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2201      	movs	r2, #1
 800735c:	755a      	strb	r2, [r3, #21]
 800735e:	2301      	movs	r3, #1
 8007360:	e059      	b.n	8007416 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	7d1b      	ldrb	r3, [r3, #20]
 8007366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800736a:	b2da      	uxtb	r2, r3
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	7858      	ldrb	r0, [r3, #1]
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800737a:	2301      	movs	r3, #1
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	f7fd fb3f 	bl	8004a00 <disk_read>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d004      	beq.n	8007392 <f_read+0x232>
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	2201      	movs	r2, #1
 800738c:	755a      	strb	r2, [r3, #21]
 800738e:	2301      	movs	r3, #1
 8007390:	e041      	b.n	8007416 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	69ba      	ldr	r2, [r7, #24]
 8007396:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	899b      	ldrh	r3, [r3, #12]
 800739c:	4618      	mov	r0, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	699b      	ldr	r3, [r3, #24]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	8992      	ldrh	r2, [r2, #12]
 80073a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80073aa:	fb02 f201 	mul.w	r2, r2, r1
 80073ae:	1a9b      	subs	r3, r3, r2
 80073b0:	1ac3      	subs	r3, r0, r3
 80073b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80073b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d901      	bls.n	80073c0 <f_read+0x260>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	8992      	ldrh	r2, [r2, #12]
 80073ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80073d2:	fb02 f200 	mul.w	r2, r2, r0
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	440b      	add	r3, r1
 80073da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073dc:	4619      	mov	r1, r3
 80073de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80073e0:	f7fd fbee 	bl	8004bc0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80073e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073e8:	4413      	add	r3, r2
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	699a      	ldr	r2, [r3, #24]
 80073f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f2:	441a      	add	r2, r3
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	619a      	str	r2, [r3, #24]
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fe:	441a      	add	r2, r3
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	601a      	str	r2, [r3, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	f47f aee1 	bne.w	80071d6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3738      	adds	r7, #56	; 0x38
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b08c      	sub	sp, #48	; 0x30
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	607a      	str	r2, [r7, #4]
 800742a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2200      	movs	r2, #0
 8007434:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	f107 0210 	add.w	r2, r7, #16
 800743c:	4611      	mov	r1, r2
 800743e:	4618      	mov	r0, r3
 8007440:	f7ff fc46 	bl	8006cd0 <validate>
 8007444:	4603      	mov	r3, r0
 8007446:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800744a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800744e:	2b00      	cmp	r3, #0
 8007450:	d107      	bne.n	8007462 <f_write+0x44>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	7d5b      	ldrb	r3, [r3, #21]
 8007456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800745a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800745e:	2b00      	cmp	r3, #0
 8007460:	d002      	beq.n	8007468 <f_write+0x4a>
 8007462:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007466:	e16a      	b.n	800773e <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	7d1b      	ldrb	r3, [r3, #20]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d101      	bne.n	8007478 <f_write+0x5a>
 8007474:	2307      	movs	r3, #7
 8007476:	e162      	b.n	800773e <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	441a      	add	r2, r3
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	699b      	ldr	r3, [r3, #24]
 8007484:	429a      	cmp	r2, r3
 8007486:	f080 814c 	bcs.w	8007722 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	43db      	mvns	r3, r3
 8007490:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007492:	e146      	b.n	8007722 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	699b      	ldr	r3, [r3, #24]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	8992      	ldrh	r2, [r2, #12]
 800749c:	fbb3 f1f2 	udiv	r1, r3, r2
 80074a0:	fb02 f201 	mul.w	r2, r2, r1
 80074a4:	1a9b      	subs	r3, r3, r2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f040 80f1 	bne.w	800768e <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	8992      	ldrh	r2, [r2, #12]
 80074b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80074b8:	693a      	ldr	r2, [r7, #16]
 80074ba:	8952      	ldrh	r2, [r2, #10]
 80074bc:	3a01      	subs	r2, #1
 80074be:	4013      	ands	r3, r2
 80074c0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80074c2:	69bb      	ldr	r3, [r7, #24]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d143      	bne.n	8007550 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	699b      	ldr	r3, [r3, #24]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d10c      	bne.n	80074ea <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11a      	bne.n	8007512 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2100      	movs	r1, #0
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7fe f8ad 	bl	8005640 <create_chain>
 80074e6:	62b8      	str	r0, [r7, #40]	; 0x28
 80074e8:	e013      	b.n	8007512 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d007      	beq.n	8007502 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	699b      	ldr	r3, [r3, #24]
 80074f6:	4619      	mov	r1, r3
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7fe f939 	bl	8005770 <clmt_clust>
 80074fe:	62b8      	str	r0, [r7, #40]	; 0x28
 8007500:	e007      	b.n	8007512 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	69db      	ldr	r3, [r3, #28]
 8007508:	4619      	mov	r1, r3
 800750a:	4610      	mov	r0, r2
 800750c:	f7fe f898 	bl	8005640 <create_chain>
 8007510:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 8109 	beq.w	800772c <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800751a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751c:	2b01      	cmp	r3, #1
 800751e:	d104      	bne.n	800752a <f_write+0x10c>
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2202      	movs	r2, #2
 8007524:	755a      	strb	r2, [r3, #21]
 8007526:	2302      	movs	r3, #2
 8007528:	e109      	b.n	800773e <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800752a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007530:	d104      	bne.n	800753c <f_write+0x11e>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	755a      	strb	r2, [r3, #21]
 8007538:	2301      	movs	r3, #1
 800753a:	e100      	b.n	800773e <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007540:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	689b      	ldr	r3, [r3, #8]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d102      	bne.n	8007550 <f_write+0x132>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800754e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	7d1b      	ldrb	r3, [r3, #20]
 8007554:	b25b      	sxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	da18      	bge.n	800758c <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	7858      	ldrb	r0, [r3, #1]
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1a      	ldr	r2, [r3, #32]
 8007568:	2301      	movs	r3, #1
 800756a:	f7fd fa69 	bl	8004a40 <disk_write>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d004      	beq.n	800757e <f_write+0x160>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2201      	movs	r2, #1
 8007578:	755a      	strb	r2, [r3, #21]
 800757a:	2301      	movs	r3, #1
 800757c:	e0df      	b.n	800773e <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	7d1b      	ldrb	r3, [r3, #20]
 8007582:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007586:	b2da      	uxtb	r2, r3
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	69db      	ldr	r3, [r3, #28]
 8007592:	4619      	mov	r1, r3
 8007594:	4610      	mov	r0, r2
 8007596:	f7fd fddf 	bl	8005158 <clust2sect>
 800759a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d104      	bne.n	80075ac <f_write+0x18e>
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2202      	movs	r2, #2
 80075a6:	755a      	strb	r2, [r3, #21]
 80075a8:	2302      	movs	r3, #2
 80075aa:	e0c8      	b.n	800773e <f_write+0x320>
			sect += csect;
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	4413      	add	r3, r2
 80075b2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	899b      	ldrh	r3, [r3, #12]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80075c0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80075c2:	6a3b      	ldr	r3, [r7, #32]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d043      	beq.n	8007650 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	6a3b      	ldr	r3, [r7, #32]
 80075cc:	4413      	add	r3, r2
 80075ce:	693a      	ldr	r2, [r7, #16]
 80075d0:	8952      	ldrh	r2, [r2, #10]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d905      	bls.n	80075e2 <f_write+0x1c4>
					cc = fs->csize - csect;
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	895b      	ldrh	r3, [r3, #10]
 80075da:	461a      	mov	r2, r3
 80075dc:	69bb      	ldr	r3, [r7, #24]
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	7858      	ldrb	r0, [r3, #1]
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	69f9      	ldr	r1, [r7, #28]
 80075ec:	f7fd fa28 	bl	8004a40 <disk_write>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d004      	beq.n	8007600 <f_write+0x1e2>
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	2201      	movs	r2, #1
 80075fa:	755a      	strb	r2, [r3, #21]
 80075fc:	2301      	movs	r3, #1
 80075fe:	e09e      	b.n	800773e <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6a1a      	ldr	r2, [r3, #32]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	1ad3      	subs	r3, r2, r3
 8007608:	6a3a      	ldr	r2, [r7, #32]
 800760a:	429a      	cmp	r2, r3
 800760c:	d918      	bls.n	8007640 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6a1a      	ldr	r2, [r3, #32]
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	8992      	ldrh	r2, [r2, #12]
 8007620:	fb02 f303 	mul.w	r3, r2, r3
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	18d1      	adds	r1, r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	899b      	ldrh	r3, [r3, #12]
 800762c:	461a      	mov	r2, r3
 800762e:	f7fd fac7 	bl	8004bc0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	7d1b      	ldrb	r3, [r3, #20]
 8007636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800763a:	b2da      	uxtb	r2, r3
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	899b      	ldrh	r3, [r3, #12]
 8007644:	461a      	mov	r2, r3
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	fb02 f303 	mul.w	r3, r2, r3
 800764c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800764e:	e04b      	b.n	80076e8 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a1b      	ldr	r3, [r3, #32]
 8007654:	697a      	ldr	r2, [r7, #20]
 8007656:	429a      	cmp	r2, r3
 8007658:	d016      	beq.n	8007688 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8007662:	429a      	cmp	r2, r3
 8007664:	d210      	bcs.n	8007688 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8007666:	693b      	ldr	r3, [r7, #16]
 8007668:	7858      	ldrb	r0, [r3, #1]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007670:	2301      	movs	r3, #1
 8007672:	697a      	ldr	r2, [r7, #20]
 8007674:	f7fd f9c4 	bl	8004a00 <disk_read>
 8007678:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800767a:	2b00      	cmp	r3, #0
 800767c:	d004      	beq.n	8007688 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	2201      	movs	r2, #1
 8007682:	755a      	strb	r2, [r3, #21]
 8007684:	2301      	movs	r3, #1
 8007686:	e05a      	b.n	800773e <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	697a      	ldr	r2, [r7, #20]
 800768c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	899b      	ldrh	r3, [r3, #12]
 8007692:	4618      	mov	r0, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	8992      	ldrh	r2, [r2, #12]
 800769c:	fbb3 f1f2 	udiv	r1, r3, r2
 80076a0:	fb02 f201 	mul.w	r2, r2, r1
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	1ac3      	subs	r3, r0, r3
 80076a8:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80076aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d901      	bls.n	80076b6 <f_write+0x298>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	8992      	ldrh	r2, [r2, #12]
 80076c4:	fbb3 f0f2 	udiv	r0, r3, r2
 80076c8:	fb02 f200 	mul.w	r2, r2, r0
 80076cc:	1a9b      	subs	r3, r3, r2
 80076ce:	440b      	add	r3, r1
 80076d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076d2:	69f9      	ldr	r1, [r7, #28]
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fa73 	bl	8004bc0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	7d1b      	ldrb	r3, [r3, #20]
 80076de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80076e8:	69fa      	ldr	r2, [r7, #28]
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	4413      	add	r3, r2
 80076ee:	61fb      	str	r3, [r7, #28]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	699a      	ldr	r2, [r3, #24]
 80076f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f6:	441a      	add	r2, r3
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	619a      	str	r2, [r3, #24]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	699b      	ldr	r3, [r3, #24]
 8007704:	429a      	cmp	r2, r3
 8007706:	bf38      	it	cc
 8007708:	461a      	movcc	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	60da      	str	r2, [r3, #12]
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007714:	441a      	add	r2, r3
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	601a      	str	r2, [r3, #0]
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	f47f aeb5 	bne.w	8007494 <f_write+0x76>
 800772a:	e000      	b.n	800772e <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800772c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	7d1b      	ldrb	r3, [r3, #20]
 8007732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3730      	adds	r7, #48	; 0x30
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b086      	sub	sp, #24
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f107 0208 	add.w	r2, r7, #8
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7ff faba 	bl	8006cd0 <validate>
 800775c:	4603      	mov	r3, r0
 800775e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007760:	7dfb      	ldrb	r3, [r7, #23]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d168      	bne.n	8007838 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	7d1b      	ldrb	r3, [r3, #20]
 800776a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d062      	beq.n	8007838 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	7d1b      	ldrb	r3, [r3, #20]
 8007776:	b25b      	sxtb	r3, r3
 8007778:	2b00      	cmp	r3, #0
 800777a:	da15      	bge.n	80077a8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7858      	ldrb	r0, [r3, #1]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6a1a      	ldr	r2, [r3, #32]
 800778a:	2301      	movs	r3, #1
 800778c:	f7fd f958 	bl	8004a40 <disk_write>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <f_sync+0x54>
 8007796:	2301      	movs	r3, #1
 8007798:	e04f      	b.n	800783a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	7d1b      	ldrb	r3, [r3, #20]
 800779e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a2:	b2da      	uxtb	r2, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80077a8:	f7fd f87e 	bl	80048a8 <get_fattime>
 80077ac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	4619      	mov	r1, r3
 80077b6:	4610      	mov	r0, r2
 80077b8:	f7fd fc30 	bl	800501c <move_window>
 80077bc:	4603      	mov	r3, r0
 80077be:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d138      	bne.n	8007838 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	330b      	adds	r3, #11
 80077d0:	781a      	ldrb	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	330b      	adds	r3, #11
 80077d6:	f042 0220 	orr.w	r2, r2, #32
 80077da:	b2d2      	uxtb	r2, r2
 80077dc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	6818      	ldr	r0, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	461a      	mov	r2, r3
 80077e8:	68f9      	ldr	r1, [r7, #12]
 80077ea:	f7fe f9be 	bl	8005b6a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	f103 021c 	add.w	r2, r3, #28
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fd f9b4 	bl	8004b68 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3316      	adds	r3, #22
 8007804:	6939      	ldr	r1, [r7, #16]
 8007806:	4618      	mov	r0, r3
 8007808:	f7fd f9ae 	bl	8004b68 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	3312      	adds	r3, #18
 8007810:	2100      	movs	r1, #0
 8007812:	4618      	mov	r0, r3
 8007814:	f7fd f98d 	bl	8004b32 <st_word>
					fs->wflag = 1;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2201      	movs	r2, #1
 800781c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	4618      	mov	r0, r3
 8007822:	f7fd fc29 	bl	8005078 <sync_fs>
 8007826:	4603      	mov	r3, r0
 8007828:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	7d1b      	ldrb	r3, [r3, #20]
 800782e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007832:	b2da      	uxtb	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007838:	7dfb      	ldrb	r3, [r7, #23]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3718      	adds	r7, #24
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff ff7b 	bl	8007746 <f_sync>
 8007850:	4603      	mov	r3, r0
 8007852:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d118      	bne.n	800788c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f107 0208 	add.w	r2, r7, #8
 8007860:	4611      	mov	r1, r2
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fa34 	bl	8006cd0 <validate>
 8007868:	4603      	mov	r3, r0
 800786a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800786c:	7bfb      	ldrb	r3, [r7, #15]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d10c      	bne.n	800788c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	4618      	mov	r0, r3
 8007878:	f7fd fb2c 	bl	8004ed4 <dec_lock>
 800787c:	4603      	mov	r3, r0
 800787e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007880:	7bfb      	ldrb	r3, [r7, #15]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d102      	bne.n	800788c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2200      	movs	r2, #0
 800788a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800788c:	7bfb      	ldrb	r3, [r7, #15]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3710      	adds	r7, #16
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}

08007896 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8007896:	b580      	push	{r7, lr}
 8007898:	b090      	sub	sp, #64	; 0x40
 800789a:	af00      	add	r7, sp, #0
 800789c:	6078      	str	r0, [r7, #4]
 800789e:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f107 0208 	add.w	r2, r7, #8
 80078a6:	4611      	mov	r1, r2
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7ff fa11 	bl	8006cd0 <validate>
 80078ae:	4603      	mov	r3, r0
 80078b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 80078b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <f_lseek+0x2e>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	7d5b      	ldrb	r3, [r3, #21]
 80078c0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 80078c4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d002      	beq.n	80078d2 <f_lseek+0x3c>
 80078cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80078d0:	e201      	b.n	8007cd6 <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	f000 80d9 	beq.w	8007a8e <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d15a      	bne.n	800799a <f_lseek+0x104>
			tbl = fp->cltbl;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	1d1a      	adds	r2, r3, #4
 80078ee:	627a      	str	r2, [r7, #36]	; 0x24
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	617b      	str	r3, [r7, #20]
 80078f4:	2302      	movs	r3, #2
 80078f6:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 80078fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007900:	2b00      	cmp	r3, #0
 8007902:	d03a      	beq.n	800797a <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	613b      	str	r3, [r7, #16]
 8007908:	2300      	movs	r3, #0
 800790a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800790c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790e:	3302      	adds	r3, #2
 8007910:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8007912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007914:	60fb      	str	r3, [r7, #12]
 8007916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007918:	3301      	adds	r3, #1
 800791a:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007920:	4618      	mov	r0, r3
 8007922:	f7fd fc38 	bl	8005196 <get_fat>
 8007926:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8007928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792a:	2b01      	cmp	r3, #1
 800792c:	d804      	bhi.n	8007938 <f_lseek+0xa2>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2202      	movs	r2, #2
 8007932:	755a      	strb	r2, [r3, #21]
 8007934:	2302      	movs	r3, #2
 8007936:	e1ce      	b.n	8007cd6 <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800793e:	d104      	bne.n	800794a <f_lseek+0xb4>
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2201      	movs	r2, #1
 8007944:	755a      	strb	r2, [r3, #21]
 8007946:	2301      	movs	r3, #1
 8007948:	e1c5      	b.n	8007cd6 <f_lseek+0x440>
					} while (cl == pcl + 1);
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007950:	429a      	cmp	r2, r3
 8007952:	d0de      	beq.n	8007912 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8007954:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	429a      	cmp	r2, r3
 800795a:	d809      	bhi.n	8007970 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	1d1a      	adds	r2, r3, #4
 8007960:	627a      	str	r2, [r7, #36]	; 0x24
 8007962:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007964:	601a      	str	r2, [r3, #0]
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	1d1a      	adds	r2, r3, #4
 800796a:	627a      	str	r2, [r7, #36]	; 0x24
 800796c:	693a      	ldr	r2, [r7, #16]
 800796e:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	69db      	ldr	r3, [r3, #28]
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	429a      	cmp	r2, r3
 8007978:	d3c4      	bcc.n	8007904 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007980:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8007982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	429a      	cmp	r2, r3
 8007988:	d803      	bhi.n	8007992 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	2200      	movs	r2, #0
 800798e:	601a      	str	r2, [r3, #0]
 8007990:	e19f      	b.n	8007cd2 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8007992:	2311      	movs	r3, #17
 8007994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8007998:	e19b      	b.n	8007cd2 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	683a      	ldr	r2, [r7, #0]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d902      	bls.n	80079aa <f_lseek+0x114>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	619a      	str	r2, [r3, #24]
			if (ofs) {
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	f000 818d 	beq.w	8007cd2 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fd fed6 	bl	8005770 <clmt_clust>
 80079c4:	4602      	mov	r2, r0
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 80079ca:	68ba      	ldr	r2, [r7, #8]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	69db      	ldr	r3, [r3, #28]
 80079d0:	4619      	mov	r1, r3
 80079d2:	4610      	mov	r0, r2
 80079d4:	f7fd fbc0 	bl	8005158 <clust2sect>
 80079d8:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 80079da:	69bb      	ldr	r3, [r7, #24]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d104      	bne.n	80079ea <f_lseek+0x154>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	2202      	movs	r2, #2
 80079e4:	755a      	strb	r2, [r3, #21]
 80079e6:	2302      	movs	r3, #2
 80079e8:	e175      	b.n	8007cd6 <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	3b01      	subs	r3, #1
 80079ee:	68ba      	ldr	r2, [r7, #8]
 80079f0:	8992      	ldrh	r2, [r2, #12]
 80079f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80079f6:	68ba      	ldr	r2, [r7, #8]
 80079f8:	8952      	ldrh	r2, [r2, #10]
 80079fa:	3a01      	subs	r2, #1
 80079fc:	4013      	ands	r3, r2
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	4413      	add	r3, r2
 8007a02:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	8992      	ldrh	r2, [r2, #12]
 8007a0c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007a10:	fb02 f201 	mul.w	r2, r2, r1
 8007a14:	1a9b      	subs	r3, r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 815b 	beq.w	8007cd2 <f_lseek+0x43c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6a1b      	ldr	r3, [r3, #32]
 8007a20:	69ba      	ldr	r2, [r7, #24]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	f000 8155 	beq.w	8007cd2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	7d1b      	ldrb	r3, [r3, #20]
 8007a2c:	b25b      	sxtb	r3, r3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	da18      	bge.n	8007a64 <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	7858      	ldrb	r0, [r3, #1]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1a      	ldr	r2, [r3, #32]
 8007a40:	2301      	movs	r3, #1
 8007a42:	f7fc fffd 	bl	8004a40 <disk_write>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d004      	beq.n	8007a56 <f_lseek+0x1c0>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	755a      	strb	r2, [r3, #21]
 8007a52:	2301      	movs	r3, #1
 8007a54:	e13f      	b.n	8007cd6 <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	7d1b      	ldrb	r3, [r3, #20]
 8007a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	7858      	ldrb	r0, [r3, #1]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007a6e:	2301      	movs	r3, #1
 8007a70:	69ba      	ldr	r2, [r7, #24]
 8007a72:	f7fc ffc5 	bl	8004a00 <disk_read>
 8007a76:	4603      	mov	r3, r0
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d004      	beq.n	8007a86 <f_lseek+0x1f0>
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2201      	movs	r2, #1
 8007a80:	755a      	strb	r2, [r3, #21]
 8007a82:	2301      	movs	r3, #1
 8007a84:	e127      	b.n	8007cd6 <f_lseek+0x440>
#endif
					fp->sect = dsc;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69ba      	ldr	r2, [r7, #24]
 8007a8a:	621a      	str	r2, [r3, #32]
 8007a8c:	e121      	b.n	8007cd2 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	68db      	ldr	r3, [r3, #12]
 8007a92:	683a      	ldr	r2, [r7, #0]
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d908      	bls.n	8007aaa <f_lseek+0x214>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	7d1b      	ldrb	r3, [r3, #20]
 8007a9c:	f003 0302 	and.w	r3, r3, #2
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d102      	bne.n	8007aaa <f_lseek+0x214>
			ofs = fp->obj.objsize;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	699b      	ldr	r3, [r3, #24]
 8007aae:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ab8:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 80b5 	beq.w	8007c2c <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	895b      	ldrh	r3, [r3, #10]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	899b      	ldrh	r3, [r3, #12]
 8007acc:	fb03 f302 	mul.w	r3, r3, r2
 8007ad0:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01b      	beq.n	8007b10 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	1e5a      	subs	r2, r3, #1
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	fbb2 f2f3 	udiv	r2, r2, r3
 8007ae2:	6a3b      	ldr	r3, [r7, #32]
 8007ae4:	1e59      	subs	r1, r3, #1
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d30f      	bcc.n	8007b10 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	1e5a      	subs	r2, r3, #1
 8007af4:	69fb      	ldr	r3, [r7, #28]
 8007af6:	425b      	negs	r3, r3
 8007af8:	401a      	ands	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	683a      	ldr	r2, [r7, #0]
 8007b04:	1ad3      	subs	r3, r2, r3
 8007b06:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	69db      	ldr	r3, [r3, #28]
 8007b0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8007b0e:	e022      	b.n	8007b56 <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d119      	bne.n	8007b50 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7fd fd8d 	bl	8005640 <create_chain>
 8007b26:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d104      	bne.n	8007b38 <f_lseek+0x2a2>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2202      	movs	r2, #2
 8007b32:	755a      	strb	r2, [r3, #21]
 8007b34:	2302      	movs	r3, #2
 8007b36:	e0ce      	b.n	8007cd6 <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b3e:	d104      	bne.n	8007b4a <f_lseek+0x2b4>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	755a      	strb	r2, [r3, #21]
 8007b46:	2301      	movs	r3, #1
 8007b48:	e0c5      	b.n	8007cd6 <f_lseek+0x440>
					fp->obj.sclust = clst;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b4e:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b54:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 8007b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d067      	beq.n	8007c2c <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 8007b5c:	e03a      	b.n	8007bd4 <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	603b      	str	r3, [r7, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	69fb      	ldr	r3, [r7, #28]
 8007b6c:	441a      	add	r2, r3
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	7d1b      	ldrb	r3, [r3, #20]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d00b      	beq.n	8007b96 <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b82:	4618      	mov	r0, r3
 8007b84:	f7fd fd5c 	bl	8005640 <create_chain>
 8007b88:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8007b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d108      	bne.n	8007ba2 <f_lseek+0x30c>
							ofs = 0; break;
 8007b90:	2300      	movs	r3, #0
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	e022      	b.n	8007bdc <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	f7fd fafb 	bl	8005196 <get_fat>
 8007ba0:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba8:	d104      	bne.n	8007bb4 <f_lseek+0x31e>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	755a      	strb	r2, [r3, #21]
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	e090      	b.n	8007cd6 <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 8007bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d904      	bls.n	8007bc4 <f_lseek+0x32e>
 8007bba:	68bb      	ldr	r3, [r7, #8]
 8007bbc:	69db      	ldr	r3, [r3, #28]
 8007bbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d304      	bcc.n	8007bce <f_lseek+0x338>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2202      	movs	r2, #2
 8007bc8:	755a      	strb	r2, [r3, #21]
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e083      	b.n	8007cd6 <f_lseek+0x440>
					fp->clust = clst;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bd2:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 8007bd4:	683a      	ldr	r2, [r7, #0]
 8007bd6:	69fb      	ldr	r3, [r7, #28]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d8c0      	bhi.n	8007b5e <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	441a      	add	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	899b      	ldrh	r3, [r3, #12]
 8007bec:	461a      	mov	r2, r3
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007bf4:	fb02 f201 	mul.w	r2, r2, r1
 8007bf8:	1a9b      	subs	r3, r3, r2
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d016      	beq.n	8007c2c <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8007bfe:	68bb      	ldr	r3, [r7, #8]
 8007c00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7fd faa8 	bl	8005158 <clust2sect>
 8007c08:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8007c0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d104      	bne.n	8007c1a <f_lseek+0x384>
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2202      	movs	r2, #2
 8007c14:	755a      	strb	r2, [r3, #21]
 8007c16:	2302      	movs	r3, #2
 8007c18:	e05d      	b.n	8007cd6 <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	899b      	ldrh	r3, [r3, #12]
 8007c1e:	461a      	mov	r2, r3
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c28:	4413      	add	r3, r2
 8007c2a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	699a      	ldr	r2, [r3, #24]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d90a      	bls.n	8007c4e <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	699a      	ldr	r2, [r3, #24]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	7d1b      	ldrb	r3, [r3, #20]
 8007c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	699b      	ldr	r3, [r3, #24]
 8007c52:	68ba      	ldr	r2, [r7, #8]
 8007c54:	8992      	ldrh	r2, [r2, #12]
 8007c56:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c5a:	fb02 f201 	mul.w	r2, r2, r1
 8007c5e:	1a9b      	subs	r3, r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d036      	beq.n	8007cd2 <f_lseek+0x43c>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6a1b      	ldr	r3, [r3, #32]
 8007c68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d031      	beq.n	8007cd2 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	7d1b      	ldrb	r3, [r3, #20]
 8007c72:	b25b      	sxtb	r3, r3
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	da18      	bge.n	8007caa <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	7858      	ldrb	r0, [r3, #1]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a1a      	ldr	r2, [r3, #32]
 8007c86:	2301      	movs	r3, #1
 8007c88:	f7fc feda 	bl	8004a40 <disk_write>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d004      	beq.n	8007c9c <f_lseek+0x406>
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	755a      	strb	r2, [r3, #21]
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e01c      	b.n	8007cd6 <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	7d1b      	ldrb	r3, [r3, #20]
 8007ca0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	7858      	ldrb	r0, [r3, #1]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cb8:	f7fc fea2 	bl	8004a00 <disk_read>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d004      	beq.n	8007ccc <f_lseek+0x436>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	755a      	strb	r2, [r3, #21]
 8007cc8:	2301      	movs	r3, #1
 8007cca:	e004      	b.n	8007cd6 <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007cd0:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8007cd2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3740      	adds	r7, #64	; 0x40
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b092      	sub	sp, #72	; 0x48
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8007cea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8007cee:	f107 030c 	add.w	r3, r7, #12
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fd63 	bl	80067c0 <find_volume>
 8007cfa:	4603      	mov	r3, r0
 8007cfc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 8007d00:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f040 8099 	bne.w	8007e3c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8007d0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8007d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d12:	699a      	ldr	r2, [r3, #24]
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	69db      	ldr	r3, [r3, #28]
 8007d18:	3b02      	subs	r3, #2
 8007d1a:	429a      	cmp	r2, r3
 8007d1c:	d804      	bhi.n	8007d28 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8007d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d20:	699a      	ldr	r2, [r3, #24]
 8007d22:	68bb      	ldr	r3, [r7, #8]
 8007d24:	601a      	str	r2, [r3, #0]
 8007d26:	e089      	b.n	8007e3c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8007d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d128      	bne.n	8007d86 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8007d34:	2302      	movs	r3, #2
 8007d36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d3a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8007d3c:	f107 0314 	add.w	r3, r7, #20
 8007d40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fd fa27 	bl	8005196 <get_fat>
 8007d48:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8007d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d50:	d103      	bne.n	8007d5a <f_getfree+0x7c>
 8007d52:	2301      	movs	r3, #1
 8007d54:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d58:	e063      	b.n	8007e22 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8007d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d103      	bne.n	8007d68 <f_getfree+0x8a>
 8007d60:	2302      	movs	r3, #2
 8007d62:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007d66:	e05c      	b.n	8007e22 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8007d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d102      	bne.n	8007d74 <f_getfree+0x96>
 8007d6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d70:	3301      	adds	r3, #1
 8007d72:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 8007d74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d76:	3301      	adds	r3, #1
 8007d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d3db      	bcc.n	8007d3c <f_getfree+0x5e>
 8007d84:	e04d      	b.n	8007e22 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	69db      	ldr	r3, [r3, #28]
 8007d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d90:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 8007d92:	2300      	movs	r3, #0
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
 8007d96:	2300      	movs	r3, #0
 8007d98:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 8007d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d113      	bne.n	8007dc8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8007da0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da4:	1c5a      	adds	r2, r3, #1
 8007da6:	63ba      	str	r2, [r7, #56]	; 0x38
 8007da8:	4619      	mov	r1, r3
 8007daa:	f7fd f937 	bl	800501c <move_window>
 8007dae:	4603      	mov	r3, r0
 8007db0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 8007db4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d131      	bne.n	8007e20 <f_getfree+0x142>
							p = fs->win;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	3338      	adds	r3, #56	; 0x38
 8007dc0:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 8007dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc4:	899b      	ldrh	r3, [r3, #12]
 8007dc6:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b02      	cmp	r3, #2
 8007dce:	d10f      	bne.n	8007df0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8007dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007dd2:	f7fc fe73 	bl	8004abc <ld_word>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d102      	bne.n	8007de2 <f_getfree+0x104>
 8007ddc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dde:	3301      	adds	r3, #1
 8007de0:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	3302      	adds	r3, #2
 8007de6:	633b      	str	r3, [r7, #48]	; 0x30
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	3b02      	subs	r3, #2
 8007dec:	637b      	str	r3, [r7, #52]	; 0x34
 8007dee:	e010      	b.n	8007e12 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8007df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df2:	f7fc fe7b 	bl	8004aec <ld_dword>
 8007df6:	4603      	mov	r3, r0
 8007df8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d102      	bne.n	8007e06 <f_getfree+0x128>
 8007e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e02:	3301      	adds	r3, #1
 8007e04:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	3304      	adds	r3, #4
 8007e0a:	633b      	str	r3, [r7, #48]	; 0x30
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	3b04      	subs	r3, #4
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 8007e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e14:	3b01      	subs	r3, #1
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d1bd      	bne.n	8007d9a <f_getfree+0xbc>
 8007e1e:	e000      	b.n	8007e22 <f_getfree+0x144>
							if (res != FR_OK) break;
 8007e20:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8007e22:	68bb      	ldr	r3, [r7, #8]
 8007e24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e26:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8007e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e2c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8007e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e30:	791a      	ldrb	r2, [r3, #4]
 8007e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e34:	f042 0201 	orr.w	r2, r2, #1
 8007e38:	b2d2      	uxtb	r2, r2
 8007e3a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8007e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3748      	adds	r7, #72	; 0x48
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b087      	sub	sp, #28
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	60b9      	str	r1, [r7, #8]
 8007e52:	4613      	mov	r3, r2
 8007e54:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007e56:	2301      	movs	r3, #1
 8007e58:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007e5e:	4b1f      	ldr	r3, [pc, #124]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e60:	7a5b      	ldrb	r3, [r3, #9]
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d131      	bne.n	8007ecc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007e68:	4b1c      	ldr	r3, [pc, #112]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e6a:	7a5b      	ldrb	r3, [r3, #9]
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	461a      	mov	r2, r3
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e72:	2100      	movs	r1, #0
 8007e74:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007e76:	4b19      	ldr	r3, [pc, #100]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e78:	7a5b      	ldrb	r3, [r3, #9]
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	4a17      	ldr	r2, [pc, #92]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e7e:	009b      	lsls	r3, r3, #2
 8007e80:	4413      	add	r3, r2
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007e86:	4b15      	ldr	r3, [pc, #84]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e88:	7a5b      	ldrb	r3, [r3, #9]
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	461a      	mov	r2, r3
 8007e8e:	4b13      	ldr	r3, [pc, #76]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e90:	4413      	add	r3, r2
 8007e92:	79fa      	ldrb	r2, [r7, #7]
 8007e94:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007e96:	4b11      	ldr	r3, [pc, #68]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007e98:	7a5b      	ldrb	r3, [r3, #9]
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	1c5a      	adds	r2, r3, #1
 8007e9e:	b2d1      	uxtb	r1, r2
 8007ea0:	4a0e      	ldr	r2, [pc, #56]	; (8007edc <FATFS_LinkDriverEx+0x94>)
 8007ea2:	7251      	strb	r1, [r2, #9]
 8007ea4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
 8007ea8:	3330      	adds	r3, #48	; 0x30
 8007eaa:	b2da      	uxtb	r2, r3
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	223a      	movs	r2, #58	; 0x3a
 8007eb6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	3302      	adds	r3, #2
 8007ebc:	222f      	movs	r2, #47	; 0x2f
 8007ebe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	3303      	adds	r3, #3
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007ec8:	2300      	movs	r3, #0
 8007eca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ece:	4618      	mov	r0, r3
 8007ed0:	371c      	adds	r7, #28
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed8:	4770      	bx	lr
 8007eda:	bf00      	nop
 8007edc:	200002f0 	.word	0x200002f0

08007ee0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b082      	sub	sp, #8
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007eea:	2200      	movs	r2, #0
 8007eec:	6839      	ldr	r1, [r7, #0]
 8007eee:	6878      	ldr	r0, [r7, #4]
 8007ef0:	f7ff ffaa 	bl	8007e48 <FATFS_LinkDriverEx>
 8007ef4:	4603      	mov	r3, r0
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	4603      	mov	r3, r0
 8007f08:	6039      	str	r1, [r7, #0]
 8007f0a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f0c:	88fb      	ldrh	r3, [r7, #6]
 8007f0e:	2b7f      	cmp	r3, #127	; 0x7f
 8007f10:	d802      	bhi.n	8007f18 <ff_convert+0x18>
		c = chr;
 8007f12:	88fb      	ldrh	r3, [r7, #6]
 8007f14:	81fb      	strh	r3, [r7, #14]
 8007f16:	e025      	b.n	8007f64 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00b      	beq.n	8007f36 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007f1e:	88fb      	ldrh	r3, [r7, #6]
 8007f20:	2bff      	cmp	r3, #255	; 0xff
 8007f22:	d805      	bhi.n	8007f30 <ff_convert+0x30>
 8007f24:	88fb      	ldrh	r3, [r7, #6]
 8007f26:	3b80      	subs	r3, #128	; 0x80
 8007f28:	4a12      	ldr	r2, [pc, #72]	; (8007f74 <ff_convert+0x74>)
 8007f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f2e:	e000      	b.n	8007f32 <ff_convert+0x32>
 8007f30:	2300      	movs	r3, #0
 8007f32:	81fb      	strh	r3, [r7, #14]
 8007f34:	e016      	b.n	8007f64 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007f36:	2300      	movs	r3, #0
 8007f38:	81fb      	strh	r3, [r7, #14]
 8007f3a:	e009      	b.n	8007f50 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007f3c:	89fb      	ldrh	r3, [r7, #14]
 8007f3e:	4a0d      	ldr	r2, [pc, #52]	; (8007f74 <ff_convert+0x74>)
 8007f40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f44:	88fa      	ldrh	r2, [r7, #6]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d006      	beq.n	8007f58 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007f4a:	89fb      	ldrh	r3, [r7, #14]
 8007f4c:	3301      	adds	r3, #1
 8007f4e:	81fb      	strh	r3, [r7, #14]
 8007f50:	89fb      	ldrh	r3, [r7, #14]
 8007f52:	2b7f      	cmp	r3, #127	; 0x7f
 8007f54:	d9f2      	bls.n	8007f3c <ff_convert+0x3c>
 8007f56:	e000      	b.n	8007f5a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007f58:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007f5a:	89fb      	ldrh	r3, [r7, #14]
 8007f5c:	3380      	adds	r3, #128	; 0x80
 8007f5e:	b29b      	uxth	r3, r3
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007f64:	89fb      	ldrh	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3714      	adds	r7, #20
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	0800950c 	.word	0x0800950c

08007f78 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f88:	d201      	bcs.n	8007f8e <ff_wtoupper+0x16>
 8007f8a:	4b3e      	ldr	r3, [pc, #248]	; (8008084 <ff_wtoupper+0x10c>)
 8007f8c:	e000      	b.n	8007f90 <ff_wtoupper+0x18>
 8007f8e:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <ff_wtoupper+0x110>)
 8007f90:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	1c9a      	adds	r2, r3, #2
 8007f96:	617a      	str	r2, [r7, #20]
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8007f9c:	8a7b      	ldrh	r3, [r7, #18]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d068      	beq.n	8008074 <ff_wtoupper+0xfc>
 8007fa2:	88fa      	ldrh	r2, [r7, #6]
 8007fa4:	8a7b      	ldrh	r3, [r7, #18]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d364      	bcc.n	8008074 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	1c9a      	adds	r2, r3, #2
 8007fae:	617a      	str	r2, [r7, #20]
 8007fb0:	881b      	ldrh	r3, [r3, #0]
 8007fb2:	823b      	strh	r3, [r7, #16]
 8007fb4:	8a3b      	ldrh	r3, [r7, #16]
 8007fb6:	0a1b      	lsrs	r3, r3, #8
 8007fb8:	81fb      	strh	r3, [r7, #14]
 8007fba:	8a3b      	ldrh	r3, [r7, #16]
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8007fc0:	88fa      	ldrh	r2, [r7, #6]
 8007fc2:	8a79      	ldrh	r1, [r7, #18]
 8007fc4:	8a3b      	ldrh	r3, [r7, #16]
 8007fc6:	440b      	add	r3, r1
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	da49      	bge.n	8008060 <ff_wtoupper+0xe8>
			switch (cmd) {
 8007fcc:	89fb      	ldrh	r3, [r7, #14]
 8007fce:	2b08      	cmp	r3, #8
 8007fd0:	d84f      	bhi.n	8008072 <ff_wtoupper+0xfa>
 8007fd2:	a201      	add	r2, pc, #4	; (adr r2, 8007fd8 <ff_wtoupper+0x60>)
 8007fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fd8:	08007ffd 	.word	0x08007ffd
 8007fdc:	0800800f 	.word	0x0800800f
 8007fe0:	08008025 	.word	0x08008025
 8007fe4:	0800802d 	.word	0x0800802d
 8007fe8:	08008035 	.word	0x08008035
 8007fec:	0800803d 	.word	0x0800803d
 8007ff0:	08008045 	.word	0x08008045
 8007ff4:	0800804d 	.word	0x0800804d
 8007ff8:	08008055 	.word	0x08008055
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007ffc:	88fa      	ldrh	r2, [r7, #6]
 8007ffe:	8a7b      	ldrh	r3, [r7, #18]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	697a      	ldr	r2, [r7, #20]
 8008006:	4413      	add	r3, r2
 8008008:	881b      	ldrh	r3, [r3, #0]
 800800a:	80fb      	strh	r3, [r7, #6]
 800800c:	e027      	b.n	800805e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800800e:	88fa      	ldrh	r2, [r7, #6]
 8008010:	8a7b      	ldrh	r3, [r7, #18]
 8008012:	1ad3      	subs	r3, r2, r3
 8008014:	b29b      	uxth	r3, r3
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	b29b      	uxth	r3, r3
 800801c:	88fa      	ldrh	r2, [r7, #6]
 800801e:	1ad3      	subs	r3, r2, r3
 8008020:	80fb      	strh	r3, [r7, #6]
 8008022:	e01c      	b.n	800805e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008024:	88fb      	ldrh	r3, [r7, #6]
 8008026:	3b10      	subs	r3, #16
 8008028:	80fb      	strh	r3, [r7, #6]
 800802a:	e018      	b.n	800805e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 800802c:	88fb      	ldrh	r3, [r7, #6]
 800802e:	3b20      	subs	r3, #32
 8008030:	80fb      	strh	r3, [r7, #6]
 8008032:	e014      	b.n	800805e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008034:	88fb      	ldrh	r3, [r7, #6]
 8008036:	3b30      	subs	r3, #48	; 0x30
 8008038:	80fb      	strh	r3, [r7, #6]
 800803a:	e010      	b.n	800805e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	3b1a      	subs	r3, #26
 8008040:	80fb      	strh	r3, [r7, #6]
 8008042:	e00c      	b.n	800805e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008044:	88fb      	ldrh	r3, [r7, #6]
 8008046:	3308      	adds	r3, #8
 8008048:	80fb      	strh	r3, [r7, #6]
 800804a:	e008      	b.n	800805e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 800804c:	88fb      	ldrh	r3, [r7, #6]
 800804e:	3b50      	subs	r3, #80	; 0x50
 8008050:	80fb      	strh	r3, [r7, #6]
 8008052:	e004      	b.n	800805e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008054:	88fb      	ldrh	r3, [r7, #6]
 8008056:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 800805a:	80fb      	strh	r3, [r7, #6]
 800805c:	bf00      	nop
			}
			break;
 800805e:	e008      	b.n	8008072 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008060:	89fb      	ldrh	r3, [r7, #14]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d195      	bne.n	8007f92 <ff_wtoupper+0x1a>
 8008066:	8a3b      	ldrh	r3, [r7, #16]
 8008068:	005b      	lsls	r3, r3, #1
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	4413      	add	r3, r2
 800806e:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008070:	e78f      	b.n	8007f92 <ff_wtoupper+0x1a>
			break;
 8008072:	bf00      	nop
	}

	return chr;
 8008074:	88fb      	ldrh	r3, [r7, #6]
}
 8008076:	4618      	mov	r0, r3
 8008078:	371c      	adds	r7, #28
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	0800960c 	.word	0x0800960c
 8008088:	08009800 	.word	0x08009800

0800808c <__errno>:
 800808c:	4b01      	ldr	r3, [pc, #4]	; (8008094 <__errno+0x8>)
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	4770      	bx	lr
 8008092:	bf00      	nop
 8008094:	20000028 	.word	0x20000028

08008098 <__libc_init_array>:
 8008098:	b570      	push	{r4, r5, r6, lr}
 800809a:	4d0d      	ldr	r5, [pc, #52]	; (80080d0 <__libc_init_array+0x38>)
 800809c:	4c0d      	ldr	r4, [pc, #52]	; (80080d4 <__libc_init_array+0x3c>)
 800809e:	1b64      	subs	r4, r4, r5
 80080a0:	10a4      	asrs	r4, r4, #2
 80080a2:	2600      	movs	r6, #0
 80080a4:	42a6      	cmp	r6, r4
 80080a6:	d109      	bne.n	80080bc <__libc_init_array+0x24>
 80080a8:	4d0b      	ldr	r5, [pc, #44]	; (80080d8 <__libc_init_array+0x40>)
 80080aa:	4c0c      	ldr	r4, [pc, #48]	; (80080dc <__libc_init_array+0x44>)
 80080ac:	f001 f91e 	bl	80092ec <_init>
 80080b0:	1b64      	subs	r4, r4, r5
 80080b2:	10a4      	asrs	r4, r4, #2
 80080b4:	2600      	movs	r6, #0
 80080b6:	42a6      	cmp	r6, r4
 80080b8:	d105      	bne.n	80080c6 <__libc_init_array+0x2e>
 80080ba:	bd70      	pop	{r4, r5, r6, pc}
 80080bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080c0:	4798      	blx	r3
 80080c2:	3601      	adds	r6, #1
 80080c4:	e7ee      	b.n	80080a4 <__libc_init_array+0xc>
 80080c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ca:	4798      	blx	r3
 80080cc:	3601      	adds	r6, #1
 80080ce:	e7f2      	b.n	80080b6 <__libc_init_array+0x1e>
 80080d0:	08009a74 	.word	0x08009a74
 80080d4:	08009a74 	.word	0x08009a74
 80080d8:	08009a74 	.word	0x08009a74
 80080dc:	08009a78 	.word	0x08009a78

080080e0 <memset>:
 80080e0:	4402      	add	r2, r0
 80080e2:	4603      	mov	r3, r0
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d100      	bne.n	80080ea <memset+0xa>
 80080e8:	4770      	bx	lr
 80080ea:	f803 1b01 	strb.w	r1, [r3], #1
 80080ee:	e7f9      	b.n	80080e4 <memset+0x4>

080080f0 <siprintf>:
 80080f0:	b40e      	push	{r1, r2, r3}
 80080f2:	b500      	push	{lr}
 80080f4:	b09c      	sub	sp, #112	; 0x70
 80080f6:	ab1d      	add	r3, sp, #116	; 0x74
 80080f8:	9002      	str	r0, [sp, #8]
 80080fa:	9006      	str	r0, [sp, #24]
 80080fc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008100:	4809      	ldr	r0, [pc, #36]	; (8008128 <siprintf+0x38>)
 8008102:	9107      	str	r1, [sp, #28]
 8008104:	9104      	str	r1, [sp, #16]
 8008106:	4909      	ldr	r1, [pc, #36]	; (800812c <siprintf+0x3c>)
 8008108:	f853 2b04 	ldr.w	r2, [r3], #4
 800810c:	9105      	str	r1, [sp, #20]
 800810e:	6800      	ldr	r0, [r0, #0]
 8008110:	9301      	str	r3, [sp, #4]
 8008112:	a902      	add	r1, sp, #8
 8008114:	f000 f8a2 	bl	800825c <_svfiprintf_r>
 8008118:	9b02      	ldr	r3, [sp, #8]
 800811a:	2200      	movs	r2, #0
 800811c:	701a      	strb	r2, [r3, #0]
 800811e:	b01c      	add	sp, #112	; 0x70
 8008120:	f85d eb04 	ldr.w	lr, [sp], #4
 8008124:	b003      	add	sp, #12
 8008126:	4770      	bx	lr
 8008128:	20000028 	.word	0x20000028
 800812c:	ffff0208 	.word	0xffff0208

08008130 <siscanf>:
 8008130:	b40e      	push	{r1, r2, r3}
 8008132:	b510      	push	{r4, lr}
 8008134:	b09f      	sub	sp, #124	; 0x7c
 8008136:	ac21      	add	r4, sp, #132	; 0x84
 8008138:	f44f 7101 	mov.w	r1, #516	; 0x204
 800813c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008140:	9201      	str	r2, [sp, #4]
 8008142:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008146:	9004      	str	r0, [sp, #16]
 8008148:	9008      	str	r0, [sp, #32]
 800814a:	f7f8 f849 	bl	80001e0 <strlen>
 800814e:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <siscanf+0x50>)
 8008150:	9005      	str	r0, [sp, #20]
 8008152:	9009      	str	r0, [sp, #36]	; 0x24
 8008154:	930d      	str	r3, [sp, #52]	; 0x34
 8008156:	480b      	ldr	r0, [pc, #44]	; (8008184 <siscanf+0x54>)
 8008158:	9a01      	ldr	r2, [sp, #4]
 800815a:	6800      	ldr	r0, [r0, #0]
 800815c:	9403      	str	r4, [sp, #12]
 800815e:	2300      	movs	r3, #0
 8008160:	9311      	str	r3, [sp, #68]	; 0x44
 8008162:	9316      	str	r3, [sp, #88]	; 0x58
 8008164:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008168:	f8ad 301e 	strh.w	r3, [sp, #30]
 800816c:	a904      	add	r1, sp, #16
 800816e:	4623      	mov	r3, r4
 8008170:	f000 f9ce 	bl	8008510 <__ssvfiscanf_r>
 8008174:	b01f      	add	sp, #124	; 0x7c
 8008176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817a:	b003      	add	sp, #12
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	08008189 	.word	0x08008189
 8008184:	20000028 	.word	0x20000028

08008188 <__seofread>:
 8008188:	2000      	movs	r0, #0
 800818a:	4770      	bx	lr

0800818c <strchr>:
 800818c:	b2c9      	uxtb	r1, r1
 800818e:	4603      	mov	r3, r0
 8008190:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008194:	b11a      	cbz	r2, 800819e <strchr+0x12>
 8008196:	428a      	cmp	r2, r1
 8008198:	d1f9      	bne.n	800818e <strchr+0x2>
 800819a:	4618      	mov	r0, r3
 800819c:	4770      	bx	lr
 800819e:	2900      	cmp	r1, #0
 80081a0:	bf18      	it	ne
 80081a2:	2300      	movne	r3, #0
 80081a4:	e7f9      	b.n	800819a <strchr+0xe>

080081a6 <__ssputs_r>:
 80081a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081aa:	688e      	ldr	r6, [r1, #8]
 80081ac:	429e      	cmp	r6, r3
 80081ae:	4682      	mov	sl, r0
 80081b0:	460c      	mov	r4, r1
 80081b2:	4690      	mov	r8, r2
 80081b4:	461f      	mov	r7, r3
 80081b6:	d838      	bhi.n	800822a <__ssputs_r+0x84>
 80081b8:	898a      	ldrh	r2, [r1, #12]
 80081ba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081be:	d032      	beq.n	8008226 <__ssputs_r+0x80>
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	6909      	ldr	r1, [r1, #16]
 80081c4:	eba5 0901 	sub.w	r9, r5, r1
 80081c8:	6965      	ldr	r5, [r4, #20]
 80081ca:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80081ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80081d2:	3301      	adds	r3, #1
 80081d4:	444b      	add	r3, r9
 80081d6:	106d      	asrs	r5, r5, #1
 80081d8:	429d      	cmp	r5, r3
 80081da:	bf38      	it	cc
 80081dc:	461d      	movcc	r5, r3
 80081de:	0553      	lsls	r3, r2, #21
 80081e0:	d531      	bpl.n	8008246 <__ssputs_r+0xa0>
 80081e2:	4629      	mov	r1, r5
 80081e4:	f000 ffde 	bl	80091a4 <_malloc_r>
 80081e8:	4606      	mov	r6, r0
 80081ea:	b950      	cbnz	r0, 8008202 <__ssputs_r+0x5c>
 80081ec:	230c      	movs	r3, #12
 80081ee:	f8ca 3000 	str.w	r3, [sl]
 80081f2:	89a3      	ldrh	r3, [r4, #12]
 80081f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081f8:	81a3      	strh	r3, [r4, #12]
 80081fa:	f04f 30ff 	mov.w	r0, #4294967295
 80081fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008202:	6921      	ldr	r1, [r4, #16]
 8008204:	464a      	mov	r2, r9
 8008206:	f000 ff55 	bl	80090b4 <memcpy>
 800820a:	89a3      	ldrh	r3, [r4, #12]
 800820c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	6126      	str	r6, [r4, #16]
 8008218:	6165      	str	r5, [r4, #20]
 800821a:	444e      	add	r6, r9
 800821c:	eba5 0509 	sub.w	r5, r5, r9
 8008220:	6026      	str	r6, [r4, #0]
 8008222:	60a5      	str	r5, [r4, #8]
 8008224:	463e      	mov	r6, r7
 8008226:	42be      	cmp	r6, r7
 8008228:	d900      	bls.n	800822c <__ssputs_r+0x86>
 800822a:	463e      	mov	r6, r7
 800822c:	4632      	mov	r2, r6
 800822e:	6820      	ldr	r0, [r4, #0]
 8008230:	4641      	mov	r1, r8
 8008232:	f000 ff4d 	bl	80090d0 <memmove>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	6822      	ldr	r2, [r4, #0]
 800823a:	1b9b      	subs	r3, r3, r6
 800823c:	4432      	add	r2, r6
 800823e:	60a3      	str	r3, [r4, #8]
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	2000      	movs	r0, #0
 8008244:	e7db      	b.n	80081fe <__ssputs_r+0x58>
 8008246:	462a      	mov	r2, r5
 8008248:	f001 f806 	bl	8009258 <_realloc_r>
 800824c:	4606      	mov	r6, r0
 800824e:	2800      	cmp	r0, #0
 8008250:	d1e1      	bne.n	8008216 <__ssputs_r+0x70>
 8008252:	6921      	ldr	r1, [r4, #16]
 8008254:	4650      	mov	r0, sl
 8008256:	f000 ff55 	bl	8009104 <_free_r>
 800825a:	e7c7      	b.n	80081ec <__ssputs_r+0x46>

0800825c <_svfiprintf_r>:
 800825c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008260:	4698      	mov	r8, r3
 8008262:	898b      	ldrh	r3, [r1, #12]
 8008264:	061b      	lsls	r3, r3, #24
 8008266:	b09d      	sub	sp, #116	; 0x74
 8008268:	4607      	mov	r7, r0
 800826a:	460d      	mov	r5, r1
 800826c:	4614      	mov	r4, r2
 800826e:	d50e      	bpl.n	800828e <_svfiprintf_r+0x32>
 8008270:	690b      	ldr	r3, [r1, #16]
 8008272:	b963      	cbnz	r3, 800828e <_svfiprintf_r+0x32>
 8008274:	2140      	movs	r1, #64	; 0x40
 8008276:	f000 ff95 	bl	80091a4 <_malloc_r>
 800827a:	6028      	str	r0, [r5, #0]
 800827c:	6128      	str	r0, [r5, #16]
 800827e:	b920      	cbnz	r0, 800828a <_svfiprintf_r+0x2e>
 8008280:	230c      	movs	r3, #12
 8008282:	603b      	str	r3, [r7, #0]
 8008284:	f04f 30ff 	mov.w	r0, #4294967295
 8008288:	e0d1      	b.n	800842e <_svfiprintf_r+0x1d2>
 800828a:	2340      	movs	r3, #64	; 0x40
 800828c:	616b      	str	r3, [r5, #20]
 800828e:	2300      	movs	r3, #0
 8008290:	9309      	str	r3, [sp, #36]	; 0x24
 8008292:	2320      	movs	r3, #32
 8008294:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008298:	f8cd 800c 	str.w	r8, [sp, #12]
 800829c:	2330      	movs	r3, #48	; 0x30
 800829e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008448 <_svfiprintf_r+0x1ec>
 80082a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082a6:	f04f 0901 	mov.w	r9, #1
 80082aa:	4623      	mov	r3, r4
 80082ac:	469a      	mov	sl, r3
 80082ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082b2:	b10a      	cbz	r2, 80082b8 <_svfiprintf_r+0x5c>
 80082b4:	2a25      	cmp	r2, #37	; 0x25
 80082b6:	d1f9      	bne.n	80082ac <_svfiprintf_r+0x50>
 80082b8:	ebba 0b04 	subs.w	fp, sl, r4
 80082bc:	d00b      	beq.n	80082d6 <_svfiprintf_r+0x7a>
 80082be:	465b      	mov	r3, fp
 80082c0:	4622      	mov	r2, r4
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ff6e 	bl	80081a6 <__ssputs_r>
 80082ca:	3001      	adds	r0, #1
 80082cc:	f000 80aa 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082d2:	445a      	add	r2, fp
 80082d4:	9209      	str	r2, [sp, #36]	; 0x24
 80082d6:	f89a 3000 	ldrb.w	r3, [sl]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	f000 80a2 	beq.w	8008424 <_svfiprintf_r+0x1c8>
 80082e0:	2300      	movs	r3, #0
 80082e2:	f04f 32ff 	mov.w	r2, #4294967295
 80082e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082ea:	f10a 0a01 	add.w	sl, sl, #1
 80082ee:	9304      	str	r3, [sp, #16]
 80082f0:	9307      	str	r3, [sp, #28]
 80082f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082f6:	931a      	str	r3, [sp, #104]	; 0x68
 80082f8:	4654      	mov	r4, sl
 80082fa:	2205      	movs	r2, #5
 80082fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008300:	4851      	ldr	r0, [pc, #324]	; (8008448 <_svfiprintf_r+0x1ec>)
 8008302:	f7f7 ff75 	bl	80001f0 <memchr>
 8008306:	9a04      	ldr	r2, [sp, #16]
 8008308:	b9d8      	cbnz	r0, 8008342 <_svfiprintf_r+0xe6>
 800830a:	06d0      	lsls	r0, r2, #27
 800830c:	bf44      	itt	mi
 800830e:	2320      	movmi	r3, #32
 8008310:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008314:	0711      	lsls	r1, r2, #28
 8008316:	bf44      	itt	mi
 8008318:	232b      	movmi	r3, #43	; 0x2b
 800831a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800831e:	f89a 3000 	ldrb.w	r3, [sl]
 8008322:	2b2a      	cmp	r3, #42	; 0x2a
 8008324:	d015      	beq.n	8008352 <_svfiprintf_r+0xf6>
 8008326:	9a07      	ldr	r2, [sp, #28]
 8008328:	4654      	mov	r4, sl
 800832a:	2000      	movs	r0, #0
 800832c:	f04f 0c0a 	mov.w	ip, #10
 8008330:	4621      	mov	r1, r4
 8008332:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008336:	3b30      	subs	r3, #48	; 0x30
 8008338:	2b09      	cmp	r3, #9
 800833a:	d94e      	bls.n	80083da <_svfiprintf_r+0x17e>
 800833c:	b1b0      	cbz	r0, 800836c <_svfiprintf_r+0x110>
 800833e:	9207      	str	r2, [sp, #28]
 8008340:	e014      	b.n	800836c <_svfiprintf_r+0x110>
 8008342:	eba0 0308 	sub.w	r3, r0, r8
 8008346:	fa09 f303 	lsl.w	r3, r9, r3
 800834a:	4313      	orrs	r3, r2
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	46a2      	mov	sl, r4
 8008350:	e7d2      	b.n	80082f8 <_svfiprintf_r+0x9c>
 8008352:	9b03      	ldr	r3, [sp, #12]
 8008354:	1d19      	adds	r1, r3, #4
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	9103      	str	r1, [sp, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	bfbb      	ittet	lt
 800835e:	425b      	neglt	r3, r3
 8008360:	f042 0202 	orrlt.w	r2, r2, #2
 8008364:	9307      	strge	r3, [sp, #28]
 8008366:	9307      	strlt	r3, [sp, #28]
 8008368:	bfb8      	it	lt
 800836a:	9204      	strlt	r2, [sp, #16]
 800836c:	7823      	ldrb	r3, [r4, #0]
 800836e:	2b2e      	cmp	r3, #46	; 0x2e
 8008370:	d10c      	bne.n	800838c <_svfiprintf_r+0x130>
 8008372:	7863      	ldrb	r3, [r4, #1]
 8008374:	2b2a      	cmp	r3, #42	; 0x2a
 8008376:	d135      	bne.n	80083e4 <_svfiprintf_r+0x188>
 8008378:	9b03      	ldr	r3, [sp, #12]
 800837a:	1d1a      	adds	r2, r3, #4
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	9203      	str	r2, [sp, #12]
 8008380:	2b00      	cmp	r3, #0
 8008382:	bfb8      	it	lt
 8008384:	f04f 33ff 	movlt.w	r3, #4294967295
 8008388:	3402      	adds	r4, #2
 800838a:	9305      	str	r3, [sp, #20]
 800838c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008458 <_svfiprintf_r+0x1fc>
 8008390:	7821      	ldrb	r1, [r4, #0]
 8008392:	2203      	movs	r2, #3
 8008394:	4650      	mov	r0, sl
 8008396:	f7f7 ff2b 	bl	80001f0 <memchr>
 800839a:	b140      	cbz	r0, 80083ae <_svfiprintf_r+0x152>
 800839c:	2340      	movs	r3, #64	; 0x40
 800839e:	eba0 000a 	sub.w	r0, r0, sl
 80083a2:	fa03 f000 	lsl.w	r0, r3, r0
 80083a6:	9b04      	ldr	r3, [sp, #16]
 80083a8:	4303      	orrs	r3, r0
 80083aa:	3401      	adds	r4, #1
 80083ac:	9304      	str	r3, [sp, #16]
 80083ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083b2:	4826      	ldr	r0, [pc, #152]	; (800844c <_svfiprintf_r+0x1f0>)
 80083b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083b8:	2206      	movs	r2, #6
 80083ba:	f7f7 ff19 	bl	80001f0 <memchr>
 80083be:	2800      	cmp	r0, #0
 80083c0:	d038      	beq.n	8008434 <_svfiprintf_r+0x1d8>
 80083c2:	4b23      	ldr	r3, [pc, #140]	; (8008450 <_svfiprintf_r+0x1f4>)
 80083c4:	bb1b      	cbnz	r3, 800840e <_svfiprintf_r+0x1b2>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	3307      	adds	r3, #7
 80083ca:	f023 0307 	bic.w	r3, r3, #7
 80083ce:	3308      	adds	r3, #8
 80083d0:	9303      	str	r3, [sp, #12]
 80083d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083d4:	4433      	add	r3, r6
 80083d6:	9309      	str	r3, [sp, #36]	; 0x24
 80083d8:	e767      	b.n	80082aa <_svfiprintf_r+0x4e>
 80083da:	fb0c 3202 	mla	r2, ip, r2, r3
 80083de:	460c      	mov	r4, r1
 80083e0:	2001      	movs	r0, #1
 80083e2:	e7a5      	b.n	8008330 <_svfiprintf_r+0xd4>
 80083e4:	2300      	movs	r3, #0
 80083e6:	3401      	adds	r4, #1
 80083e8:	9305      	str	r3, [sp, #20]
 80083ea:	4619      	mov	r1, r3
 80083ec:	f04f 0c0a 	mov.w	ip, #10
 80083f0:	4620      	mov	r0, r4
 80083f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083f6:	3a30      	subs	r2, #48	; 0x30
 80083f8:	2a09      	cmp	r2, #9
 80083fa:	d903      	bls.n	8008404 <_svfiprintf_r+0x1a8>
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d0c5      	beq.n	800838c <_svfiprintf_r+0x130>
 8008400:	9105      	str	r1, [sp, #20]
 8008402:	e7c3      	b.n	800838c <_svfiprintf_r+0x130>
 8008404:	fb0c 2101 	mla	r1, ip, r1, r2
 8008408:	4604      	mov	r4, r0
 800840a:	2301      	movs	r3, #1
 800840c:	e7f0      	b.n	80083f0 <_svfiprintf_r+0x194>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b0f      	ldr	r3, [pc, #60]	; (8008454 <_svfiprintf_r+0x1f8>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4638      	mov	r0, r7
 800841a:	f3af 8000 	nop.w
 800841e:	1c42      	adds	r2, r0, #1
 8008420:	4606      	mov	r6, r0
 8008422:	d1d6      	bne.n	80083d2 <_svfiprintf_r+0x176>
 8008424:	89ab      	ldrh	r3, [r5, #12]
 8008426:	065b      	lsls	r3, r3, #25
 8008428:	f53f af2c 	bmi.w	8008284 <_svfiprintf_r+0x28>
 800842c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800842e:	b01d      	add	sp, #116	; 0x74
 8008430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008434:	ab03      	add	r3, sp, #12
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	462a      	mov	r2, r5
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <_svfiprintf_r+0x1f8>)
 800843c:	a904      	add	r1, sp, #16
 800843e:	4638      	mov	r0, r7
 8008440:	f000 fa4c 	bl	80088dc <_printf_i>
 8008444:	e7eb      	b.n	800841e <_svfiprintf_r+0x1c2>
 8008446:	bf00      	nop
 8008448:	080098bc 	.word	0x080098bc
 800844c:	080098c6 	.word	0x080098c6
 8008450:	00000000 	.word	0x00000000
 8008454:	080081a7 	.word	0x080081a7
 8008458:	080098c2 	.word	0x080098c2

0800845c <_sungetc_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	1c4b      	adds	r3, r1, #1
 8008460:	4614      	mov	r4, r2
 8008462:	d103      	bne.n	800846c <_sungetc_r+0x10>
 8008464:	f04f 35ff 	mov.w	r5, #4294967295
 8008468:	4628      	mov	r0, r5
 800846a:	bd38      	pop	{r3, r4, r5, pc}
 800846c:	8993      	ldrh	r3, [r2, #12]
 800846e:	f023 0320 	bic.w	r3, r3, #32
 8008472:	8193      	strh	r3, [r2, #12]
 8008474:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008476:	6852      	ldr	r2, [r2, #4]
 8008478:	b2cd      	uxtb	r5, r1
 800847a:	b18b      	cbz	r3, 80084a0 <_sungetc_r+0x44>
 800847c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800847e:	4293      	cmp	r3, r2
 8008480:	dd08      	ble.n	8008494 <_sungetc_r+0x38>
 8008482:	6823      	ldr	r3, [r4, #0]
 8008484:	1e5a      	subs	r2, r3, #1
 8008486:	6022      	str	r2, [r4, #0]
 8008488:	f803 5c01 	strb.w	r5, [r3, #-1]
 800848c:	6863      	ldr	r3, [r4, #4]
 800848e:	3301      	adds	r3, #1
 8008490:	6063      	str	r3, [r4, #4]
 8008492:	e7e9      	b.n	8008468 <_sungetc_r+0xc>
 8008494:	4621      	mov	r1, r4
 8008496:	f000 fdd1 	bl	800903c <__submore>
 800849a:	2800      	cmp	r0, #0
 800849c:	d0f1      	beq.n	8008482 <_sungetc_r+0x26>
 800849e:	e7e1      	b.n	8008464 <_sungetc_r+0x8>
 80084a0:	6921      	ldr	r1, [r4, #16]
 80084a2:	6823      	ldr	r3, [r4, #0]
 80084a4:	b151      	cbz	r1, 80084bc <_sungetc_r+0x60>
 80084a6:	4299      	cmp	r1, r3
 80084a8:	d208      	bcs.n	80084bc <_sungetc_r+0x60>
 80084aa:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80084ae:	42a9      	cmp	r1, r5
 80084b0:	d104      	bne.n	80084bc <_sungetc_r+0x60>
 80084b2:	3b01      	subs	r3, #1
 80084b4:	3201      	adds	r2, #1
 80084b6:	6023      	str	r3, [r4, #0]
 80084b8:	6062      	str	r2, [r4, #4]
 80084ba:	e7d5      	b.n	8008468 <_sungetc_r+0xc>
 80084bc:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80084c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084c4:	6363      	str	r3, [r4, #52]	; 0x34
 80084c6:	2303      	movs	r3, #3
 80084c8:	63a3      	str	r3, [r4, #56]	; 0x38
 80084ca:	4623      	mov	r3, r4
 80084cc:	f803 5f46 	strb.w	r5, [r3, #70]!
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	2301      	movs	r3, #1
 80084d4:	e7dc      	b.n	8008490 <_sungetc_r+0x34>

080084d6 <__ssrefill_r>:
 80084d6:	b510      	push	{r4, lr}
 80084d8:	460c      	mov	r4, r1
 80084da:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80084dc:	b169      	cbz	r1, 80084fa <__ssrefill_r+0x24>
 80084de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80084e2:	4299      	cmp	r1, r3
 80084e4:	d001      	beq.n	80084ea <__ssrefill_r+0x14>
 80084e6:	f000 fe0d 	bl	8009104 <_free_r>
 80084ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80084ec:	6063      	str	r3, [r4, #4]
 80084ee:	2000      	movs	r0, #0
 80084f0:	6360      	str	r0, [r4, #52]	; 0x34
 80084f2:	b113      	cbz	r3, 80084fa <__ssrefill_r+0x24>
 80084f4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084f6:	6023      	str	r3, [r4, #0]
 80084f8:	bd10      	pop	{r4, pc}
 80084fa:	6923      	ldr	r3, [r4, #16]
 80084fc:	6023      	str	r3, [r4, #0]
 80084fe:	2300      	movs	r3, #0
 8008500:	6063      	str	r3, [r4, #4]
 8008502:	89a3      	ldrh	r3, [r4, #12]
 8008504:	f043 0320 	orr.w	r3, r3, #32
 8008508:	81a3      	strh	r3, [r4, #12]
 800850a:	f04f 30ff 	mov.w	r0, #4294967295
 800850e:	e7f3      	b.n	80084f8 <__ssrefill_r+0x22>

08008510 <__ssvfiscanf_r>:
 8008510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800851a:	2100      	movs	r1, #0
 800851c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008520:	49b2      	ldr	r1, [pc, #712]	; (80087ec <__ssvfiscanf_r+0x2dc>)
 8008522:	91a0      	str	r1, [sp, #640]	; 0x280
 8008524:	f10d 0804 	add.w	r8, sp, #4
 8008528:	49b1      	ldr	r1, [pc, #708]	; (80087f0 <__ssvfiscanf_r+0x2e0>)
 800852a:	4fb2      	ldr	r7, [pc, #712]	; (80087f4 <__ssvfiscanf_r+0x2e4>)
 800852c:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80087f8 <__ssvfiscanf_r+0x2e8>
 8008530:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008534:	4606      	mov	r6, r0
 8008536:	91a1      	str	r1, [sp, #644]	; 0x284
 8008538:	9300      	str	r3, [sp, #0]
 800853a:	f892 a000 	ldrb.w	sl, [r2]
 800853e:	f1ba 0f00 	cmp.w	sl, #0
 8008542:	f000 8151 	beq.w	80087e8 <__ssvfiscanf_r+0x2d8>
 8008546:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800854a:	f013 0308 	ands.w	r3, r3, #8
 800854e:	f102 0501 	add.w	r5, r2, #1
 8008552:	d019      	beq.n	8008588 <__ssvfiscanf_r+0x78>
 8008554:	6863      	ldr	r3, [r4, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	dd0f      	ble.n	800857a <__ssvfiscanf_r+0x6a>
 800855a:	6823      	ldr	r3, [r4, #0]
 800855c:	781a      	ldrb	r2, [r3, #0]
 800855e:	5cba      	ldrb	r2, [r7, r2]
 8008560:	0712      	lsls	r2, r2, #28
 8008562:	d401      	bmi.n	8008568 <__ssvfiscanf_r+0x58>
 8008564:	462a      	mov	r2, r5
 8008566:	e7e8      	b.n	800853a <__ssvfiscanf_r+0x2a>
 8008568:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800856a:	3201      	adds	r2, #1
 800856c:	9245      	str	r2, [sp, #276]	; 0x114
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	3301      	adds	r3, #1
 8008572:	3a01      	subs	r2, #1
 8008574:	6062      	str	r2, [r4, #4]
 8008576:	6023      	str	r3, [r4, #0]
 8008578:	e7ec      	b.n	8008554 <__ssvfiscanf_r+0x44>
 800857a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800857c:	4621      	mov	r1, r4
 800857e:	4630      	mov	r0, r6
 8008580:	4798      	blx	r3
 8008582:	2800      	cmp	r0, #0
 8008584:	d0e9      	beq.n	800855a <__ssvfiscanf_r+0x4a>
 8008586:	e7ed      	b.n	8008564 <__ssvfiscanf_r+0x54>
 8008588:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800858c:	f040 8083 	bne.w	8008696 <__ssvfiscanf_r+0x186>
 8008590:	9341      	str	r3, [sp, #260]	; 0x104
 8008592:	9343      	str	r3, [sp, #268]	; 0x10c
 8008594:	7853      	ldrb	r3, [r2, #1]
 8008596:	2b2a      	cmp	r3, #42	; 0x2a
 8008598:	bf02      	ittt	eq
 800859a:	2310      	moveq	r3, #16
 800859c:	1c95      	addeq	r5, r2, #2
 800859e:	9341      	streq	r3, [sp, #260]	; 0x104
 80085a0:	220a      	movs	r2, #10
 80085a2:	46ab      	mov	fp, r5
 80085a4:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80085a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d91d      	bls.n	80085ec <__ssvfiscanf_r+0xdc>
 80085b0:	4891      	ldr	r0, [pc, #580]	; (80087f8 <__ssvfiscanf_r+0x2e8>)
 80085b2:	2203      	movs	r2, #3
 80085b4:	f7f7 fe1c 	bl	80001f0 <memchr>
 80085b8:	b140      	cbz	r0, 80085cc <__ssvfiscanf_r+0xbc>
 80085ba:	2301      	movs	r3, #1
 80085bc:	eba0 0009 	sub.w	r0, r0, r9
 80085c0:	fa03 f000 	lsl.w	r0, r3, r0
 80085c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085c6:	4318      	orrs	r0, r3
 80085c8:	9041      	str	r0, [sp, #260]	; 0x104
 80085ca:	465d      	mov	r5, fp
 80085cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80085d0:	2b78      	cmp	r3, #120	; 0x78
 80085d2:	d806      	bhi.n	80085e2 <__ssvfiscanf_r+0xd2>
 80085d4:	2b57      	cmp	r3, #87	; 0x57
 80085d6:	d810      	bhi.n	80085fa <__ssvfiscanf_r+0xea>
 80085d8:	2b25      	cmp	r3, #37	; 0x25
 80085da:	d05c      	beq.n	8008696 <__ssvfiscanf_r+0x186>
 80085dc:	d856      	bhi.n	800868c <__ssvfiscanf_r+0x17c>
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d074      	beq.n	80086cc <__ssvfiscanf_r+0x1bc>
 80085e2:	2303      	movs	r3, #3
 80085e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80085e6:	230a      	movs	r3, #10
 80085e8:	9342      	str	r3, [sp, #264]	; 0x108
 80085ea:	e081      	b.n	80086f0 <__ssvfiscanf_r+0x1e0>
 80085ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80085ee:	fb02 1303 	mla	r3, r2, r3, r1
 80085f2:	3b30      	subs	r3, #48	; 0x30
 80085f4:	9343      	str	r3, [sp, #268]	; 0x10c
 80085f6:	465d      	mov	r5, fp
 80085f8:	e7d3      	b.n	80085a2 <__ssvfiscanf_r+0x92>
 80085fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80085fe:	2a20      	cmp	r2, #32
 8008600:	d8ef      	bhi.n	80085e2 <__ssvfiscanf_r+0xd2>
 8008602:	a101      	add	r1, pc, #4	; (adr r1, 8008608 <__ssvfiscanf_r+0xf8>)
 8008604:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008608:	080086db 	.word	0x080086db
 800860c:	080085e3 	.word	0x080085e3
 8008610:	080085e3 	.word	0x080085e3
 8008614:	08008739 	.word	0x08008739
 8008618:	080085e3 	.word	0x080085e3
 800861c:	080085e3 	.word	0x080085e3
 8008620:	080085e3 	.word	0x080085e3
 8008624:	080085e3 	.word	0x080085e3
 8008628:	080085e3 	.word	0x080085e3
 800862c:	080085e3 	.word	0x080085e3
 8008630:	080085e3 	.word	0x080085e3
 8008634:	0800874f 	.word	0x0800874f
 8008638:	08008725 	.word	0x08008725
 800863c:	08008693 	.word	0x08008693
 8008640:	08008693 	.word	0x08008693
 8008644:	08008693 	.word	0x08008693
 8008648:	080085e3 	.word	0x080085e3
 800864c:	08008729 	.word	0x08008729
 8008650:	080085e3 	.word	0x080085e3
 8008654:	080085e3 	.word	0x080085e3
 8008658:	080085e3 	.word	0x080085e3
 800865c:	080085e3 	.word	0x080085e3
 8008660:	0800875f 	.word	0x0800875f
 8008664:	08008731 	.word	0x08008731
 8008668:	080086d3 	.word	0x080086d3
 800866c:	080085e3 	.word	0x080085e3
 8008670:	080085e3 	.word	0x080085e3
 8008674:	0800875b 	.word	0x0800875b
 8008678:	080085e3 	.word	0x080085e3
 800867c:	08008725 	.word	0x08008725
 8008680:	080085e3 	.word	0x080085e3
 8008684:	080085e3 	.word	0x080085e3
 8008688:	080086db 	.word	0x080086db
 800868c:	3b45      	subs	r3, #69	; 0x45
 800868e:	2b02      	cmp	r3, #2
 8008690:	d8a7      	bhi.n	80085e2 <__ssvfiscanf_r+0xd2>
 8008692:	2305      	movs	r3, #5
 8008694:	e02b      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 8008696:	6863      	ldr	r3, [r4, #4]
 8008698:	2b00      	cmp	r3, #0
 800869a:	dd0d      	ble.n	80086b8 <__ssvfiscanf_r+0x1a8>
 800869c:	6823      	ldr	r3, [r4, #0]
 800869e:	781a      	ldrb	r2, [r3, #0]
 80086a0:	4552      	cmp	r2, sl
 80086a2:	f040 80a1 	bne.w	80087e8 <__ssvfiscanf_r+0x2d8>
 80086a6:	3301      	adds	r3, #1
 80086a8:	6862      	ldr	r2, [r4, #4]
 80086aa:	6023      	str	r3, [r4, #0]
 80086ac:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80086ae:	3a01      	subs	r2, #1
 80086b0:	3301      	adds	r3, #1
 80086b2:	6062      	str	r2, [r4, #4]
 80086b4:	9345      	str	r3, [sp, #276]	; 0x114
 80086b6:	e755      	b.n	8008564 <__ssvfiscanf_r+0x54>
 80086b8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80086ba:	4621      	mov	r1, r4
 80086bc:	4630      	mov	r0, r6
 80086be:	4798      	blx	r3
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d0eb      	beq.n	800869c <__ssvfiscanf_r+0x18c>
 80086c4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80086c6:	2800      	cmp	r0, #0
 80086c8:	f040 8084 	bne.w	80087d4 <__ssvfiscanf_r+0x2c4>
 80086cc:	f04f 30ff 	mov.w	r0, #4294967295
 80086d0:	e086      	b.n	80087e0 <__ssvfiscanf_r+0x2d0>
 80086d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80086d4:	f042 0220 	orr.w	r2, r2, #32
 80086d8:	9241      	str	r2, [sp, #260]	; 0x104
 80086da:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80086dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80086e0:	9241      	str	r2, [sp, #260]	; 0x104
 80086e2:	2210      	movs	r2, #16
 80086e4:	2b6f      	cmp	r3, #111	; 0x6f
 80086e6:	9242      	str	r2, [sp, #264]	; 0x108
 80086e8:	bf34      	ite	cc
 80086ea:	2303      	movcc	r3, #3
 80086ec:	2304      	movcs	r3, #4
 80086ee:	9347      	str	r3, [sp, #284]	; 0x11c
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	dd41      	ble.n	800877a <__ssvfiscanf_r+0x26a>
 80086f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80086f8:	0659      	lsls	r1, r3, #25
 80086fa:	d404      	bmi.n	8008706 <__ssvfiscanf_r+0x1f6>
 80086fc:	6823      	ldr	r3, [r4, #0]
 80086fe:	781a      	ldrb	r2, [r3, #0]
 8008700:	5cba      	ldrb	r2, [r7, r2]
 8008702:	0712      	lsls	r2, r2, #28
 8008704:	d440      	bmi.n	8008788 <__ssvfiscanf_r+0x278>
 8008706:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008708:	2b02      	cmp	r3, #2
 800870a:	dc4f      	bgt.n	80087ac <__ssvfiscanf_r+0x29c>
 800870c:	466b      	mov	r3, sp
 800870e:	4622      	mov	r2, r4
 8008710:	a941      	add	r1, sp, #260	; 0x104
 8008712:	4630      	mov	r0, r6
 8008714:	f000 fa08 	bl	8008b28 <_scanf_chars>
 8008718:	2801      	cmp	r0, #1
 800871a:	d065      	beq.n	80087e8 <__ssvfiscanf_r+0x2d8>
 800871c:	2802      	cmp	r0, #2
 800871e:	f47f af21 	bne.w	8008564 <__ssvfiscanf_r+0x54>
 8008722:	e7cf      	b.n	80086c4 <__ssvfiscanf_r+0x1b4>
 8008724:	220a      	movs	r2, #10
 8008726:	e7dd      	b.n	80086e4 <__ssvfiscanf_r+0x1d4>
 8008728:	2300      	movs	r3, #0
 800872a:	9342      	str	r3, [sp, #264]	; 0x108
 800872c:	2303      	movs	r3, #3
 800872e:	e7de      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 8008730:	2308      	movs	r3, #8
 8008732:	9342      	str	r3, [sp, #264]	; 0x108
 8008734:	2304      	movs	r3, #4
 8008736:	e7da      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 8008738:	4629      	mov	r1, r5
 800873a:	4640      	mov	r0, r8
 800873c:	f000 fb40 	bl	8008dc0 <__sccl>
 8008740:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008742:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008746:	9341      	str	r3, [sp, #260]	; 0x104
 8008748:	4605      	mov	r5, r0
 800874a:	2301      	movs	r3, #1
 800874c:	e7cf      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 800874e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008754:	9341      	str	r3, [sp, #260]	; 0x104
 8008756:	2300      	movs	r3, #0
 8008758:	e7c9      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 800875a:	2302      	movs	r3, #2
 800875c:	e7c7      	b.n	80086ee <__ssvfiscanf_r+0x1de>
 800875e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008760:	06c3      	lsls	r3, r0, #27
 8008762:	f53f aeff 	bmi.w	8008564 <__ssvfiscanf_r+0x54>
 8008766:	9b00      	ldr	r3, [sp, #0]
 8008768:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800876a:	1d19      	adds	r1, r3, #4
 800876c:	9100      	str	r1, [sp, #0]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	07c0      	lsls	r0, r0, #31
 8008772:	bf4c      	ite	mi
 8008774:	801a      	strhmi	r2, [r3, #0]
 8008776:	601a      	strpl	r2, [r3, #0]
 8008778:	e6f4      	b.n	8008564 <__ssvfiscanf_r+0x54>
 800877a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800877c:	4621      	mov	r1, r4
 800877e:	4630      	mov	r0, r6
 8008780:	4798      	blx	r3
 8008782:	2800      	cmp	r0, #0
 8008784:	d0b7      	beq.n	80086f6 <__ssvfiscanf_r+0x1e6>
 8008786:	e79d      	b.n	80086c4 <__ssvfiscanf_r+0x1b4>
 8008788:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800878a:	3201      	adds	r2, #1
 800878c:	9245      	str	r2, [sp, #276]	; 0x114
 800878e:	6862      	ldr	r2, [r4, #4]
 8008790:	3a01      	subs	r2, #1
 8008792:	2a00      	cmp	r2, #0
 8008794:	6062      	str	r2, [r4, #4]
 8008796:	dd02      	ble.n	800879e <__ssvfiscanf_r+0x28e>
 8008798:	3301      	adds	r3, #1
 800879a:	6023      	str	r3, [r4, #0]
 800879c:	e7ae      	b.n	80086fc <__ssvfiscanf_r+0x1ec>
 800879e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80087a0:	4621      	mov	r1, r4
 80087a2:	4630      	mov	r0, r6
 80087a4:	4798      	blx	r3
 80087a6:	2800      	cmp	r0, #0
 80087a8:	d0a8      	beq.n	80086fc <__ssvfiscanf_r+0x1ec>
 80087aa:	e78b      	b.n	80086c4 <__ssvfiscanf_r+0x1b4>
 80087ac:	2b04      	cmp	r3, #4
 80087ae:	dc06      	bgt.n	80087be <__ssvfiscanf_r+0x2ae>
 80087b0:	466b      	mov	r3, sp
 80087b2:	4622      	mov	r2, r4
 80087b4:	a941      	add	r1, sp, #260	; 0x104
 80087b6:	4630      	mov	r0, r6
 80087b8:	f000 fa0e 	bl	8008bd8 <_scanf_i>
 80087bc:	e7ac      	b.n	8008718 <__ssvfiscanf_r+0x208>
 80087be:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <__ssvfiscanf_r+0x2ec>)
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f43f aecf 	beq.w	8008564 <__ssvfiscanf_r+0x54>
 80087c6:	466b      	mov	r3, sp
 80087c8:	4622      	mov	r2, r4
 80087ca:	a941      	add	r1, sp, #260	; 0x104
 80087cc:	4630      	mov	r0, r6
 80087ce:	f3af 8000 	nop.w
 80087d2:	e7a1      	b.n	8008718 <__ssvfiscanf_r+0x208>
 80087d4:	89a3      	ldrh	r3, [r4, #12]
 80087d6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80087da:	bf18      	it	ne
 80087dc:	f04f 30ff 	movne.w	r0, #4294967295
 80087e0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80087e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80087ea:	e7f9      	b.n	80087e0 <__ssvfiscanf_r+0x2d0>
 80087ec:	0800845d 	.word	0x0800845d
 80087f0:	080084d7 	.word	0x080084d7
 80087f4:	0800990b 	.word	0x0800990b
 80087f8:	080098c2 	.word	0x080098c2
 80087fc:	00000000 	.word	0x00000000

08008800 <_printf_common>:
 8008800:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008804:	4616      	mov	r6, r2
 8008806:	4699      	mov	r9, r3
 8008808:	688a      	ldr	r2, [r1, #8]
 800880a:	690b      	ldr	r3, [r1, #16]
 800880c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008810:	4293      	cmp	r3, r2
 8008812:	bfb8      	it	lt
 8008814:	4613      	movlt	r3, r2
 8008816:	6033      	str	r3, [r6, #0]
 8008818:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800881c:	4607      	mov	r7, r0
 800881e:	460c      	mov	r4, r1
 8008820:	b10a      	cbz	r2, 8008826 <_printf_common+0x26>
 8008822:	3301      	adds	r3, #1
 8008824:	6033      	str	r3, [r6, #0]
 8008826:	6823      	ldr	r3, [r4, #0]
 8008828:	0699      	lsls	r1, r3, #26
 800882a:	bf42      	ittt	mi
 800882c:	6833      	ldrmi	r3, [r6, #0]
 800882e:	3302      	addmi	r3, #2
 8008830:	6033      	strmi	r3, [r6, #0]
 8008832:	6825      	ldr	r5, [r4, #0]
 8008834:	f015 0506 	ands.w	r5, r5, #6
 8008838:	d106      	bne.n	8008848 <_printf_common+0x48>
 800883a:	f104 0a19 	add.w	sl, r4, #25
 800883e:	68e3      	ldr	r3, [r4, #12]
 8008840:	6832      	ldr	r2, [r6, #0]
 8008842:	1a9b      	subs	r3, r3, r2
 8008844:	42ab      	cmp	r3, r5
 8008846:	dc26      	bgt.n	8008896 <_printf_common+0x96>
 8008848:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800884c:	1e13      	subs	r3, r2, #0
 800884e:	6822      	ldr	r2, [r4, #0]
 8008850:	bf18      	it	ne
 8008852:	2301      	movne	r3, #1
 8008854:	0692      	lsls	r2, r2, #26
 8008856:	d42b      	bmi.n	80088b0 <_printf_common+0xb0>
 8008858:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800885c:	4649      	mov	r1, r9
 800885e:	4638      	mov	r0, r7
 8008860:	47c0      	blx	r8
 8008862:	3001      	adds	r0, #1
 8008864:	d01e      	beq.n	80088a4 <_printf_common+0xa4>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	68e5      	ldr	r5, [r4, #12]
 800886a:	6832      	ldr	r2, [r6, #0]
 800886c:	f003 0306 	and.w	r3, r3, #6
 8008870:	2b04      	cmp	r3, #4
 8008872:	bf08      	it	eq
 8008874:	1aad      	subeq	r5, r5, r2
 8008876:	68a3      	ldr	r3, [r4, #8]
 8008878:	6922      	ldr	r2, [r4, #16]
 800887a:	bf0c      	ite	eq
 800887c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008880:	2500      	movne	r5, #0
 8008882:	4293      	cmp	r3, r2
 8008884:	bfc4      	itt	gt
 8008886:	1a9b      	subgt	r3, r3, r2
 8008888:	18ed      	addgt	r5, r5, r3
 800888a:	2600      	movs	r6, #0
 800888c:	341a      	adds	r4, #26
 800888e:	42b5      	cmp	r5, r6
 8008890:	d11a      	bne.n	80088c8 <_printf_common+0xc8>
 8008892:	2000      	movs	r0, #0
 8008894:	e008      	b.n	80088a8 <_printf_common+0xa8>
 8008896:	2301      	movs	r3, #1
 8008898:	4652      	mov	r2, sl
 800889a:	4649      	mov	r1, r9
 800889c:	4638      	mov	r0, r7
 800889e:	47c0      	blx	r8
 80088a0:	3001      	adds	r0, #1
 80088a2:	d103      	bne.n	80088ac <_printf_common+0xac>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088ac:	3501      	adds	r5, #1
 80088ae:	e7c6      	b.n	800883e <_printf_common+0x3e>
 80088b0:	18e1      	adds	r1, r4, r3
 80088b2:	1c5a      	adds	r2, r3, #1
 80088b4:	2030      	movs	r0, #48	; 0x30
 80088b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088ba:	4422      	add	r2, r4
 80088bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088c4:	3302      	adds	r3, #2
 80088c6:	e7c7      	b.n	8008858 <_printf_common+0x58>
 80088c8:	2301      	movs	r3, #1
 80088ca:	4622      	mov	r2, r4
 80088cc:	4649      	mov	r1, r9
 80088ce:	4638      	mov	r0, r7
 80088d0:	47c0      	blx	r8
 80088d2:	3001      	adds	r0, #1
 80088d4:	d0e6      	beq.n	80088a4 <_printf_common+0xa4>
 80088d6:	3601      	adds	r6, #1
 80088d8:	e7d9      	b.n	800888e <_printf_common+0x8e>
	...

080088dc <_printf_i>:
 80088dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	460c      	mov	r4, r1
 80088e2:	4691      	mov	r9, r2
 80088e4:	7e27      	ldrb	r7, [r4, #24]
 80088e6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80088e8:	2f78      	cmp	r7, #120	; 0x78
 80088ea:	4680      	mov	r8, r0
 80088ec:	469a      	mov	sl, r3
 80088ee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088f2:	d807      	bhi.n	8008904 <_printf_i+0x28>
 80088f4:	2f62      	cmp	r7, #98	; 0x62
 80088f6:	d80a      	bhi.n	800890e <_printf_i+0x32>
 80088f8:	2f00      	cmp	r7, #0
 80088fa:	f000 80d8 	beq.w	8008aae <_printf_i+0x1d2>
 80088fe:	2f58      	cmp	r7, #88	; 0x58
 8008900:	f000 80a3 	beq.w	8008a4a <_printf_i+0x16e>
 8008904:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008908:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800890c:	e03a      	b.n	8008984 <_printf_i+0xa8>
 800890e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008912:	2b15      	cmp	r3, #21
 8008914:	d8f6      	bhi.n	8008904 <_printf_i+0x28>
 8008916:	a001      	add	r0, pc, #4	; (adr r0, 800891c <_printf_i+0x40>)
 8008918:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800891c:	08008975 	.word	0x08008975
 8008920:	08008989 	.word	0x08008989
 8008924:	08008905 	.word	0x08008905
 8008928:	08008905 	.word	0x08008905
 800892c:	08008905 	.word	0x08008905
 8008930:	08008905 	.word	0x08008905
 8008934:	08008989 	.word	0x08008989
 8008938:	08008905 	.word	0x08008905
 800893c:	08008905 	.word	0x08008905
 8008940:	08008905 	.word	0x08008905
 8008944:	08008905 	.word	0x08008905
 8008948:	08008a95 	.word	0x08008a95
 800894c:	080089b9 	.word	0x080089b9
 8008950:	08008a77 	.word	0x08008a77
 8008954:	08008905 	.word	0x08008905
 8008958:	08008905 	.word	0x08008905
 800895c:	08008ab7 	.word	0x08008ab7
 8008960:	08008905 	.word	0x08008905
 8008964:	080089b9 	.word	0x080089b9
 8008968:	08008905 	.word	0x08008905
 800896c:	08008905 	.word	0x08008905
 8008970:	08008a7f 	.word	0x08008a7f
 8008974:	680b      	ldr	r3, [r1, #0]
 8008976:	1d1a      	adds	r2, r3, #4
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	600a      	str	r2, [r1, #0]
 800897c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008980:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008984:	2301      	movs	r3, #1
 8008986:	e0a3      	b.n	8008ad0 <_printf_i+0x1f4>
 8008988:	6825      	ldr	r5, [r4, #0]
 800898a:	6808      	ldr	r0, [r1, #0]
 800898c:	062e      	lsls	r6, r5, #24
 800898e:	f100 0304 	add.w	r3, r0, #4
 8008992:	d50a      	bpl.n	80089aa <_printf_i+0xce>
 8008994:	6805      	ldr	r5, [r0, #0]
 8008996:	600b      	str	r3, [r1, #0]
 8008998:	2d00      	cmp	r5, #0
 800899a:	da03      	bge.n	80089a4 <_printf_i+0xc8>
 800899c:	232d      	movs	r3, #45	; 0x2d
 800899e:	426d      	negs	r5, r5
 80089a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a4:	485e      	ldr	r0, [pc, #376]	; (8008b20 <_printf_i+0x244>)
 80089a6:	230a      	movs	r3, #10
 80089a8:	e019      	b.n	80089de <_printf_i+0x102>
 80089aa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80089ae:	6805      	ldr	r5, [r0, #0]
 80089b0:	600b      	str	r3, [r1, #0]
 80089b2:	bf18      	it	ne
 80089b4:	b22d      	sxthne	r5, r5
 80089b6:	e7ef      	b.n	8008998 <_printf_i+0xbc>
 80089b8:	680b      	ldr	r3, [r1, #0]
 80089ba:	6825      	ldr	r5, [r4, #0]
 80089bc:	1d18      	adds	r0, r3, #4
 80089be:	6008      	str	r0, [r1, #0]
 80089c0:	0628      	lsls	r0, r5, #24
 80089c2:	d501      	bpl.n	80089c8 <_printf_i+0xec>
 80089c4:	681d      	ldr	r5, [r3, #0]
 80089c6:	e002      	b.n	80089ce <_printf_i+0xf2>
 80089c8:	0669      	lsls	r1, r5, #25
 80089ca:	d5fb      	bpl.n	80089c4 <_printf_i+0xe8>
 80089cc:	881d      	ldrh	r5, [r3, #0]
 80089ce:	4854      	ldr	r0, [pc, #336]	; (8008b20 <_printf_i+0x244>)
 80089d0:	2f6f      	cmp	r7, #111	; 0x6f
 80089d2:	bf0c      	ite	eq
 80089d4:	2308      	moveq	r3, #8
 80089d6:	230a      	movne	r3, #10
 80089d8:	2100      	movs	r1, #0
 80089da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089de:	6866      	ldr	r6, [r4, #4]
 80089e0:	60a6      	str	r6, [r4, #8]
 80089e2:	2e00      	cmp	r6, #0
 80089e4:	bfa2      	ittt	ge
 80089e6:	6821      	ldrge	r1, [r4, #0]
 80089e8:	f021 0104 	bicge.w	r1, r1, #4
 80089ec:	6021      	strge	r1, [r4, #0]
 80089ee:	b90d      	cbnz	r5, 80089f4 <_printf_i+0x118>
 80089f0:	2e00      	cmp	r6, #0
 80089f2:	d04d      	beq.n	8008a90 <_printf_i+0x1b4>
 80089f4:	4616      	mov	r6, r2
 80089f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80089fa:	fb03 5711 	mls	r7, r3, r1, r5
 80089fe:	5dc7      	ldrb	r7, [r0, r7]
 8008a00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008a04:	462f      	mov	r7, r5
 8008a06:	42bb      	cmp	r3, r7
 8008a08:	460d      	mov	r5, r1
 8008a0a:	d9f4      	bls.n	80089f6 <_printf_i+0x11a>
 8008a0c:	2b08      	cmp	r3, #8
 8008a0e:	d10b      	bne.n	8008a28 <_printf_i+0x14c>
 8008a10:	6823      	ldr	r3, [r4, #0]
 8008a12:	07df      	lsls	r7, r3, #31
 8008a14:	d508      	bpl.n	8008a28 <_printf_i+0x14c>
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	6861      	ldr	r1, [r4, #4]
 8008a1a:	4299      	cmp	r1, r3
 8008a1c:	bfde      	ittt	le
 8008a1e:	2330      	movle	r3, #48	; 0x30
 8008a20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008a24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008a28:	1b92      	subs	r2, r2, r6
 8008a2a:	6122      	str	r2, [r4, #16]
 8008a2c:	f8cd a000 	str.w	sl, [sp]
 8008a30:	464b      	mov	r3, r9
 8008a32:	aa03      	add	r2, sp, #12
 8008a34:	4621      	mov	r1, r4
 8008a36:	4640      	mov	r0, r8
 8008a38:	f7ff fee2 	bl	8008800 <_printf_common>
 8008a3c:	3001      	adds	r0, #1
 8008a3e:	d14c      	bne.n	8008ada <_printf_i+0x1fe>
 8008a40:	f04f 30ff 	mov.w	r0, #4294967295
 8008a44:	b004      	add	sp, #16
 8008a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a4a:	4835      	ldr	r0, [pc, #212]	; (8008b20 <_printf_i+0x244>)
 8008a4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	680e      	ldr	r6, [r1, #0]
 8008a54:	061f      	lsls	r7, r3, #24
 8008a56:	f856 5b04 	ldr.w	r5, [r6], #4
 8008a5a:	600e      	str	r6, [r1, #0]
 8008a5c:	d514      	bpl.n	8008a88 <_printf_i+0x1ac>
 8008a5e:	07d9      	lsls	r1, r3, #31
 8008a60:	bf44      	itt	mi
 8008a62:	f043 0320 	orrmi.w	r3, r3, #32
 8008a66:	6023      	strmi	r3, [r4, #0]
 8008a68:	b91d      	cbnz	r5, 8008a72 <_printf_i+0x196>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	f023 0320 	bic.w	r3, r3, #32
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	2310      	movs	r3, #16
 8008a74:	e7b0      	b.n	80089d8 <_printf_i+0xfc>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	f043 0320 	orr.w	r3, r3, #32
 8008a7c:	6023      	str	r3, [r4, #0]
 8008a7e:	2378      	movs	r3, #120	; 0x78
 8008a80:	4828      	ldr	r0, [pc, #160]	; (8008b24 <_printf_i+0x248>)
 8008a82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a86:	e7e3      	b.n	8008a50 <_printf_i+0x174>
 8008a88:	065e      	lsls	r6, r3, #25
 8008a8a:	bf48      	it	mi
 8008a8c:	b2ad      	uxthmi	r5, r5
 8008a8e:	e7e6      	b.n	8008a5e <_printf_i+0x182>
 8008a90:	4616      	mov	r6, r2
 8008a92:	e7bb      	b.n	8008a0c <_printf_i+0x130>
 8008a94:	680b      	ldr	r3, [r1, #0]
 8008a96:	6826      	ldr	r6, [r4, #0]
 8008a98:	6960      	ldr	r0, [r4, #20]
 8008a9a:	1d1d      	adds	r5, r3, #4
 8008a9c:	600d      	str	r5, [r1, #0]
 8008a9e:	0635      	lsls	r5, r6, #24
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	d501      	bpl.n	8008aa8 <_printf_i+0x1cc>
 8008aa4:	6018      	str	r0, [r3, #0]
 8008aa6:	e002      	b.n	8008aae <_printf_i+0x1d2>
 8008aa8:	0671      	lsls	r1, r6, #25
 8008aaa:	d5fb      	bpl.n	8008aa4 <_printf_i+0x1c8>
 8008aac:	8018      	strh	r0, [r3, #0]
 8008aae:	2300      	movs	r3, #0
 8008ab0:	6123      	str	r3, [r4, #16]
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	e7ba      	b.n	8008a2c <_printf_i+0x150>
 8008ab6:	680b      	ldr	r3, [r1, #0]
 8008ab8:	1d1a      	adds	r2, r3, #4
 8008aba:	600a      	str	r2, [r1, #0]
 8008abc:	681e      	ldr	r6, [r3, #0]
 8008abe:	6862      	ldr	r2, [r4, #4]
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f7f7 fb94 	bl	80001f0 <memchr>
 8008ac8:	b108      	cbz	r0, 8008ace <_printf_i+0x1f2>
 8008aca:	1b80      	subs	r0, r0, r6
 8008acc:	6060      	str	r0, [r4, #4]
 8008ace:	6863      	ldr	r3, [r4, #4]
 8008ad0:	6123      	str	r3, [r4, #16]
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ad8:	e7a8      	b.n	8008a2c <_printf_i+0x150>
 8008ada:	6923      	ldr	r3, [r4, #16]
 8008adc:	4632      	mov	r2, r6
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	47d0      	blx	sl
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d0ab      	beq.n	8008a40 <_printf_i+0x164>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	079b      	lsls	r3, r3, #30
 8008aec:	d413      	bmi.n	8008b16 <_printf_i+0x23a>
 8008aee:	68e0      	ldr	r0, [r4, #12]
 8008af0:	9b03      	ldr	r3, [sp, #12]
 8008af2:	4298      	cmp	r0, r3
 8008af4:	bfb8      	it	lt
 8008af6:	4618      	movlt	r0, r3
 8008af8:	e7a4      	b.n	8008a44 <_printf_i+0x168>
 8008afa:	2301      	movs	r3, #1
 8008afc:	4632      	mov	r2, r6
 8008afe:	4649      	mov	r1, r9
 8008b00:	4640      	mov	r0, r8
 8008b02:	47d0      	blx	sl
 8008b04:	3001      	adds	r0, #1
 8008b06:	d09b      	beq.n	8008a40 <_printf_i+0x164>
 8008b08:	3501      	adds	r5, #1
 8008b0a:	68e3      	ldr	r3, [r4, #12]
 8008b0c:	9903      	ldr	r1, [sp, #12]
 8008b0e:	1a5b      	subs	r3, r3, r1
 8008b10:	42ab      	cmp	r3, r5
 8008b12:	dcf2      	bgt.n	8008afa <_printf_i+0x21e>
 8008b14:	e7eb      	b.n	8008aee <_printf_i+0x212>
 8008b16:	2500      	movs	r5, #0
 8008b18:	f104 0619 	add.w	r6, r4, #25
 8008b1c:	e7f5      	b.n	8008b0a <_printf_i+0x22e>
 8008b1e:	bf00      	nop
 8008b20:	080098cd 	.word	0x080098cd
 8008b24:	080098de 	.word	0x080098de

08008b28 <_scanf_chars>:
 8008b28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b2c:	4615      	mov	r5, r2
 8008b2e:	688a      	ldr	r2, [r1, #8]
 8008b30:	4680      	mov	r8, r0
 8008b32:	460c      	mov	r4, r1
 8008b34:	b932      	cbnz	r2, 8008b44 <_scanf_chars+0x1c>
 8008b36:	698a      	ldr	r2, [r1, #24]
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	bf0c      	ite	eq
 8008b3c:	2201      	moveq	r2, #1
 8008b3e:	f04f 32ff 	movne.w	r2, #4294967295
 8008b42:	608a      	str	r2, [r1, #8]
 8008b44:	6822      	ldr	r2, [r4, #0]
 8008b46:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008bd4 <_scanf_chars+0xac>
 8008b4a:	06d1      	lsls	r1, r2, #27
 8008b4c:	bf5f      	itttt	pl
 8008b4e:	681a      	ldrpl	r2, [r3, #0]
 8008b50:	1d11      	addpl	r1, r2, #4
 8008b52:	6019      	strpl	r1, [r3, #0]
 8008b54:	6816      	ldrpl	r6, [r2, #0]
 8008b56:	2700      	movs	r7, #0
 8008b58:	69a0      	ldr	r0, [r4, #24]
 8008b5a:	b188      	cbz	r0, 8008b80 <_scanf_chars+0x58>
 8008b5c:	2801      	cmp	r0, #1
 8008b5e:	d107      	bne.n	8008b70 <_scanf_chars+0x48>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	781a      	ldrb	r2, [r3, #0]
 8008b64:	6963      	ldr	r3, [r4, #20]
 8008b66:	5c9b      	ldrb	r3, [r3, r2]
 8008b68:	b953      	cbnz	r3, 8008b80 <_scanf_chars+0x58>
 8008b6a:	bb27      	cbnz	r7, 8008bb6 <_scanf_chars+0x8e>
 8008b6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b70:	2802      	cmp	r0, #2
 8008b72:	d120      	bne.n	8008bb6 <_scanf_chars+0x8e>
 8008b74:	682b      	ldr	r3, [r5, #0]
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008b7c:	071b      	lsls	r3, r3, #28
 8008b7e:	d41a      	bmi.n	8008bb6 <_scanf_chars+0x8e>
 8008b80:	6823      	ldr	r3, [r4, #0]
 8008b82:	06da      	lsls	r2, r3, #27
 8008b84:	bf5e      	ittt	pl
 8008b86:	682b      	ldrpl	r3, [r5, #0]
 8008b88:	781b      	ldrbpl	r3, [r3, #0]
 8008b8a:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b8e:	682a      	ldr	r2, [r5, #0]
 8008b90:	686b      	ldr	r3, [r5, #4]
 8008b92:	3201      	adds	r2, #1
 8008b94:	602a      	str	r2, [r5, #0]
 8008b96:	68a2      	ldr	r2, [r4, #8]
 8008b98:	3b01      	subs	r3, #1
 8008b9a:	3a01      	subs	r2, #1
 8008b9c:	606b      	str	r3, [r5, #4]
 8008b9e:	3701      	adds	r7, #1
 8008ba0:	60a2      	str	r2, [r4, #8]
 8008ba2:	b142      	cbz	r2, 8008bb6 <_scanf_chars+0x8e>
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	dcd7      	bgt.n	8008b58 <_scanf_chars+0x30>
 8008ba8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bac:	4629      	mov	r1, r5
 8008bae:	4640      	mov	r0, r8
 8008bb0:	4798      	blx	r3
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d0d0      	beq.n	8008b58 <_scanf_chars+0x30>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	f013 0310 	ands.w	r3, r3, #16
 8008bbc:	d105      	bne.n	8008bca <_scanf_chars+0xa2>
 8008bbe:	68e2      	ldr	r2, [r4, #12]
 8008bc0:	3201      	adds	r2, #1
 8008bc2:	60e2      	str	r2, [r4, #12]
 8008bc4:	69a2      	ldr	r2, [r4, #24]
 8008bc6:	b102      	cbz	r2, 8008bca <_scanf_chars+0xa2>
 8008bc8:	7033      	strb	r3, [r6, #0]
 8008bca:	6923      	ldr	r3, [r4, #16]
 8008bcc:	441f      	add	r7, r3
 8008bce:	6127      	str	r7, [r4, #16]
 8008bd0:	2000      	movs	r0, #0
 8008bd2:	e7cb      	b.n	8008b6c <_scanf_chars+0x44>
 8008bd4:	0800990b 	.word	0x0800990b

08008bd8 <_scanf_i>:
 8008bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bdc:	4698      	mov	r8, r3
 8008bde:	4b74      	ldr	r3, [pc, #464]	; (8008db0 <_scanf_i+0x1d8>)
 8008be0:	460c      	mov	r4, r1
 8008be2:	4682      	mov	sl, r0
 8008be4:	4616      	mov	r6, r2
 8008be6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bea:	b087      	sub	sp, #28
 8008bec:	ab03      	add	r3, sp, #12
 8008bee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008bf2:	4b70      	ldr	r3, [pc, #448]	; (8008db4 <_scanf_i+0x1dc>)
 8008bf4:	69a1      	ldr	r1, [r4, #24]
 8008bf6:	4a70      	ldr	r2, [pc, #448]	; (8008db8 <_scanf_i+0x1e0>)
 8008bf8:	2903      	cmp	r1, #3
 8008bfa:	bf18      	it	ne
 8008bfc:	461a      	movne	r2, r3
 8008bfe:	68a3      	ldr	r3, [r4, #8]
 8008c00:	9201      	str	r2, [sp, #4]
 8008c02:	1e5a      	subs	r2, r3, #1
 8008c04:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c08:	bf88      	it	hi
 8008c0a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c0e:	4627      	mov	r7, r4
 8008c10:	bf82      	ittt	hi
 8008c12:	eb03 0905 	addhi.w	r9, r3, r5
 8008c16:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c1a:	60a3      	strhi	r3, [r4, #8]
 8008c1c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c20:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008c24:	bf98      	it	ls
 8008c26:	f04f 0900 	movls.w	r9, #0
 8008c2a:	6023      	str	r3, [r4, #0]
 8008c2c:	463d      	mov	r5, r7
 8008c2e:	f04f 0b00 	mov.w	fp, #0
 8008c32:	6831      	ldr	r1, [r6, #0]
 8008c34:	ab03      	add	r3, sp, #12
 8008c36:	7809      	ldrb	r1, [r1, #0]
 8008c38:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c3c:	2202      	movs	r2, #2
 8008c3e:	f7f7 fad7 	bl	80001f0 <memchr>
 8008c42:	b328      	cbz	r0, 8008c90 <_scanf_i+0xb8>
 8008c44:	f1bb 0f01 	cmp.w	fp, #1
 8008c48:	d159      	bne.n	8008cfe <_scanf_i+0x126>
 8008c4a:	6862      	ldr	r2, [r4, #4]
 8008c4c:	b92a      	cbnz	r2, 8008c5a <_scanf_i+0x82>
 8008c4e:	6822      	ldr	r2, [r4, #0]
 8008c50:	2308      	movs	r3, #8
 8008c52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c56:	6063      	str	r3, [r4, #4]
 8008c58:	6022      	str	r2, [r4, #0]
 8008c5a:	6822      	ldr	r2, [r4, #0]
 8008c5c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008c60:	6022      	str	r2, [r4, #0]
 8008c62:	68a2      	ldr	r2, [r4, #8]
 8008c64:	1e51      	subs	r1, r2, #1
 8008c66:	60a1      	str	r1, [r4, #8]
 8008c68:	b192      	cbz	r2, 8008c90 <_scanf_i+0xb8>
 8008c6a:	6832      	ldr	r2, [r6, #0]
 8008c6c:	1c51      	adds	r1, r2, #1
 8008c6e:	6031      	str	r1, [r6, #0]
 8008c70:	7812      	ldrb	r2, [r2, #0]
 8008c72:	f805 2b01 	strb.w	r2, [r5], #1
 8008c76:	6872      	ldr	r2, [r6, #4]
 8008c78:	3a01      	subs	r2, #1
 8008c7a:	2a00      	cmp	r2, #0
 8008c7c:	6072      	str	r2, [r6, #4]
 8008c7e:	dc07      	bgt.n	8008c90 <_scanf_i+0xb8>
 8008c80:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008c84:	4631      	mov	r1, r6
 8008c86:	4650      	mov	r0, sl
 8008c88:	4790      	blx	r2
 8008c8a:	2800      	cmp	r0, #0
 8008c8c:	f040 8085 	bne.w	8008d9a <_scanf_i+0x1c2>
 8008c90:	f10b 0b01 	add.w	fp, fp, #1
 8008c94:	f1bb 0f03 	cmp.w	fp, #3
 8008c98:	d1cb      	bne.n	8008c32 <_scanf_i+0x5a>
 8008c9a:	6863      	ldr	r3, [r4, #4]
 8008c9c:	b90b      	cbnz	r3, 8008ca2 <_scanf_i+0xca>
 8008c9e:	230a      	movs	r3, #10
 8008ca0:	6063      	str	r3, [r4, #4]
 8008ca2:	6863      	ldr	r3, [r4, #4]
 8008ca4:	4945      	ldr	r1, [pc, #276]	; (8008dbc <_scanf_i+0x1e4>)
 8008ca6:	6960      	ldr	r0, [r4, #20]
 8008ca8:	1ac9      	subs	r1, r1, r3
 8008caa:	f000 f889 	bl	8008dc0 <__sccl>
 8008cae:	f04f 0b00 	mov.w	fp, #0
 8008cb2:	68a3      	ldr	r3, [r4, #8]
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d03d      	beq.n	8008d36 <_scanf_i+0x15e>
 8008cba:	6831      	ldr	r1, [r6, #0]
 8008cbc:	6960      	ldr	r0, [r4, #20]
 8008cbe:	f891 c000 	ldrb.w	ip, [r1]
 8008cc2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	d035      	beq.n	8008d36 <_scanf_i+0x15e>
 8008cca:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008cce:	d124      	bne.n	8008d1a <_scanf_i+0x142>
 8008cd0:	0510      	lsls	r0, r2, #20
 8008cd2:	d522      	bpl.n	8008d1a <_scanf_i+0x142>
 8008cd4:	f10b 0b01 	add.w	fp, fp, #1
 8008cd8:	f1b9 0f00 	cmp.w	r9, #0
 8008cdc:	d003      	beq.n	8008ce6 <_scanf_i+0x10e>
 8008cde:	3301      	adds	r3, #1
 8008ce0:	f109 39ff 	add.w	r9, r9, #4294967295
 8008ce4:	60a3      	str	r3, [r4, #8]
 8008ce6:	6873      	ldr	r3, [r6, #4]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	6073      	str	r3, [r6, #4]
 8008cee:	dd1b      	ble.n	8008d28 <_scanf_i+0x150>
 8008cf0:	6833      	ldr	r3, [r6, #0]
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	6033      	str	r3, [r6, #0]
 8008cf6:	68a3      	ldr	r3, [r4, #8]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	60a3      	str	r3, [r4, #8]
 8008cfc:	e7d9      	b.n	8008cb2 <_scanf_i+0xda>
 8008cfe:	f1bb 0f02 	cmp.w	fp, #2
 8008d02:	d1ae      	bne.n	8008c62 <_scanf_i+0x8a>
 8008d04:	6822      	ldr	r2, [r4, #0]
 8008d06:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008d0a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008d0e:	d1bf      	bne.n	8008c90 <_scanf_i+0xb8>
 8008d10:	2310      	movs	r3, #16
 8008d12:	6063      	str	r3, [r4, #4]
 8008d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d18:	e7a2      	b.n	8008c60 <_scanf_i+0x88>
 8008d1a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008d1e:	6022      	str	r2, [r4, #0]
 8008d20:	780b      	ldrb	r3, [r1, #0]
 8008d22:	f805 3b01 	strb.w	r3, [r5], #1
 8008d26:	e7de      	b.n	8008ce6 <_scanf_i+0x10e>
 8008d28:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d2c:	4631      	mov	r1, r6
 8008d2e:	4650      	mov	r0, sl
 8008d30:	4798      	blx	r3
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d0df      	beq.n	8008cf6 <_scanf_i+0x11e>
 8008d36:	6823      	ldr	r3, [r4, #0]
 8008d38:	05d9      	lsls	r1, r3, #23
 8008d3a:	d50d      	bpl.n	8008d58 <_scanf_i+0x180>
 8008d3c:	42bd      	cmp	r5, r7
 8008d3e:	d909      	bls.n	8008d54 <_scanf_i+0x17c>
 8008d40:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d44:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d48:	4632      	mov	r2, r6
 8008d4a:	4650      	mov	r0, sl
 8008d4c:	4798      	blx	r3
 8008d4e:	f105 39ff 	add.w	r9, r5, #4294967295
 8008d52:	464d      	mov	r5, r9
 8008d54:	42bd      	cmp	r5, r7
 8008d56:	d028      	beq.n	8008daa <_scanf_i+0x1d2>
 8008d58:	6822      	ldr	r2, [r4, #0]
 8008d5a:	f012 0210 	ands.w	r2, r2, #16
 8008d5e:	d113      	bne.n	8008d88 <_scanf_i+0x1b0>
 8008d60:	702a      	strb	r2, [r5, #0]
 8008d62:	6863      	ldr	r3, [r4, #4]
 8008d64:	9e01      	ldr	r6, [sp, #4]
 8008d66:	4639      	mov	r1, r7
 8008d68:	4650      	mov	r0, sl
 8008d6a:	47b0      	blx	r6
 8008d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008d70:	6821      	ldr	r1, [r4, #0]
 8008d72:	1d1a      	adds	r2, r3, #4
 8008d74:	f8c8 2000 	str.w	r2, [r8]
 8008d78:	f011 0f20 	tst.w	r1, #32
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	d00f      	beq.n	8008da0 <_scanf_i+0x1c8>
 8008d80:	6018      	str	r0, [r3, #0]
 8008d82:	68e3      	ldr	r3, [r4, #12]
 8008d84:	3301      	adds	r3, #1
 8008d86:	60e3      	str	r3, [r4, #12]
 8008d88:	1bed      	subs	r5, r5, r7
 8008d8a:	44ab      	add	fp, r5
 8008d8c:	6925      	ldr	r5, [r4, #16]
 8008d8e:	445d      	add	r5, fp
 8008d90:	6125      	str	r5, [r4, #16]
 8008d92:	2000      	movs	r0, #0
 8008d94:	b007      	add	sp, #28
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	f04f 0b00 	mov.w	fp, #0
 8008d9e:	e7ca      	b.n	8008d36 <_scanf_i+0x15e>
 8008da0:	07ca      	lsls	r2, r1, #31
 8008da2:	bf4c      	ite	mi
 8008da4:	8018      	strhmi	r0, [r3, #0]
 8008da6:	6018      	strpl	r0, [r3, #0]
 8008da8:	e7eb      	b.n	8008d82 <_scanf_i+0x1aa>
 8008daa:	2001      	movs	r0, #1
 8008dac:	e7f2      	b.n	8008d94 <_scanf_i+0x1bc>
 8008dae:	bf00      	nop
 8008db0:	08009458 	.word	0x08009458
 8008db4:	08009039 	.word	0x08009039
 8008db8:	08008f3d 	.word	0x08008f3d
 8008dbc:	08009908 	.word	0x08009908

08008dc0 <__sccl>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	780b      	ldrb	r3, [r1, #0]
 8008dc4:	4604      	mov	r4, r0
 8008dc6:	2b5e      	cmp	r3, #94	; 0x5e
 8008dc8:	bf0b      	itete	eq
 8008dca:	784b      	ldrbeq	r3, [r1, #1]
 8008dcc:	1c48      	addne	r0, r1, #1
 8008dce:	1c88      	addeq	r0, r1, #2
 8008dd0:	2200      	movne	r2, #0
 8008dd2:	bf08      	it	eq
 8008dd4:	2201      	moveq	r2, #1
 8008dd6:	1e61      	subs	r1, r4, #1
 8008dd8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008ddc:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008de0:	42a9      	cmp	r1, r5
 8008de2:	d1fb      	bne.n	8008ddc <__sccl+0x1c>
 8008de4:	b90b      	cbnz	r3, 8008dea <__sccl+0x2a>
 8008de6:	3801      	subs	r0, #1
 8008de8:	bd70      	pop	{r4, r5, r6, pc}
 8008dea:	f082 0101 	eor.w	r1, r2, #1
 8008dee:	54e1      	strb	r1, [r4, r3]
 8008df0:	1c42      	adds	r2, r0, #1
 8008df2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008df6:	2d2d      	cmp	r5, #45	; 0x2d
 8008df8:	f102 36ff 	add.w	r6, r2, #4294967295
 8008dfc:	4610      	mov	r0, r2
 8008dfe:	d006      	beq.n	8008e0e <__sccl+0x4e>
 8008e00:	2d5d      	cmp	r5, #93	; 0x5d
 8008e02:	d0f1      	beq.n	8008de8 <__sccl+0x28>
 8008e04:	b90d      	cbnz	r5, 8008e0a <__sccl+0x4a>
 8008e06:	4630      	mov	r0, r6
 8008e08:	e7ee      	b.n	8008de8 <__sccl+0x28>
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	e7ef      	b.n	8008dee <__sccl+0x2e>
 8008e0e:	7816      	ldrb	r6, [r2, #0]
 8008e10:	2e5d      	cmp	r6, #93	; 0x5d
 8008e12:	d0fa      	beq.n	8008e0a <__sccl+0x4a>
 8008e14:	42b3      	cmp	r3, r6
 8008e16:	dcf8      	bgt.n	8008e0a <__sccl+0x4a>
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3001      	adds	r0, #1
 8008e1c:	4286      	cmp	r6, r0
 8008e1e:	5421      	strb	r1, [r4, r0]
 8008e20:	dcfb      	bgt.n	8008e1a <__sccl+0x5a>
 8008e22:	43d8      	mvns	r0, r3
 8008e24:	4430      	add	r0, r6
 8008e26:	1c5d      	adds	r5, r3, #1
 8008e28:	42b3      	cmp	r3, r6
 8008e2a:	bfa8      	it	ge
 8008e2c:	2000      	movge	r0, #0
 8008e2e:	182b      	adds	r3, r5, r0
 8008e30:	3202      	adds	r2, #2
 8008e32:	e7de      	b.n	8008df2 <__sccl+0x32>

08008e34 <_strtol_l.isra.0>:
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e3a:	d001      	beq.n	8008e40 <_strtol_l.isra.0+0xc>
 8008e3c:	2b24      	cmp	r3, #36	; 0x24
 8008e3e:	d906      	bls.n	8008e4e <_strtol_l.isra.0+0x1a>
 8008e40:	f7ff f924 	bl	800808c <__errno>
 8008e44:	2316      	movs	r3, #22
 8008e46:	6003      	str	r3, [r0, #0]
 8008e48:	2000      	movs	r0, #0
 8008e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e4e:	4f3a      	ldr	r7, [pc, #232]	; (8008f38 <_strtol_l.isra.0+0x104>)
 8008e50:	468e      	mov	lr, r1
 8008e52:	4676      	mov	r6, lr
 8008e54:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008e58:	5de5      	ldrb	r5, [r4, r7]
 8008e5a:	f015 0508 	ands.w	r5, r5, #8
 8008e5e:	d1f8      	bne.n	8008e52 <_strtol_l.isra.0+0x1e>
 8008e60:	2c2d      	cmp	r4, #45	; 0x2d
 8008e62:	d134      	bne.n	8008ece <_strtol_l.isra.0+0x9a>
 8008e64:	f89e 4000 	ldrb.w	r4, [lr]
 8008e68:	f04f 0801 	mov.w	r8, #1
 8008e6c:	f106 0e02 	add.w	lr, r6, #2
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d05c      	beq.n	8008f2e <_strtol_l.isra.0+0xfa>
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	d10c      	bne.n	8008e92 <_strtol_l.isra.0+0x5e>
 8008e78:	2c30      	cmp	r4, #48	; 0x30
 8008e7a:	d10a      	bne.n	8008e92 <_strtol_l.isra.0+0x5e>
 8008e7c:	f89e 4000 	ldrb.w	r4, [lr]
 8008e80:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e84:	2c58      	cmp	r4, #88	; 0x58
 8008e86:	d14d      	bne.n	8008f24 <_strtol_l.isra.0+0xf0>
 8008e88:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008e8c:	2310      	movs	r3, #16
 8008e8e:	f10e 0e02 	add.w	lr, lr, #2
 8008e92:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008e96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	fbbc f9f3 	udiv	r9, ip, r3
 8008ea0:	4635      	mov	r5, r6
 8008ea2:	fb03 ca19 	mls	sl, r3, r9, ip
 8008ea6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008eaa:	2f09      	cmp	r7, #9
 8008eac:	d818      	bhi.n	8008ee0 <_strtol_l.isra.0+0xac>
 8008eae:	463c      	mov	r4, r7
 8008eb0:	42a3      	cmp	r3, r4
 8008eb2:	dd24      	ble.n	8008efe <_strtol_l.isra.0+0xca>
 8008eb4:	2e00      	cmp	r6, #0
 8008eb6:	db1f      	blt.n	8008ef8 <_strtol_l.isra.0+0xc4>
 8008eb8:	45a9      	cmp	r9, r5
 8008eba:	d31d      	bcc.n	8008ef8 <_strtol_l.isra.0+0xc4>
 8008ebc:	d101      	bne.n	8008ec2 <_strtol_l.isra.0+0x8e>
 8008ebe:	45a2      	cmp	sl, r4
 8008ec0:	db1a      	blt.n	8008ef8 <_strtol_l.isra.0+0xc4>
 8008ec2:	fb05 4503 	mla	r5, r5, r3, r4
 8008ec6:	2601      	movs	r6, #1
 8008ec8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008ecc:	e7eb      	b.n	8008ea6 <_strtol_l.isra.0+0x72>
 8008ece:	2c2b      	cmp	r4, #43	; 0x2b
 8008ed0:	bf08      	it	eq
 8008ed2:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008ed6:	46a8      	mov	r8, r5
 8008ed8:	bf08      	it	eq
 8008eda:	f106 0e02 	addeq.w	lr, r6, #2
 8008ede:	e7c7      	b.n	8008e70 <_strtol_l.isra.0+0x3c>
 8008ee0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008ee4:	2f19      	cmp	r7, #25
 8008ee6:	d801      	bhi.n	8008eec <_strtol_l.isra.0+0xb8>
 8008ee8:	3c37      	subs	r4, #55	; 0x37
 8008eea:	e7e1      	b.n	8008eb0 <_strtol_l.isra.0+0x7c>
 8008eec:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008ef0:	2f19      	cmp	r7, #25
 8008ef2:	d804      	bhi.n	8008efe <_strtol_l.isra.0+0xca>
 8008ef4:	3c57      	subs	r4, #87	; 0x57
 8008ef6:	e7db      	b.n	8008eb0 <_strtol_l.isra.0+0x7c>
 8008ef8:	f04f 36ff 	mov.w	r6, #4294967295
 8008efc:	e7e4      	b.n	8008ec8 <_strtol_l.isra.0+0x94>
 8008efe:	2e00      	cmp	r6, #0
 8008f00:	da05      	bge.n	8008f0e <_strtol_l.isra.0+0xda>
 8008f02:	2322      	movs	r3, #34	; 0x22
 8008f04:	6003      	str	r3, [r0, #0]
 8008f06:	4665      	mov	r5, ip
 8008f08:	b942      	cbnz	r2, 8008f1c <_strtol_l.isra.0+0xe8>
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	e79d      	b.n	8008e4a <_strtol_l.isra.0+0x16>
 8008f0e:	f1b8 0f00 	cmp.w	r8, #0
 8008f12:	d000      	beq.n	8008f16 <_strtol_l.isra.0+0xe2>
 8008f14:	426d      	negs	r5, r5
 8008f16:	2a00      	cmp	r2, #0
 8008f18:	d0f7      	beq.n	8008f0a <_strtol_l.isra.0+0xd6>
 8008f1a:	b10e      	cbz	r6, 8008f20 <_strtol_l.isra.0+0xec>
 8008f1c:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008f20:	6011      	str	r1, [r2, #0]
 8008f22:	e7f2      	b.n	8008f0a <_strtol_l.isra.0+0xd6>
 8008f24:	2430      	movs	r4, #48	; 0x30
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1b3      	bne.n	8008e92 <_strtol_l.isra.0+0x5e>
 8008f2a:	2308      	movs	r3, #8
 8008f2c:	e7b1      	b.n	8008e92 <_strtol_l.isra.0+0x5e>
 8008f2e:	2c30      	cmp	r4, #48	; 0x30
 8008f30:	d0a4      	beq.n	8008e7c <_strtol_l.isra.0+0x48>
 8008f32:	230a      	movs	r3, #10
 8008f34:	e7ad      	b.n	8008e92 <_strtol_l.isra.0+0x5e>
 8008f36:	bf00      	nop
 8008f38:	0800990b 	.word	0x0800990b

08008f3c <_strtol_r>:
 8008f3c:	f7ff bf7a 	b.w	8008e34 <_strtol_l.isra.0>

08008f40 <_strtoul_l.isra.0>:
 8008f40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f44:	4e3b      	ldr	r6, [pc, #236]	; (8009034 <_strtoul_l.isra.0+0xf4>)
 8008f46:	4686      	mov	lr, r0
 8008f48:	468c      	mov	ip, r1
 8008f4a:	4660      	mov	r0, ip
 8008f4c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008f50:	5da5      	ldrb	r5, [r4, r6]
 8008f52:	f015 0508 	ands.w	r5, r5, #8
 8008f56:	d1f8      	bne.n	8008f4a <_strtoul_l.isra.0+0xa>
 8008f58:	2c2d      	cmp	r4, #45	; 0x2d
 8008f5a:	d134      	bne.n	8008fc6 <_strtoul_l.isra.0+0x86>
 8008f5c:	f89c 4000 	ldrb.w	r4, [ip]
 8008f60:	f04f 0801 	mov.w	r8, #1
 8008f64:	f100 0c02 	add.w	ip, r0, #2
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d05e      	beq.n	800902a <_strtoul_l.isra.0+0xea>
 8008f6c:	2b10      	cmp	r3, #16
 8008f6e:	d10c      	bne.n	8008f8a <_strtoul_l.isra.0+0x4a>
 8008f70:	2c30      	cmp	r4, #48	; 0x30
 8008f72:	d10a      	bne.n	8008f8a <_strtoul_l.isra.0+0x4a>
 8008f74:	f89c 0000 	ldrb.w	r0, [ip]
 8008f78:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008f7c:	2858      	cmp	r0, #88	; 0x58
 8008f7e:	d14f      	bne.n	8009020 <_strtoul_l.isra.0+0xe0>
 8008f80:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008f84:	2310      	movs	r3, #16
 8008f86:	f10c 0c02 	add.w	ip, ip, #2
 8008f8a:	f04f 37ff 	mov.w	r7, #4294967295
 8008f8e:	2500      	movs	r5, #0
 8008f90:	fbb7 f7f3 	udiv	r7, r7, r3
 8008f94:	fb03 f907 	mul.w	r9, r3, r7
 8008f98:	ea6f 0909 	mvn.w	r9, r9
 8008f9c:	4628      	mov	r0, r5
 8008f9e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008fa2:	2e09      	cmp	r6, #9
 8008fa4:	d818      	bhi.n	8008fd8 <_strtoul_l.isra.0+0x98>
 8008fa6:	4634      	mov	r4, r6
 8008fa8:	42a3      	cmp	r3, r4
 8008faa:	dd24      	ble.n	8008ff6 <_strtoul_l.isra.0+0xb6>
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	db1f      	blt.n	8008ff0 <_strtoul_l.isra.0+0xb0>
 8008fb0:	4287      	cmp	r7, r0
 8008fb2:	d31d      	bcc.n	8008ff0 <_strtoul_l.isra.0+0xb0>
 8008fb4:	d101      	bne.n	8008fba <_strtoul_l.isra.0+0x7a>
 8008fb6:	45a1      	cmp	r9, r4
 8008fb8:	db1a      	blt.n	8008ff0 <_strtoul_l.isra.0+0xb0>
 8008fba:	fb00 4003 	mla	r0, r0, r3, r4
 8008fbe:	2501      	movs	r5, #1
 8008fc0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008fc4:	e7eb      	b.n	8008f9e <_strtoul_l.isra.0+0x5e>
 8008fc6:	2c2b      	cmp	r4, #43	; 0x2b
 8008fc8:	bf08      	it	eq
 8008fca:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008fce:	46a8      	mov	r8, r5
 8008fd0:	bf08      	it	eq
 8008fd2:	f100 0c02 	addeq.w	ip, r0, #2
 8008fd6:	e7c7      	b.n	8008f68 <_strtoul_l.isra.0+0x28>
 8008fd8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008fdc:	2e19      	cmp	r6, #25
 8008fde:	d801      	bhi.n	8008fe4 <_strtoul_l.isra.0+0xa4>
 8008fe0:	3c37      	subs	r4, #55	; 0x37
 8008fe2:	e7e1      	b.n	8008fa8 <_strtoul_l.isra.0+0x68>
 8008fe4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008fe8:	2e19      	cmp	r6, #25
 8008fea:	d804      	bhi.n	8008ff6 <_strtoul_l.isra.0+0xb6>
 8008fec:	3c57      	subs	r4, #87	; 0x57
 8008fee:	e7db      	b.n	8008fa8 <_strtoul_l.isra.0+0x68>
 8008ff0:	f04f 35ff 	mov.w	r5, #4294967295
 8008ff4:	e7e4      	b.n	8008fc0 <_strtoul_l.isra.0+0x80>
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	da07      	bge.n	800900a <_strtoul_l.isra.0+0xca>
 8008ffa:	2322      	movs	r3, #34	; 0x22
 8008ffc:	f8ce 3000 	str.w	r3, [lr]
 8009000:	f04f 30ff 	mov.w	r0, #4294967295
 8009004:	b942      	cbnz	r2, 8009018 <_strtoul_l.isra.0+0xd8>
 8009006:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800900a:	f1b8 0f00 	cmp.w	r8, #0
 800900e:	d000      	beq.n	8009012 <_strtoul_l.isra.0+0xd2>
 8009010:	4240      	negs	r0, r0
 8009012:	2a00      	cmp	r2, #0
 8009014:	d0f7      	beq.n	8009006 <_strtoul_l.isra.0+0xc6>
 8009016:	b10d      	cbz	r5, 800901c <_strtoul_l.isra.0+0xdc>
 8009018:	f10c 31ff 	add.w	r1, ip, #4294967295
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	e7f2      	b.n	8009006 <_strtoul_l.isra.0+0xc6>
 8009020:	2430      	movs	r4, #48	; 0x30
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1b1      	bne.n	8008f8a <_strtoul_l.isra.0+0x4a>
 8009026:	2308      	movs	r3, #8
 8009028:	e7af      	b.n	8008f8a <_strtoul_l.isra.0+0x4a>
 800902a:	2c30      	cmp	r4, #48	; 0x30
 800902c:	d0a2      	beq.n	8008f74 <_strtoul_l.isra.0+0x34>
 800902e:	230a      	movs	r3, #10
 8009030:	e7ab      	b.n	8008f8a <_strtoul_l.isra.0+0x4a>
 8009032:	bf00      	nop
 8009034:	0800990b 	.word	0x0800990b

08009038 <_strtoul_r>:
 8009038:	f7ff bf82 	b.w	8008f40 <_strtoul_l.isra.0>

0800903c <__submore>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	460c      	mov	r4, r1
 8009042:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d11d      	bne.n	8009088 <__submore+0x4c>
 800904c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009050:	f000 f8a8 	bl	80091a4 <_malloc_r>
 8009054:	b918      	cbnz	r0, 800905e <__submore+0x22>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295
 800905a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009062:	63a3      	str	r3, [r4, #56]	; 0x38
 8009064:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009068:	6360      	str	r0, [r4, #52]	; 0x34
 800906a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800906e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009072:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009076:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800907a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800907e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	2000      	movs	r0, #0
 8009086:	e7e8      	b.n	800905a <__submore+0x1e>
 8009088:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800908a:	0077      	lsls	r7, r6, #1
 800908c:	463a      	mov	r2, r7
 800908e:	f000 f8e3 	bl	8009258 <_realloc_r>
 8009092:	4605      	mov	r5, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d0de      	beq.n	8009056 <__submore+0x1a>
 8009098:	eb00 0806 	add.w	r8, r0, r6
 800909c:	4601      	mov	r1, r0
 800909e:	4632      	mov	r2, r6
 80090a0:	4640      	mov	r0, r8
 80090a2:	f000 f807 	bl	80090b4 <memcpy>
 80090a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80090aa:	f8c4 8000 	str.w	r8, [r4]
 80090ae:	e7e9      	b.n	8009084 <__submore+0x48>

080090b0 <__retarget_lock_acquire_recursive>:
 80090b0:	4770      	bx	lr

080090b2 <__retarget_lock_release_recursive>:
 80090b2:	4770      	bx	lr

080090b4 <memcpy>:
 80090b4:	440a      	add	r2, r1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090bc:	d100      	bne.n	80090c0 <memcpy+0xc>
 80090be:	4770      	bx	lr
 80090c0:	b510      	push	{r4, lr}
 80090c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090ca:	4291      	cmp	r1, r2
 80090cc:	d1f9      	bne.n	80090c2 <memcpy+0xe>
 80090ce:	bd10      	pop	{r4, pc}

080090d0 <memmove>:
 80090d0:	4288      	cmp	r0, r1
 80090d2:	b510      	push	{r4, lr}
 80090d4:	eb01 0402 	add.w	r4, r1, r2
 80090d8:	d902      	bls.n	80090e0 <memmove+0x10>
 80090da:	4284      	cmp	r4, r0
 80090dc:	4623      	mov	r3, r4
 80090de:	d807      	bhi.n	80090f0 <memmove+0x20>
 80090e0:	1e43      	subs	r3, r0, #1
 80090e2:	42a1      	cmp	r1, r4
 80090e4:	d008      	beq.n	80090f8 <memmove+0x28>
 80090e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80090ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80090ee:	e7f8      	b.n	80090e2 <memmove+0x12>
 80090f0:	4402      	add	r2, r0
 80090f2:	4601      	mov	r1, r0
 80090f4:	428a      	cmp	r2, r1
 80090f6:	d100      	bne.n	80090fa <memmove+0x2a>
 80090f8:	bd10      	pop	{r4, pc}
 80090fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80090fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009102:	e7f7      	b.n	80090f4 <memmove+0x24>

08009104 <_free_r>:
 8009104:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009106:	2900      	cmp	r1, #0
 8009108:	d048      	beq.n	800919c <_free_r+0x98>
 800910a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800910e:	9001      	str	r0, [sp, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	f1a1 0404 	sub.w	r4, r1, #4
 8009116:	bfb8      	it	lt
 8009118:	18e4      	addlt	r4, r4, r3
 800911a:	f000 f8d3 	bl	80092c4 <__malloc_lock>
 800911e:	4a20      	ldr	r2, [pc, #128]	; (80091a0 <_free_r+0x9c>)
 8009120:	9801      	ldr	r0, [sp, #4]
 8009122:	6813      	ldr	r3, [r2, #0]
 8009124:	4615      	mov	r5, r2
 8009126:	b933      	cbnz	r3, 8009136 <_free_r+0x32>
 8009128:	6063      	str	r3, [r4, #4]
 800912a:	6014      	str	r4, [r2, #0]
 800912c:	b003      	add	sp, #12
 800912e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009132:	f000 b8cd 	b.w	80092d0 <__malloc_unlock>
 8009136:	42a3      	cmp	r3, r4
 8009138:	d90b      	bls.n	8009152 <_free_r+0x4e>
 800913a:	6821      	ldr	r1, [r4, #0]
 800913c:	1862      	adds	r2, r4, r1
 800913e:	4293      	cmp	r3, r2
 8009140:	bf04      	itt	eq
 8009142:	681a      	ldreq	r2, [r3, #0]
 8009144:	685b      	ldreq	r3, [r3, #4]
 8009146:	6063      	str	r3, [r4, #4]
 8009148:	bf04      	itt	eq
 800914a:	1852      	addeq	r2, r2, r1
 800914c:	6022      	streq	r2, [r4, #0]
 800914e:	602c      	str	r4, [r5, #0]
 8009150:	e7ec      	b.n	800912c <_free_r+0x28>
 8009152:	461a      	mov	r2, r3
 8009154:	685b      	ldr	r3, [r3, #4]
 8009156:	b10b      	cbz	r3, 800915c <_free_r+0x58>
 8009158:	42a3      	cmp	r3, r4
 800915a:	d9fa      	bls.n	8009152 <_free_r+0x4e>
 800915c:	6811      	ldr	r1, [r2, #0]
 800915e:	1855      	adds	r5, r2, r1
 8009160:	42a5      	cmp	r5, r4
 8009162:	d10b      	bne.n	800917c <_free_r+0x78>
 8009164:	6824      	ldr	r4, [r4, #0]
 8009166:	4421      	add	r1, r4
 8009168:	1854      	adds	r4, r2, r1
 800916a:	42a3      	cmp	r3, r4
 800916c:	6011      	str	r1, [r2, #0]
 800916e:	d1dd      	bne.n	800912c <_free_r+0x28>
 8009170:	681c      	ldr	r4, [r3, #0]
 8009172:	685b      	ldr	r3, [r3, #4]
 8009174:	6053      	str	r3, [r2, #4]
 8009176:	4421      	add	r1, r4
 8009178:	6011      	str	r1, [r2, #0]
 800917a:	e7d7      	b.n	800912c <_free_r+0x28>
 800917c:	d902      	bls.n	8009184 <_free_r+0x80>
 800917e:	230c      	movs	r3, #12
 8009180:	6003      	str	r3, [r0, #0]
 8009182:	e7d3      	b.n	800912c <_free_r+0x28>
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	1961      	adds	r1, r4, r5
 8009188:	428b      	cmp	r3, r1
 800918a:	bf04      	itt	eq
 800918c:	6819      	ldreq	r1, [r3, #0]
 800918e:	685b      	ldreq	r3, [r3, #4]
 8009190:	6063      	str	r3, [r4, #4]
 8009192:	bf04      	itt	eq
 8009194:	1949      	addeq	r1, r1, r5
 8009196:	6021      	streq	r1, [r4, #0]
 8009198:	6054      	str	r4, [r2, #4]
 800919a:	e7c7      	b.n	800912c <_free_r+0x28>
 800919c:	b003      	add	sp, #12
 800919e:	bd30      	pop	{r4, r5, pc}
 80091a0:	200002fc 	.word	0x200002fc

080091a4 <_malloc_r>:
 80091a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091a6:	1ccd      	adds	r5, r1, #3
 80091a8:	f025 0503 	bic.w	r5, r5, #3
 80091ac:	3508      	adds	r5, #8
 80091ae:	2d0c      	cmp	r5, #12
 80091b0:	bf38      	it	cc
 80091b2:	250c      	movcc	r5, #12
 80091b4:	2d00      	cmp	r5, #0
 80091b6:	4606      	mov	r6, r0
 80091b8:	db01      	blt.n	80091be <_malloc_r+0x1a>
 80091ba:	42a9      	cmp	r1, r5
 80091bc:	d903      	bls.n	80091c6 <_malloc_r+0x22>
 80091be:	230c      	movs	r3, #12
 80091c0:	6033      	str	r3, [r6, #0]
 80091c2:	2000      	movs	r0, #0
 80091c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80091c6:	f000 f87d 	bl	80092c4 <__malloc_lock>
 80091ca:	4921      	ldr	r1, [pc, #132]	; (8009250 <_malloc_r+0xac>)
 80091cc:	680a      	ldr	r2, [r1, #0]
 80091ce:	4614      	mov	r4, r2
 80091d0:	b99c      	cbnz	r4, 80091fa <_malloc_r+0x56>
 80091d2:	4f20      	ldr	r7, [pc, #128]	; (8009254 <_malloc_r+0xb0>)
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	b923      	cbnz	r3, 80091e2 <_malloc_r+0x3e>
 80091d8:	4621      	mov	r1, r4
 80091da:	4630      	mov	r0, r6
 80091dc:	f000 f862 	bl	80092a4 <_sbrk_r>
 80091e0:	6038      	str	r0, [r7, #0]
 80091e2:	4629      	mov	r1, r5
 80091e4:	4630      	mov	r0, r6
 80091e6:	f000 f85d 	bl	80092a4 <_sbrk_r>
 80091ea:	1c43      	adds	r3, r0, #1
 80091ec:	d123      	bne.n	8009236 <_malloc_r+0x92>
 80091ee:	230c      	movs	r3, #12
 80091f0:	6033      	str	r3, [r6, #0]
 80091f2:	4630      	mov	r0, r6
 80091f4:	f000 f86c 	bl	80092d0 <__malloc_unlock>
 80091f8:	e7e3      	b.n	80091c2 <_malloc_r+0x1e>
 80091fa:	6823      	ldr	r3, [r4, #0]
 80091fc:	1b5b      	subs	r3, r3, r5
 80091fe:	d417      	bmi.n	8009230 <_malloc_r+0x8c>
 8009200:	2b0b      	cmp	r3, #11
 8009202:	d903      	bls.n	800920c <_malloc_r+0x68>
 8009204:	6023      	str	r3, [r4, #0]
 8009206:	441c      	add	r4, r3
 8009208:	6025      	str	r5, [r4, #0]
 800920a:	e004      	b.n	8009216 <_malloc_r+0x72>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	42a2      	cmp	r2, r4
 8009210:	bf0c      	ite	eq
 8009212:	600b      	streq	r3, [r1, #0]
 8009214:	6053      	strne	r3, [r2, #4]
 8009216:	4630      	mov	r0, r6
 8009218:	f000 f85a 	bl	80092d0 <__malloc_unlock>
 800921c:	f104 000b 	add.w	r0, r4, #11
 8009220:	1d23      	adds	r3, r4, #4
 8009222:	f020 0007 	bic.w	r0, r0, #7
 8009226:	1ac2      	subs	r2, r0, r3
 8009228:	d0cc      	beq.n	80091c4 <_malloc_r+0x20>
 800922a:	1a1b      	subs	r3, r3, r0
 800922c:	50a3      	str	r3, [r4, r2]
 800922e:	e7c9      	b.n	80091c4 <_malloc_r+0x20>
 8009230:	4622      	mov	r2, r4
 8009232:	6864      	ldr	r4, [r4, #4]
 8009234:	e7cc      	b.n	80091d0 <_malloc_r+0x2c>
 8009236:	1cc4      	adds	r4, r0, #3
 8009238:	f024 0403 	bic.w	r4, r4, #3
 800923c:	42a0      	cmp	r0, r4
 800923e:	d0e3      	beq.n	8009208 <_malloc_r+0x64>
 8009240:	1a21      	subs	r1, r4, r0
 8009242:	4630      	mov	r0, r6
 8009244:	f000 f82e 	bl	80092a4 <_sbrk_r>
 8009248:	3001      	adds	r0, #1
 800924a:	d1dd      	bne.n	8009208 <_malloc_r+0x64>
 800924c:	e7cf      	b.n	80091ee <_malloc_r+0x4a>
 800924e:	bf00      	nop
 8009250:	200002fc 	.word	0x200002fc
 8009254:	20000300 	.word	0x20000300

08009258 <_realloc_r>:
 8009258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800925a:	4607      	mov	r7, r0
 800925c:	4614      	mov	r4, r2
 800925e:	460e      	mov	r6, r1
 8009260:	b921      	cbnz	r1, 800926c <_realloc_r+0x14>
 8009262:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009266:	4611      	mov	r1, r2
 8009268:	f7ff bf9c 	b.w	80091a4 <_malloc_r>
 800926c:	b922      	cbnz	r2, 8009278 <_realloc_r+0x20>
 800926e:	f7ff ff49 	bl	8009104 <_free_r>
 8009272:	4625      	mov	r5, r4
 8009274:	4628      	mov	r0, r5
 8009276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009278:	f000 f830 	bl	80092dc <_malloc_usable_size_r>
 800927c:	42a0      	cmp	r0, r4
 800927e:	d20f      	bcs.n	80092a0 <_realloc_r+0x48>
 8009280:	4621      	mov	r1, r4
 8009282:	4638      	mov	r0, r7
 8009284:	f7ff ff8e 	bl	80091a4 <_malloc_r>
 8009288:	4605      	mov	r5, r0
 800928a:	2800      	cmp	r0, #0
 800928c:	d0f2      	beq.n	8009274 <_realloc_r+0x1c>
 800928e:	4631      	mov	r1, r6
 8009290:	4622      	mov	r2, r4
 8009292:	f7ff ff0f 	bl	80090b4 <memcpy>
 8009296:	4631      	mov	r1, r6
 8009298:	4638      	mov	r0, r7
 800929a:	f7ff ff33 	bl	8009104 <_free_r>
 800929e:	e7e9      	b.n	8009274 <_realloc_r+0x1c>
 80092a0:	4635      	mov	r5, r6
 80092a2:	e7e7      	b.n	8009274 <_realloc_r+0x1c>

080092a4 <_sbrk_r>:
 80092a4:	b538      	push	{r3, r4, r5, lr}
 80092a6:	4d06      	ldr	r5, [pc, #24]	; (80092c0 <_sbrk_r+0x1c>)
 80092a8:	2300      	movs	r3, #0
 80092aa:	4604      	mov	r4, r0
 80092ac:	4608      	mov	r0, r1
 80092ae:	602b      	str	r3, [r5, #0]
 80092b0:	f7f8 ff84 	bl	80021bc <_sbrk>
 80092b4:	1c43      	adds	r3, r0, #1
 80092b6:	d102      	bne.n	80092be <_sbrk_r+0x1a>
 80092b8:	682b      	ldr	r3, [r5, #0]
 80092ba:	b103      	cbz	r3, 80092be <_sbrk_r+0x1a>
 80092bc:	6023      	str	r3, [r4, #0]
 80092be:	bd38      	pop	{r3, r4, r5, pc}
 80092c0:	2001f7a0 	.word	0x2001f7a0

080092c4 <__malloc_lock>:
 80092c4:	4801      	ldr	r0, [pc, #4]	; (80092cc <__malloc_lock+0x8>)
 80092c6:	f7ff bef3 	b.w	80090b0 <__retarget_lock_acquire_recursive>
 80092ca:	bf00      	nop
 80092cc:	2001f7a8 	.word	0x2001f7a8

080092d0 <__malloc_unlock>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__malloc_unlock+0x8>)
 80092d2:	f7ff beee 	b.w	80090b2 <__retarget_lock_release_recursive>
 80092d6:	bf00      	nop
 80092d8:	2001f7a8 	.word	0x2001f7a8

080092dc <_malloc_usable_size_r>:
 80092dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092e0:	1f18      	subs	r0, r3, #4
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bfbc      	itt	lt
 80092e6:	580b      	ldrlt	r3, [r1, r0]
 80092e8:	18c0      	addlt	r0, r0, r3
 80092ea:	4770      	bx	lr

080092ec <_init>:
 80092ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ee:	bf00      	nop
 80092f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092f2:	bc08      	pop	{r3}
 80092f4:	469e      	mov	lr, r3
 80092f6:	4770      	bx	lr

080092f8 <_fini>:
 80092f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092fa:	bf00      	nop
 80092fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fe:	bc08      	pop	{r3}
 8009300:	469e      	mov	lr, r3
 8009302:	4770      	bx	lr
